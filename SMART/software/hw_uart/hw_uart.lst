
hw_uart.elf:     file format elf32-msp430

SYMBOL TABLE:
0000ffee l    d  __interrupt_vector_8	00000000 __interrupt_vector_8
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e02c l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000202 l    d  .bss	00000000 .bss
00000215 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e088 l       .text	00000000 _msp430_run_array
0000e096 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 cprintf.c
0000e008 l     O .rodata	00000011 hex
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e024 l     O .rodata	00000000 __CTOR_LIST__
0000e028 l     O .rodata	00000000 __DTOR_LIST__
0000e01c l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000ea34 l     O .text	00000000 __TMC_LIST__
0000e09c l     F .text	00000000 deregister_tm_clones
0000e0b6 l     F .text	00000000 register_tm_clones
0000e0e4 l     F .text	00000000 __do_global_dtors_aux
00000202 l     O .bss	00000000 completed.3056
00000204 l     O .bss	00000000 dtor_idx.3058
0000e132 l     F .text	00000000 call___do_global_dtors_aux
0000e132 l     F .text	00000000 frame_dummy
00000206 l     O .bss	00000000 object.3071
0000e14a l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e026 l     O .rodata	00000000 __CTOR_END__
0000e01c l     O .rodata	00000000 __FRAME_END__
0000e9fe l     F .text	00000000 __do_global_ctors_aux
0000ea18 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e914 g       .text	00000000 .hidden __mspabi_srli_9
0000e89a g       .text	00000000 .hidden __mspabi_srai_6
0000e8a4 g       .text	00000000 .hidden __mspabi_srai_1
0000e964 g       .text	00000000 .hidden __mspabi_srll_10
0000e910 g       .text	00000000 .hidden __mspabi_srli_10
0000e8c6 g       .text	00000000 .hidden __mspabi_sral_10
0000e8b6 g       .text	00000000 .hidden __mspabi_sral_14
0000e170 g     F .text	00000054 INT_uart_rx
0000e8fc g       .text	00000000 .hidden __mspabi_srli_15
0000e9b0 g     F .text	00000038 memmove
0000e928 g       .text	00000000 .hidden __mspabi_srli_4
0000e7aa g     F .text	00000040 .hidden udivmodhi4
0000e8ca g       .text	00000000 .hidden __mspabi_sral_9
0000e91c g       .text	00000000 .hidden __mspabi_srli_7
0000e976 g       .text	00000000 .hidden __mspabi_srll_7
0000e98e g       .text	00000000 .hidden __mspabi_srll_3
0000e5b6 g     F .text	000001f4 cprintf
0000e8d6 g       .text	00000000 .hidden __mspabi_sral_6
0000e8ea g       .text	00000000 .hidden __mspabi_sral_1
0000e87a g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e888 g       .text	00000000 .hidden __mspabi_srai_15
0000e208 g     F .text	00000018 cput_nibble
0000ea34 g     O .text	00000000 .hidden __TMC_END__
0000e952 g       .text	00000000 .hidden __mspabi_srll_13
0000e02a g     O .rodata	00000000 .hidden __DTOR_END__
0000e020 g       .rodata	00000000 __fini_array_end
0000e908 g       .text	00000000 .hidden __mspabi_srli_12
0000e8a2 g       .text	00000000 .hidden __mspabi_srai_2
0000e8a0 g       .text	00000000 .hidden __mspabi_srai_3
0000e02c g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e030 g     F .text	0000000e __crt0_init_bss
00000013 g       *ABS*	00000000 __bsssize
0000e892 g       .text	00000000 .hidden __mspabi_srai_10
0000e836 g     F .text	00000032 .hidden __mspabi_remi
0000e052 g     F .text	0000000a __crt0_call_init_then_main
0000e884 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e25e g     F .text	00000050 cput_binary_byte
0000e880 g       .text	00000000 .hidden __mspabi_func_epilog_3
0000e982 g       .text	00000000 .hidden __mspabi_srll_5
0000e940 g       .text	00000000 .hidden __mspabi_srli
0000e324 g     F .text	000000f8 cput_hex_long
0000e95e g       .text	00000000 .hidden __mspabi_srll_11
0000e924 g       .text	00000000 .hidden __mspabi_srli_5
00000214 g     O .bss	00000001 rxdata
00000000  w      *UND*	00000000 __deregister_frame_info
00000216 g       .noinit	00000000 end
0000e8c2 g       .text	00000000 .hidden __mspabi_sral_11
0000e8b2 g       .text	00000000 .hidden __mspabi_sral_15
0000e898 g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e220 g     F .text	0000003e cput_hex_byte
0000e870 g     F .text	00000008 .hidden __mspabi_remu
0000e97c g       .text	00000000 .hidden __mspabi_srll_6
0000e8de g       .text	00000000 .hidden __mspabi_sral_4
0000e02c g       .text	00000000 _start
0000e2ae g     F .text	00000076 cput_hex_word
0000e078 g     F .text	00000000 _msp430_run_fini_array
0000e934 g       .text	00000000 .hidden __mspabi_srli_1
0000e94c g       .text	00000000 .hidden __mspabi_srll_14
0000e8ac g       .text	00000000 .hidden __mspabi_srai
0000e88e g       .text	00000000 .hidden __mspabi_srai_12
0000e900 g       .text	00000000 .hidden __mspabi_srli_14
00000002 g       *ABS*	00000000 __romdatacopysize
0000e8d2 g       .text	00000000 .hidden __mspabi_sral_7
0000e896 g       .text	00000000 .hidden __mspabi_srai_8
0000e90c g       .text	00000000 .hidden __mspabi_srli_11
0000e4f0 g     F .text	000000c6 cput_number
0000e8e6 g       .text	00000000 .hidden __mspabi_sral_2
0000e41c g     F .text	00000088 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e020 g       .rodata	00000000 __fini_array_start
0000e7ea g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000ea18 g       .text	00000000 __msp430_init
0000e9e8 g     F .text	00000014 memset
0000e1c4 g     F .text	00000044 main
0000e894 g       .text	00000000 .hidden __mspabi_srai_9
0000e890 g       .text	00000000 .hidden __mspabi_srai_11
0000e988 g       .text	00000000 .hidden __mspabi_srll_4
0000e020 g       .rodata	00000000 __init_array_end
0000e930 g       .text	00000000 .hidden __mspabi_srli_2
0000e8f6 g       .text	00000000 .hidden __mspabi_sral
0000e868 g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
00000000  w      *ABS*	00000000 __rom_highdatastart
0000ea34 g       .text	00000000 __msp430_fini_end
0000e8ce g       .text	00000000 .hidden __mspabi_sral_8
0000e8ba g       .text	00000000 .hidden __mspabi_sral_13
0000e14a g     F .text	00000014 delay
0000e958 g       .text	00000000 .hidden __mspabi_srll_12
0000ea34 g       *ABS*	00000000 __romdatastart
0000e89e g       .text	00000000 .hidden __mspabi_srai_4
0000e05c g     F .text	00000000 _msp430_run_init_array
0000e920 g       .text	00000000 .hidden __mspabi_srli_6
0000e020 g       .rodata	00000000 __preinit_array_end
0000e92c g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00000202 g       .bss	00000000 __bssstart
0000e87c g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e88a g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .MP430.attributes	00000000 __stack
0000e96a g       .text	00000000 .hidden __mspabi_srll_9
0000e8e2 g       .text	00000000 .hidden __mspabi_sral_3
00000202 g       .data	00000000 _edata
0000e8be g       .text	00000000 .hidden __mspabi_sral_12
0000ea2a g       .text	00000000 __msp430_init_end
0000e15e g     F .text	00000012 tty_putc
0000e9aa g       .text	00000000 .hidden __mspabi_srll
0000e4a4 g     F .text	0000004c cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000e946 g       .text	00000000 .hidden __mspabi_srll_15
0000e020 g       .rodata	00000000 __init_array_start
0000e89c g       .text	00000000 .hidden __mspabi_srai_5
0000e88c g       .text	00000000 .hidden __mspabi_srai_13
0000e904 g       .text	00000000 .hidden __mspabi_srli_13
00000200 g       .data	00000000 __datastart
0000e970 g       .text	00000000 .hidden __mspabi_srll_8
0000e99a g       .text	00000000 .hidden __mspabi_srll_1
0000e020 g       .rodata	00000000 __preinit_array_start
0000e03e g     F .text	00000014 __crt0_movedata
0000e882 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e8da g       .text	00000000 .hidden __mspabi_sral_5
0000e06a g     F .text	00000000 _msp430_run_preinit_array
0000e878 g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e87e g       .text	00000000 .hidden __mspabi_func_epilog_4
0000e994 g       .text	00000000 .hidden __mspabi_srll_2
0000ea2a g       .text	00000000 __msp430_fini
0000e918 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_8:

0000ffee <__interrupt_vector_8>:
    ffee:	70 e1       	interrupt service routine at 0xe170

Disassembly of section .text:

0000e02c <__crt0_start>:
    e02c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e030 <__crt0_init_bss>:
    e030:	3c 40 02 02 	mov	#514,	r12	;#0x0202

0000e034 <.Loc.74.1>:
    e034:	0d 43       	clr	r13		;

0000e036 <.Loc.75.1>:
    e036:	3e 40 13 00 	mov	#19,	r14	;#0x0013

0000e03a <.Loc.79.1>:
    e03a:	b0 12 e8 e9 	call	#59880		;#0xe9e8

0000e03e <__crt0_movedata>:
    e03e:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e042 <.Loc.116.1>:
    e042:	3d 40 34 ea 	mov	#59956,	r13	;#0xea34

0000e046 <.Loc.119.1>:
    e046:	0d 9c       	cmp	r12,	r13	;

0000e048 <.Loc.120.1>:
    e048:	04 24       	jz	$+10     	;abs 0xe052

0000e04a <.Loc.122.1>:
    e04a:	3e 40 02 00 	mov	#2,	r14	;

0000e04e <.Loc.124.1>:
    e04e:	b0 12 b0 e9 	call	#59824		;#0xe9b0

0000e052 <__crt0_call_init_then_main>:
    e052:	b0 12 18 ea 	call	#59928		;#0xea18

0000e056 <.Loc.196.1>:
    e056:	0c 43       	clr	r12		;

0000e058 <.Loc.197.1>:
    e058:	b0 12 c4 e1 	call	#57796		;#0xe1c4

0000e05c <_msp430_run_init_array>:
    e05c:	34 40 20 e0 	mov	#57376,	r4	;#0xe020

0000e060 <.Loc.224.1>:
    e060:	35 40 20 e0 	mov	#57376,	r5	;#0xe020

0000e064 <.Loc.225.1>:
    e064:	26 43       	mov	#2,	r6	;r3 As==10

0000e066 <.Loc.226.1>:
    e066:	30 40 88 e0 	br	#0xe088		;

0000e06a <_msp430_run_preinit_array>:
    e06a:	34 40 20 e0 	mov	#57376,	r4	;#0xe020

0000e06e <.Loc.232.1>:
    e06e:	35 40 20 e0 	mov	#57376,	r5	;#0xe020

0000e072 <.Loc.233.1>:
    e072:	26 43       	mov	#2,	r6	;r3 As==10

0000e074 <.Loc.234.1>:
    e074:	30 40 88 e0 	br	#0xe088		;

0000e078 <_msp430_run_fini_array>:
    e078:	34 40 20 e0 	mov	#57376,	r4	;#0xe020

0000e07c <.Loc.240.1>:
    e07c:	35 40 20 e0 	mov	#57376,	r5	;#0xe020

0000e080 <.Loc.241.1>:
    e080:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e084 <.Loc.242.1>:
    e084:	30 40 88 e0 	br	#0xe088		;

0000e088 <_msp430_run_array>:
    e088:	05 94       	cmp	r4,	r5	;

0000e08a <.Loc.246.1>:
    e08a:	05 24       	jz	$+12     	;abs 0xe096

0000e08c <.Loc.247.1>:
    e08c:	27 44       	mov	@r4,	r7	;

0000e08e <.Loc.248.1>:
    e08e:	04 56       	add	r6,	r4	;

0000e090 <.Loc.249.1>:
    e090:	a7 12       	call	@r7		;

0000e092 <.Loc.250.1>:
    e092:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe088

0000e096 <_msp430_run_done>:
    e096:	30 41       	ret			

0000e098 <L0>:
    e098:	30 41       	ret			
    e09a:	30 41       	ret			

0000e09c <deregister_tm_clones>:
    e09c:	3c 40 34 ea 	mov	#59956,	r12	;#0xea34
    e0a0:	3c 90 34 ea 	cmp	#59956,	r12	;#0xea34
    e0a4:	07 24       	jz	$+16     	;abs 0xe0b4
    e0a6:	3d 40 00 00 	mov	#0,	r13	;
    e0aa:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0ac:	03 24       	jz	$+8      	;abs 0xe0b4
    e0ae:	3c 40 34 ea 	mov	#59956,	r12	;#0xea34
    e0b2:	8d 12       	call	r13		;

0000e0b4 <.L1>:
    e0b4:	30 41       	ret			

0000e0b6 <register_tm_clones>:
    e0b6:	0a 12       	push	r10		;
    e0b8:	3a 40 34 ea 	mov	#59956,	r10	;#0xea34
    e0bc:	3a 80 34 ea 	sub	#59956,	r10	;#0xea34
    e0c0:	0a 11       	rra	r10		;
    e0c2:	0c 4a       	mov	r10,	r12	;
    e0c4:	b0 12 fc e8 	call	#59644		;#0xe8fc
    e0c8:	0c 5a       	add	r10,	r12	;
    e0ca:	0d 4c       	mov	r12,	r13	;
    e0cc:	0d 11       	rra	r13		;
    e0ce:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0d0:	07 24       	jz	$+16     	;abs 0xe0e0
    e0d2:	3e 40 00 00 	mov	#0,	r14	;
    e0d6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0d8:	03 24       	jz	$+8      	;abs 0xe0e0
    e0da:	3c 40 34 ea 	mov	#59956,	r12	;#0xea34
    e0de:	8e 12       	call	r14		;

0000e0e0 <.L9>:
    e0e0:	3a 41       	pop	r10		;
    e0e2:	30 41       	ret			

0000e0e4 <__do_global_dtors_aux>:
    e0e4:	0a 12       	push	r10		;
    e0e6:	09 12       	push	r9		;
    e0e8:	c2 93 02 02 	cmp.b	#0,	&0x0202	;r3 As==00
    e0ec:	17 20       	jnz	$+48     	;abs 0xe11c
    e0ee:	3a 40 2a e0 	mov	#57386,	r10	;#0xe02a
    e0f2:	3a 80 28 e0 	sub	#57384,	r10	;#0xe028
    e0f6:	0a 11       	rra	r10		;
    e0f8:	3a 53       	add	#-1,	r10	;r3 As==11
    e0fa:	39 40 28 e0 	mov	#57384,	r9	;#0xe028

0000e0fe <.L19>:
    e0fe:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    e102:	0c 9a       	cmp	r10,	r12	;
    e104:	0d 28       	jnc	$+28     	;abs 0xe120
    e106:	b0 12 9c e0 	call	#57500		;#0xe09c
    e10a:	3d 40 00 00 	mov	#0,	r13	;
    e10e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e110:	03 24       	jz	$+8      	;abs 0xe118
    e112:	3c 40 1c e0 	mov	#57372,	r12	;#0xe01c
    e116:	8d 12       	call	r13		;

0000e118 <.L21>:
    e118:	d2 43 02 02 	mov.b	#1,	&0x0202	;r3 As==01

0000e11c <.L17>:
    e11c:	30 40 82 e8 	br	#0xe882		;

0000e120 <.L20>:
    e120:	1c 53       	inc	r12		;
    e122:	82 4c 04 02 	mov	r12,	&0x0204	;
    e126:	0c 5c       	rla	r12		;
    e128:	0c 59       	add	r9,	r12	;
    e12a:	2c 4c       	mov	@r12,	r12	;
    e12c:	8c 12       	call	r12		;
    e12e:	30 40 fe e0 	br	#0xe0fe		;

0000e132 <call___do_global_dtors_aux>:
    e132:	3e 40 00 00 	mov	#0,	r14	;
    e136:	0e 93       	cmp	#0,	r14	;r3 As==00
    e138:	05 24       	jz	$+12     	;abs 0xe144
    e13a:	3d 40 06 02 	mov	#518,	r13	;#0x0206
    e13e:	3c 40 1c e0 	mov	#57372,	r12	;#0xe01c
    e142:	8e 12       	call	r14		;

0000e144 <.L27>:
    e144:	b0 12 b6 e0 	call	#57526		;#0xe0b6
    e148:	30 41       	ret			

0000e14a <delay>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e14a:	0d 4c       	mov	r12,	r13	;
    e14c:	3d 53       	add	#-1,	r13	;r3 As==11

0000e14e <.LVL1>:
    e14e:	0c 93       	cmp	#0,	r12	;r3 As==00
    e150:	05 24       	jz	$+12     	;abs 0xe15c

0000e152 <.L3>:
      __nop();
    e152:	03 43       	nop			

0000e154 <.Loc.13.1>:
      __nop();
    e154:	03 43       	nop			

0000e156 <.Loc.11.1>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e156:	3d 53       	add	#-1,	r13	;r3 As==11
    e158:	3d 93       	cmp	#-1,	r13	;r3 As==11
    e15a:	fb 23       	jnz	$-8      	;abs 0xe152

0000e15c <.L1>:
      __nop();
      __nop();
   }
}
    e15c:	30 41       	ret			

0000e15e <tty_putc>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e15e:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

0000e162 <.L10>:
    e162:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    e166:	fd 23       	jnz	$-4      	;abs 0xe162

0000e168 <.Loc.27.1>:

  // Write the output character
  UART_TXD = txdata;
    e168:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e16c <.Loc.30.1>:

  return 0;
}
    e16c:	4c 43       	clr.b	r12		;

0000e16e <.LVL4>:
    e16e:	30 41       	ret			

0000e170 <INT_uart_rx>:
//         (receive a byte from the UART)           //
//--------------------------------------------------//
volatile char rxdata;

// wakeup interrupt (8) INT_uart_rx(void) {
interrupt (8) INT_uart_rx(void) {
    e170:	0f 12       	push	r15		;

0000e172 <.LCFI0>:
    e172:	0e 12       	push	r14		;

0000e174 <.LCFI1>:
    e174:	0d 12       	push	r13		;

0000e176 <.LCFI2>:
    e176:	0c 12       	push	r12		;

0000e178 <.LCFI3>:
    e178:	0b 12       	push	r11		;

0000e17a <.LCFI4>:
    e17a:	0a 12       	push	r10		;

0000e17c <.LCFI5>:
    e17c:	09 12       	push	r9		;

0000e17e <.LCFI6>:
    e17e:	08 12       	push	r8		;

0000e180 <.LCFI7>:
    e180:	07 12       	push	r7		;

0000e182 <.LCFI8>:
    e182:	06 12       	push	r6		;

0000e184 <.LCFI9>:
    e184:	05 12       	push	r5		;

0000e186 <.LCFI10>:
    e186:	04 12       	push	r4		;

0000e188 <.LCFI11>:
    e188:	21 82       	sub	#4,	r1	;r2 As==10

0000e18a <.LCFI12>:
  // Read the received data
  rxdata = UART_RXD;
    e18a:	d2 42 85 00 	mov.b	&0x0085,&0x0214	;0x0085
    e18e:	14 02 

0000e190 <.Loc.44.1>:

  // Clear the receive pending flag
  UART_STAT = UART_RX_PND;
    e190:	f2 40 10 00 	mov.b	#16,	&0x0081	;#0x0010
    e194:	81 00 

0000e196 <.Loc.46.1>:

  cprintf("%c", rxdata);
    e196:	5c 42 14 02 	mov.b	&0x0214,r12	;0x0214
    e19a:	81 4c 02 00 	mov	r12,	2(r1)	;
    e19e:	b1 40 00 e0 	mov	#57344,	0(r1)	;#0xe000
    e1a2:	00 00 
    e1a4:	b0 12 b6 e5 	call	#58806		;#0xe5b6

0000e1a8 <.LVL5>:
  // // Exit the low power mode
  // LPM0_EXIT;
}
    e1a8:	21 52       	add	#4,	r1	;r2 As==10
    e1aa:	34 41       	pop	r4		;
    e1ac:	35 41       	pop	r5		;
    e1ae:	36 41       	pop	r6		;
    e1b0:	37 41       	pop	r7		;
    e1b2:	38 41       	pop	r8		;
    e1b4:	39 41       	pop	r9		;
    e1b6:	3a 41       	pop	r10		;
    e1b8:	3b 41       	pop	r11		;
    e1ba:	3c 41       	pop	r12		;
    e1bc:	3d 41       	pop	r13		;
    e1be:	3e 41       	pop	r14		;
    e1c0:	3f 41       	pop	r15		;
    e1c2:	00 13       	reti			

0000e1c4 <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e1c4:	0a 12       	push	r10		;

0000e1c6 <.LCFI13>:
    e1c6:	09 12       	push	r9		;

0000e1c8 <.LCFI14>:
    e1c8:	21 83       	decd	r1		;

0000e1ca <.LCFI15>:
    char buf[40];
    int led = 0;
//    int *key;
//    key = (void *)0xfee0; 

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e1ca:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    e1ce:	20 01 

0000e1d0 <.Loc.72.1>:

    P3DIR  = 0xff;
    e1d0:	f2 43 1a 00 	mov.b	#-1,	&0x001a	;r3 As==11

0000e1d4 <.Loc.73.1>:
    P3OUT  = 0xff;                      // Light LED during init
    e1d4:	f2 43 19 00 	mov.b	#-1,	&0x0019	;r3 As==11

0000e1d8 <.Loc.75.1>:

    UART_BAUD = BAUD;                   // Init UART
    e1d8:	b2 40 ae 00 	mov	#174,	&0x0082	;#0x00ae
    e1dc:	82 00 

0000e1de <.Loc.76.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e1de:	f2 40 11 00 	mov.b	#17,	&0x0080	;#0x0011
    e1e2:	80 00 

0000e1e4 <.Loc.81.1>:


    // delay(65535);

    P3OUT  = 0x00;                      // Switch off LED
    e1e4:	c2 43 19 00 	mov.b	#0,	&0x0019	;r3 As==00

0000e1e8 <.Loc.84.1>:

    // cprintf("\r\n====== openMSP430 in action ======\r\n");   //say hello
    cprintf("> ");
    e1e8:	b1 40 03 e0 	mov	#57347,	0(r1)	;#0xe003
    e1ec:	00 00 
    e1ee:	3a 40 b6 e5 	mov	#58806,	r10	;#0xe5b6
    e1f2:	8a 12       	call	r10		;

0000e1f4 <.LVL7>:
  //  cprintf("%d", *key);

    enable_interrupts();                  // Enable interrupts
    e1f4:	03 43       	nop			
    e1f6:	32 d2       	eint			
    e1f8:	03 43       	nop			

0000e1fa <.LVL8>:

    while (1) {                         //main loop, never ends...
        reading = 1;
        while (reading) {               //loop and read characters
          cprintf(".");
    e1fa:	39 40 06 e0 	mov	#57350,	r9	;#0xe006

0000e1fe <.L14>:
    e1fe:	81 49 00 00 	mov	r9,	0(r1)	;
    e202:	8a 12       	call	r10		;

0000e204 <.LVL9>:
    e204:	30 40 fe e1 	br	#0xe1fe		;

0000e208 <cput_nibble>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e208:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f

0000e20c <.LVL1>:
    e20c:	5d 4c 08 e0 	mov.b	-8184(r12),r13	;0xffffe008

0000e210 <.LBB120>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e210:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e214 <.L2>:
    e214:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e218:	fd 23       	jnz	$-4      	;abs 0xe214

0000e21a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e21a:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e21e <.LBE120>:

void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
}
    e21e:	30 41       	ret			

0000e220 <cput_hex_byte>:

void
cput_hex_byte (int n)
{
    e220:	0a 12       	push	r10		;

0000e222 <.LCFI0>:
    e222:	09 12       	push	r9		;

0000e224 <.LCFI1>:
    e224:	09 4c       	mov	r12,	r9	;

0000e226 <.LBB122>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e226:	3a 40 08 e0 	mov	#57352,	r10	;#0xe008

0000e22a <.LBE122>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e22a:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e22e <.LBB127>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e22e:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e232:	0c 5a       	add	r10,	r12	;
    e234:	6d 4c       	mov.b	@r12,	r13	;

0000e236 <.LBB124>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e236:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e23a <.L6>:
    e23a:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e23e:	fd 23       	jnz	$-4      	;abs 0xe23a

0000e240 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e240:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e244 <.LBB128>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e244:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e248 <.LVL9>:
    e248:	0a 59       	add	r9,	r10	;
    e24a:	6d 4a       	mov.b	@r10,	r13	;

0000e24c <.LBB130>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e24c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e250 <.L7>:
    e250:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e254:	fd 23       	jnz	$-4      	;abs 0xe250

0000e256 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e256:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e25a <.LBE128>:
void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
  cput_nibble (n);
}
    e25a:	30 40 82 e8 	br	#0xe882		;

0000e25e <cput_binary_byte>:

void
cput_binary_byte (int n)
{
    e25e:	0a 12       	push	r10		;

0000e260 <.LCFI2>:
    e260:	09 12       	push	r9		;

0000e262 <.LCFI3>:
    e262:	08 12       	push	r8		;

0000e264 <.LCFI4>:
    e264:	07 12       	push	r7		;

0000e266 <.LCFI5>:
    e266:	06 12       	push	r6		;

0000e268 <.LCFI6>:
    e268:	05 12       	push	r5		;

0000e26a <.LCFI7>:
    e26a:	07 4c       	mov	r12,	r7	;

0000e26c <.LVL13>:
  int i;
  for (i=7; i>=0; i--)
    e26c:	79 40 07 00 	mov.b	#7,	r9	;
    e270:	75 40 30 00 	mov.b	#48,	r5	;#0x0030

0000e274 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e274:	76 40 31 00 	mov.b	#49,	r6	;#0x0031

0000e278 <.LBB132>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e278:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e27c <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e27c:	78 40 84 00 	mov.b	#132,	r8	;#0x0084

0000e280 <.L13>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e280:	0c 47       	mov	r7,	r12	;
    e282:	0d 49       	mov	r9,	r13	;
    e284:	b0 12 ac e8 	call	#59564		;#0xe8ac
    e288:	1c b3       	bit	#1,	r12	;r3 As==01
    e28a:	0b 24       	jz	$+24     	;abs 0xe2a2
    e28c:	0c 46       	mov	r6,	r12	;

0000e28e <.L12>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e28e:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e292:	fd 23       	jnz	$-4      	;abs 0xe28e

0000e294 <.L17>:

  // Write the output character
  UART_TXD = txdata;
    e294:	c8 4c 00 00 	mov.b	r12,	0(r8)	;

0000e298 <.LBE136>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e298:	39 53       	add	#-1,	r9	;r3 As==11
    e29a:	39 93       	cmp	#-1,	r9	;r3 As==11
    e29c:	f1 23       	jnz	$-28     	;abs 0xe280

0000e29e <.Loc.45.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e29e:	30 40 7a e8 	br	#0xe87a		;

0000e2a2 <.L14>:
    e2a2:	0c 45       	mov	r5,	r12	;

0000e2a4 <.LBB137>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2a4:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e2a8:	f2 23       	jnz	$-26     	;abs 0xe28e
    e2aa:	30 40 94 e2 	br	#0xe294		;

0000e2ae <cput_hex_word>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}

void
cput_hex_word (int n)
{
    e2ae:	0a 12       	push	r10		;

0000e2b0 <.LCFI8>:
    e2b0:	09 12       	push	r9		;

0000e2b2 <.LCFI9>:
    e2b2:	08 12       	push	r8		;

0000e2b4 <.LCFI10>:
    e2b4:	09 4c       	mov	r12,	r9	;

0000e2b6 <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e2b6:	b0 12 96 e8 	call	#59542		;#0xe896

0000e2ba <.LVL18>:
    e2ba:	08 4c       	mov	r12,	r8	;

0000e2bc <.LBB138>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2bc:	3a 40 08 e0 	mov	#57352,	r10	;#0xe008
    e2c0:	0c 49       	mov	r9,	r12	;
    e2c2:	b0 12 08 e9 	call	#59656		;#0xe908
    e2c6:	0c 5a       	add	r10,	r12	;
    e2c8:	6d 4c       	mov.b	@r12,	r13	;

0000e2ca <.LBB141>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2ca:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2ce <.L19>:
    e2ce:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2d2:	fd 23       	jnz	$-4      	;abs 0xe2ce

0000e2d4 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2d4:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2d8 <.LBB143>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2d8:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e2dc <.LVL23>:
    e2dc:	08 5a       	add	r10,	r8	;
    e2de:	6d 48       	mov.b	@r8,	r13	;

0000e2e0 <.LBB145>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2e0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2e4 <.L20>:
    e2e4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2e8:	fd 23       	jnz	$-4      	;abs 0xe2e4

0000e2ea <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2ea:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2ee <.LBB147>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e2ee:	0c 49       	mov	r9,	r12	;
    e2f0:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e2f4 <.LBB149>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2f4:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2f8:	0c 5a       	add	r10,	r12	;
    e2fa:	6d 4c       	mov.b	@r12,	r13	;

0000e2fc <.LBB151>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2fc:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e300 <.L21>:
    e300:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e304:	fd 23       	jnz	$-4      	;abs 0xe300

0000e306 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e306:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e30a <.LBB153>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e30a:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e30e <.LVL29>:
    e30e:	0a 59       	add	r9,	r10	;
    e310:	6d 4a       	mov.b	@r10,	r13	;

0000e312 <.LBB155>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e312:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e316 <.L22>:
    e316:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e31a:	fd 23       	jnz	$-4      	;abs 0xe316

0000e31c <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e31c:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e320 <.LBE147>:
void
cput_hex_word (int n)
{
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e320:	30 40 80 e8 	br	#0xe880		;

0000e324 <cput_hex_long>:

void
cput_hex_long (long int n)
{
    e324:	0a 12       	push	r10		;

0000e326 <.LCFI11>:
    e326:	09 12       	push	r9		;

0000e328 <.LCFI12>:
    e328:	08 12       	push	r8		;

0000e32a <.LCFI13>:
    e32a:	07 12       	push	r7		;

0000e32c <.LCFI14>:
    e32c:	09 4c       	mov	r12,	r9	;
    e32e:	08 4d       	mov	r13,	r8	;

0000e330 <.Loc.57.1>:
  cput_hex_byte (n >> 24);
    e330:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e334:	b0 12 f6 e8 	call	#59638		;#0xe8f6

0000e338 <.LVL33>:
    e338:	07 4c       	mov	r12,	r7	;

0000e33a <.LBB157>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e33a:	3a 40 08 e0 	mov	#57352,	r10	;#0xe008

0000e33e <.LBE159>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e33e:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e342 <.LBB164>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e342:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e346:	0c 5a       	add	r10,	r12	;
    e348:	6d 4c       	mov.b	@r12,	r13	;

0000e34a <.LBB161>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e34a:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e34e <.L28>:
    e34e:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e352:	fd 23       	jnz	$-4      	;abs 0xe34e

0000e354 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e354:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e358 <.LBB165>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e358:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e35c <.LVL38>:
    e35c:	07 5a       	add	r10,	r7	;
    e35e:	6d 47       	mov.b	@r7,	r13	;

0000e360 <.LBB167>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e360:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e364 <.L29>:
    e364:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e368:	fd 23       	jnz	$-4      	;abs 0xe364

0000e36a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e36a:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e36e <.LBE157>:

void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
    e36e:	0c 49       	mov	r9,	r12	;
    e370:	0d 48       	mov	r8,	r13	;
    e372:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e376:	b0 12 f6 e8 	call	#59638		;#0xe8f6
    e37a:	07 4c       	mov	r12,	r7	;

0000e37c <.LBB169>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e37c:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e380 <.LBB171>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e380:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e384:	0c 5a       	add	r10,	r12	;
    e386:	6d 4c       	mov.b	@r12,	r13	;

0000e388 <.LBB173>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e388:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e38c <.L30>:
    e38c:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e390:	fd 23       	jnz	$-4      	;abs 0xe38c

0000e392 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e392:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e396 <.LBB175>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e396:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e39a <.LVL46>:
    e39a:	07 5a       	add	r10,	r7	;
    e39c:	6d 47       	mov.b	@r7,	r13	;

0000e39e <.LBB177>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e39e:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3a2 <.L31>:
    e3a2:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3a6:	fd 23       	jnz	$-4      	;abs 0xe3a2

0000e3a8 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3a8:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3ac <.LBE169>:
void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
    e3ac:	0c 49       	mov	r9,	r12	;
    e3ae:	0d 48       	mov	r8,	r13	;
    e3b0:	b0 12 ce e8 	call	#59598		;#0xe8ce
    e3b4:	08 4c       	mov	r12,	r8	;

0000e3b6 <.LBB179>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e3b6:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e3ba <.LBB181>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3ba:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e3be:	0c 5a       	add	r10,	r12	;
    e3c0:	6d 4c       	mov.b	@r12,	r13	;

0000e3c2 <.LBB183>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3c2:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3c6 <.L32>:
    e3c6:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3ca:	fd 23       	jnz	$-4      	;abs 0xe3c6

0000e3cc <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3cc:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3d0 <.LBB185>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3d0:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e3d4 <.LVL54>:
    e3d4:	08 5a       	add	r10,	r8	;
    e3d6:	6d 48       	mov.b	@r8,	r13	;

0000e3d8 <.LBB187>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3d8:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3dc <.L33>:
    e3dc:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3e0:	fd 23       	jnz	$-4      	;abs 0xe3dc

0000e3e2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3e2:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3e6 <.LBB189>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e3e6:	0c 49       	mov	r9,	r12	;
    e3e8:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e3ec <.LBB191>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3ec:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e3f0:	0c 5a       	add	r10,	r12	;
    e3f2:	6d 4c       	mov.b	@r12,	r13	;

0000e3f4 <.LBB193>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3f4:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3f8 <.L34>:
    e3f8:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3fc:	fd 23       	jnz	$-4      	;abs 0xe3f8

0000e3fe <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3fe:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e402 <.LBB195>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e402:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e406 <.LVL60>:
    e406:	0a 59       	add	r9,	r10	;
    e408:	6d 4a       	mov.b	@r10,	r13	;

0000e40a <.LBB197>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e40a:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e40e <.L35>:
    e40e:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e412:	fd 23       	jnz	$-4      	;abs 0xe40e

0000e414 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e414:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e418 <.LBE189>:
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e418:	30 40 7e e8 	br	#0xe87e		;

0000e41c <cput_hex_block>:

void
cput_hex_block (char *block, int n)
{
    e41c:	0a 12       	push	r10		;

0000e41e <.LCFI15>:
    e41e:	09 12       	push	r9		;

0000e420 <.LCFI16>:
    e420:	08 12       	push	r8		;

0000e422 <.LCFI17>:
    e422:	07 12       	push	r7		;

0000e424 <.LCFI18>:
    e424:	06 12       	push	r6		;

0000e426 <.LCFI19>:
    e426:	05 12       	push	r5		;

0000e428 <.LCFI20>:
    e428:	04 12       	push	r4		;

0000e42a <.LCFI21>:
  int i = 0;
  while (n)
    e42a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e42c:	39 24       	jz	$+116    	;abs 0xe4a0
    e42e:	3d 53       	add	#-1,	r13	;r3 As==11

0000e430 <.LVL65>:
    e430:	07 4c       	mov	r12,	r7	;
    e432:	07 5d       	add	r13,	r7	;
    e434:	05 4c       	mov	r12,	r5	;
    e436:	38 40 08 e0 	mov	#57352,	r8	;#0xe008

0000e43a <.LBB199>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e43a:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e43e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e43e:	74 40 84 00 	mov.b	#132,	r4	;#0x0084

0000e442 <.LBE199>:
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
      i++;
      if ((i & 7) == 0)
    e442:	16 43       	mov	#1,	r6	;r3 As==01
    e444:	06 8c       	sub	r12,	r6	;

0000e446 <.L51>:
cput_hex_block (char *block, int n)
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
    e446:	69 45       	mov.b	@r5,	r9	;

0000e448 <.LBB214>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e448:	0c 49       	mov	r9,	r12	;
    e44a:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e44e <.LBB208>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e44e:	0c 58       	add	r8,	r12	;
    e450:	6c 4c       	mov.b	@r12,	r12	;

0000e452 <.L46>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e452:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e456:	fd 23       	jnz	$-4      	;abs 0xe452

0000e458 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e458:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e45c <.LBB209>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e45c:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e460 <.LVL71>:
    e460:	09 58       	add	r8,	r9	;
    e462:	6c 49       	mov.b	@r9,	r12	;

0000e464 <.L47>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e464:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e468:	fd 23       	jnz	$-4      	;abs 0xe464

0000e46a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e46a:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e46e <.LBE209>:
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
    e46e:	05 97       	cmp	r7,	r5	;
    e470:	17 24       	jz	$+48     	;abs 0xe4a0

0000e472 <.LVL74>:
	break;
      i++;
      if ((i & 7) == 0)
    e472:	0c 46       	mov	r6,	r12	;
    e474:	0c 55       	add	r5,	r12	;
    e476:	3c b0 07 00 	bit	#7,	r12	;
    e47a:	09 20       	jnz	$+20     	;abs 0xe48e

0000e47c <.L49>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e47c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e480:	fd 23       	jnz	$-4      	;abs 0xe47c

0000e482 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e482:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e486:	84 00 
    e488:	15 53       	inc	r5		;

0000e48a <.LVL75>:
    e48a:	30 40 46 e4 	br	#0xe446		;

0000e48e <.L48>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e48e:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e492:	fd 23       	jnz	$-4      	;abs 0xe48e

0000e494 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e494:	f2 40 3a 00 	mov.b	#58,	&0x0084	;#0x003a
    e498:	84 00 
    e49a:	15 53       	inc	r5		;

0000e49c <.LVL77>:
    e49c:	30 40 46 e4 	br	#0xe446		;

0000e4a0 <.L44>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e4a0:	30 40 78 e8 	br	#0xe878		;

0000e4a4 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n)
{
    e4a4:	0a 12       	push	r10		;

0000e4a6 <.LCFI22>:
    e4a6:	09 12       	push	r9		;

0000e4a8 <.LCFI23>:
  int i = 0;
  while (n)
    e4a8:	0d 93       	cmp	#0,	r13	;r3 As==00
    e4aa:	20 24       	jz	$+66     	;abs 0xe4ec
    e4ac:	3d 53       	add	#-1,	r13	;r3 As==11

0000e4ae <.LVL81>:
}

void
cput_nibble_block (char *block, int n)
{
  int i = 0;
    e4ae:	4b 43       	clr.b	r11		;
    e4b0:	39 40 08 e0 	mov	#57352,	r9	;#0xe008

0000e4b4 <.LBB219>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4b4:	7e 40 81 00 	mov.b	#129,	r14	;#0x0081

0000e4b8 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4b8:	7a 40 84 00 	mov.b	#132,	r10	;#0x0084

0000e4bc <.L65>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e4bc:	6f 4c       	mov.b	@r12,	r15	;

0000e4be <.LVL83>:
    e4be:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f

0000e4c2 <.LVL84>:
    e4c2:	0f 59       	add	r9,	r15	;
    e4c4:	6f 4f       	mov.b	@r15,	r15	;

0000e4c6 <.L62>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4c6:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e4ca:	fd 23       	jnz	$-4      	;abs 0xe4c6

0000e4cc <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4cc:	ca 4f 00 00 	mov.b	r15,	0(r10)	;

0000e4d0 <.LBE219>:
{
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
    e4d0:	0b 9d       	cmp	r13,	r11	;
    e4d2:	0c 24       	jz	$+26     	;abs 0xe4ec

0000e4d4 <.Loc.89.1>:
	break;
      i++;
    e4d4:	1b 53       	inc	r11		;

0000e4d6 <.LVL87>:
      if ((i & 7) == 0)
    e4d6:	3b b0 07 00 	bit	#7,	r11	;
    e4da:	f0 23       	jnz	$-30     	;abs 0xe4bc

0000e4dc <.L64>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4dc:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e4e0:	fd 23       	jnz	$-4      	;abs 0xe4dc

0000e4e2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4e2:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e4e6:	84 00 
    e4e8:	30 40 bc e4 	br	#0xe4bc		;

0000e4ec <.L60>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e4ec:	30 40 82 e8 	br	#0xe882		;

0000e4f0 <cput_number>:

void
cput_number (int n)
{
    e4f0:	0a 12       	push	r10		;

0000e4f2 <.LCFI24>:
    e4f2:	09 12       	push	r9		;

0000e4f4 <.LCFI25>:
    e4f4:	08 12       	push	r8		;

0000e4f6 <.LCFI26>:
    e4f6:	07 12       	push	r7		;

0000e4f8 <.LCFI27>:
    e4f8:	06 12       	push	r6		;

0000e4fa <.LCFI28>:
    e4fa:	05 12       	push	r5		;

0000e4fc <.LCFI29>:
    e4fc:	04 12       	push	r4		;

0000e4fe <.LCFI30>:
    e4fe:	31 80 16 00 	sub	#22,	r1	;#0x0016

0000e502 <.LCFI31>:
    e502:	0a 4c       	mov	r12,	r10	;

0000e504 <.LVL90>:
  char buf[20];
  int i = 0;
  if (n < 0)
    e504:	0c 93       	cmp	#0,	r12	;r3 As==00
    e506:	40 38       	jl	$+130    	;abs 0xe588

0000e508 <.Loc.105.1>:
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e508:	7c 40 09 00 	mov.b	#9,	r12	;

0000e50c <.LVL91>:
    e50c:	0c 9a       	cmp	r10,	r12	;
    e50e:	4b 34       	jge	$+152    	;abs 0xe5a6

0000e510 <.L84>:
    e510:	0c 41       	mov	r1,	r12	;
    e512:	2c 53       	incd	r12		;
    e514:	81 4c 00 00 	mov	r12,	0(r1)	;
    e518:	09 4c       	mov	r12,	r9	;
    e51a:	5c 43       	mov.b	#1,	r12	;r3 As==01
    e51c:	0c 89       	sub	r9,	r12	;
    e51e:	04 4c       	mov	r12,	r4	;
    e520:	35 40 36 e8 	mov	#59446,	r5	;#0xe836
    e524:	36 40 ea e7 	mov	#59370,	r6	;#0xe7ea

0000e528 <.Loc.107.1>:
    {
      buf[i++] = (n%10) + '0';
    e528:	78 40 0a 00 	mov.b	#10,	r8	;#0x000a

0000e52c <.L75>:
    e52c:	07 44       	mov	r4,	r7	;
    e52e:	07 59       	add	r9,	r7	;

0000e530 <.LVL93>:
    e530:	0d 48       	mov	r8,	r13	;
    e532:	0c 4a       	mov	r10,	r12	;
    e534:	85 12       	call	r5		;
    e536:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    e53a:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

0000e53e <.Loc.108.1>:
      n /= 10;
    e53e:	0d 48       	mov	r8,	r13	;
    e540:	0c 4a       	mov	r10,	r12	;
    e542:	86 12       	call	r6		;
    e544:	0a 4c       	mov	r12,	r10	;
    e546:	19 53       	inc	r9		;

0000e548 <.Loc.105.1>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e548:	7c 40 09 00 	mov.b	#9,	r12	;
    e54c:	0c 9a       	cmp	r10,	r12	;
    e54e:	ee 3b       	jl	$-34     	;abs 0xe52c
    e550:	0d 47       	mov	r7,	r13	;
    e552:	1d 53       	inc	r13		;

0000e554 <.L74>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e554:	27 51       	add	@r1,	r7	;

0000e556 <.LVL98>:
    e556:	7a 50 30 00 	add.b	#48,	r10	;#0x0030

0000e55a <.LVL99>:
    e55a:	c7 4a 00 00 	mov.b	r10,	0(r7)	;
    e55e:	3d 53       	add	#-1,	r13	;r3 As==11
    e560:	2d 51       	add	@r1,	r13	;
    e562:	0a 41       	mov	r1,	r10	;
    e564:	1a 53       	inc	r10		;

0000e566 <.LBB227>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e566:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e56a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e56a:	7f 40 84 00 	mov.b	#132,	r15	;#0x0084

0000e56e <.L77>:
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    tty_putc (buf[--i]);
    e56e:	6e 4d       	mov.b	@r13,	r14	;

0000e570 <.L76>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e570:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e574:	fd 23       	jnz	$-4      	;abs 0xe570

0000e576 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e576:	cf 4e 00 00 	mov.b	r14,	0(r15)	;
    e57a:	3d 53       	add	#-1,	r13	;r3 As==11

0000e57c <.LBE230>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e57c:	0a 9d       	cmp	r13,	r10	;
    e57e:	f7 23       	jnz	$-16     	;abs 0xe56e

0000e580 <.Loc.113.1>:
    tty_putc (buf[--i]);
}
    e580:	31 50 16 00 	add	#22,	r1	;#0x0016
    e584:	30 40 78 e8 	br	#0xe878		;

0000e588 <.L83>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e588:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e58c <.L73>:
    e58c:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e590:	fd 23       	jnz	$-4      	;abs 0xe58c

0000e592 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e592:	f2 40 2d 00 	mov.b	#45,	&0x0084	;#0x002d
    e596:	84 00 

0000e598 <.LBE231>:
  char buf[20];
  int i = 0;
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    e598:	4c 43       	clr.b	r12		;
    e59a:	0c 8a       	sub	r10,	r12	;
    e59c:	0a 4c       	mov	r12,	r10	;

0000e59e <.Loc.105.1>:
    }
  while (n > 9)
    e59e:	7c 40 09 00 	mov.b	#9,	r12	;
    e5a2:	0c 9a       	cmp	r10,	r12	;
    e5a4:	b5 3b       	jl	$-148    	;abs 0xe510

0000e5a6 <.L78>:
    e5a6:	5d 43       	mov.b	#1,	r13	;r3 As==01
    e5a8:	47 43       	clr.b	r7		;
    e5aa:	0c 41       	mov	r1,	r12	;
    e5ac:	2c 53       	incd	r12		;
    e5ae:	81 4c 00 00 	mov	r12,	0(r1)	;
    e5b2:	30 40 54 e5 	br	#0xe554		;

0000e5b6 <cprintf>:
    tty_putc (buf[--i]);
}

void
cprintf (const char *fmt, ...)
{
    e5b6:	0a 12       	push	r10		;

0000e5b8 <.LCFI32>:
    e5b8:	09 12       	push	r9		;

0000e5ba <.LCFI33>:
    e5ba:	08 12       	push	r8		;

0000e5bc <.LCFI34>:
    e5bc:	07 12       	push	r7		;

0000e5be <.LCFI35>:
    e5be:	06 12       	push	r6		;

0000e5c0 <.LCFI36>:
    e5c0:	05 12       	push	r5		;

0000e5c2 <.LCFI37>:
    e5c2:	04 12       	push	r4		;

0000e5c4 <.LCFI38>:
    e5c4:	19 41 10 00 	mov	16(r1),	r9	;0x00010

0000e5c8 <.Loc.122.1>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e5c8:	08 41       	mov	r1,	r8	;
    e5ca:	38 50 12 00 	add	#18,	r8	;#0x0012

0000e5ce <.LVL106>:

  while (*fmt)
    e5ce:	6c 49       	mov.b	@r9,	r12	;
    e5d0:	0c 93       	cmp	#0,	r12	;r3 As==00
    e5d2:	2c 24       	jz	$+90     	;abs 0xe62c

0000e5d4 <.LBB233>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e5d4:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e5d8 <.L110>:
    e5d8:	04 49       	mov	r9,	r4	;
    e5da:	14 53       	inc	r4		;

0000e5dc <.LBE233>:

  va_start (v, fmt);

  while (*fmt)
    {
      if (*fmt != '%')
    e5dc:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e5e0:	29 20       	jnz	$+84     	;abs 0xe634

0000e5e2 <.LVL108>:
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e5e2:	5d 49 01 00 	mov.b	1(r9),	r13	;
    e5e6:	29 53       	incd	r9		;
    e5e8:	7d 90 64 00 	cmp.b	#100,	r13	;#0x0064
    e5ec:	d4 24       	jz	$+426    	;abs 0xe796
    e5ee:	7e 40 64 00 	mov.b	#100,	r14	;#0x0064
    e5f2:	4e 9d       	cmp.b	r13,	r14	;
    e5f4:	2f 2c       	jc	$+96     	;abs 0xe654
    e5f6:	7d 90 73 00 	cmp.b	#115,	r13	;#0x0073
    e5fa:	c2 24       	jz	$+390    	;abs 0xe780
    e5fc:	7e 40 73 00 	mov.b	#115,	r14	;#0x0073
    e600:	4e 9d       	cmp.b	r13,	r14	;
    e602:	42 28       	jnc	$+134    	;abs 0xe688
    e604:	7d 90 6c 00 	cmp.b	#108,	r13	;#0x006c
    e608:	51 24       	jz	$+164    	;abs 0xe6ac
    e60a:	7d 90 6e 00 	cmp.b	#110,	r13	;#0x006e
    e60e:	1a 20       	jnz	$+54     	;abs 0xe644

0000e610 <.Loc.164.1>:
	    s = va_arg (v, char *);
	    i = va_arg (v, int);
	    cput_hex_block (s, i);
	    break;
	  case 'n':
	    s = va_arg (v, char *);
    e610:	2c 48       	mov	@r8,	r12	;

0000e612 <.Loc.165.1>:
	    i = va_arg (v, int);
    e612:	38 50 03 00 	add	#3,	r8	;

0000e616 <.LVL109>:
    e616:	0d 48       	mov	r8,	r13	;
    e618:	1d c3       	bic	#1,	r13	;r3 As==01
    e61a:	08 4d       	mov	r13,	r8	;

0000e61c <.LVL110>:
    e61c:	28 53       	incd	r8		;

0000e61e <.LVL111>:
	    cput_nibble_block (s, i);
    e61e:	2d 4d       	mov	@r13,	r13	;
    e620:	b0 12 a4 e4 	call	#58532		;#0xe4a4

0000e624 <.LVL112>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e624:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e628:	0c 93       	cmp	#0,	r12	;r3 As==00
    e62a:	d6 23       	jnz	$-82     	;abs 0xe5d8

0000e62c <.L85>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e62c:	30 40 78 e8 	br	#0xe878		;
    e630:	30 40 aa e7 	br	#0xe7aa		;

0000e634 <.L88>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e634:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e638:	fd 23       	jnz	$-4      	;abs 0xe634

0000e63a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e63a:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e63e:	0c 44       	mov	r4,	r12	;
    e640:	04 49       	mov	r9,	r4	;
    e642:	09 4c       	mov	r12,	r9	;

0000e644 <.L89>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e644:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e648:	0c 93       	cmp	#0,	r12	;r3 As==00
    e64a:	c6 23       	jnz	$-114    	;abs 0xe5d8

0000e64c <.Loc.175.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e64c:	30 40 78 e8 	br	#0xe878		;
    e650:	30 40 aa e7 	br	#0xe7aa		;

0000e654 <.L130>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e654:	7d 90 42 00 	cmp.b	#66,	r13	;#0x0042
    e658:	6c 24       	jz	$+218    	;abs 0xe732
    e65a:	7e 40 42 00 	mov.b	#66,	r14	;#0x0042
    e65e:	4e 9d       	cmp.b	r13,	r14	;
    e660:	5d 2c       	jc	$+188    	;abs 0xe71c
    e662:	7d 90 62 00 	cmp.b	#98,	r13	;#0x0062
    e666:	3a 24       	jz	$+118    	;abs 0xe6dc
    e668:	7d 90 63 00 	cmp.b	#99,	r13	;#0x0063
    e66c:	eb 23       	jnz	$-40     	;abs 0xe644

0000e66e <.Loc.135.1>:
	  {
	  case '%':
	    tty_putc ('%');
	    break;
	  case 'c':
	    i = va_arg (v, int);
    e66e:	18 53       	inc	r8		;

0000e670 <.LVL117>:
    e670:	0c 48       	mov	r8,	r12	;
    e672:	1c c3       	bic	#1,	r12	;r3 As==01
    e674:	08 4c       	mov	r12,	r8	;

0000e676 <.LVL118>:
    e676:	28 53       	incd	r8		;

0000e678 <.LVL119>:
    e678:	2c 4c       	mov	@r12,	r12	;

0000e67a <.L103>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e67a:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e67e:	fd 23       	jnz	$-4      	;abs 0xe67a

0000e680 <.L126>:

  // Write the output character
  UART_TXD = txdata;
    e680:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e684:	30 40 44 e6 	br	#0xe644		;

0000e688 <.L98>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e688:	7d 90 77 00 	cmp.b	#119,	r13	;#0x0077
    e68c:	1d 24       	jz	$+60     	;abs 0xe6c8
    e68e:	7d 90 78 00 	cmp.b	#120,	r13	;#0x0078
    e692:	d8 23       	jnz	$-78     	;abs 0xe644

0000e694 <.Loc.159.1>:
	  case 'l':
	    i = va_arg (v, int);
	    cput_hex_long (i);
	    break;
	  case 'x':
	    s = va_arg (v, char *);
    e694:	2c 48       	mov	@r8,	r12	;

0000e696 <.Loc.160.1>:
	    i = va_arg (v, int);
    e696:	38 50 03 00 	add	#3,	r8	;

0000e69a <.LVL122>:
    e69a:	0d 48       	mov	r8,	r13	;
    e69c:	1d c3       	bic	#1,	r13	;r3 As==01
    e69e:	08 4d       	mov	r13,	r8	;

0000e6a0 <.LVL123>:
    e6a0:	28 53       	incd	r8		;

0000e6a2 <.LVL124>:
	    cput_hex_block (s, i);
    e6a2:	2d 4d       	mov	@r13,	r13	;
    e6a4:	b0 12 1c e4 	call	#58396		;#0xe41c

0000e6a8 <.LVL125>:
	    break;
    e6a8:	30 40 44 e6 	br	#0xe644		;

0000e6ac <.L99>:
	  case 'w':
	    i = va_arg (v, int);
	    cput_hex_word (i);
	    break;
	  case 'l':
	    i = va_arg (v, int);
    e6ac:	18 53       	inc	r8		;

0000e6ae <.LVL126>:
    e6ae:	0c 48       	mov	r8,	r12	;
    e6b0:	1c c3       	bic	#1,	r12	;r3 As==01
    e6b2:	08 4c       	mov	r12,	r8	;

0000e6b4 <.LVL127>:
    e6b4:	28 53       	incd	r8		;

0000e6b6 <.LVL128>:
	    cput_hex_long (i);
    e6b6:	2c 4c       	mov	@r12,	r12	;
    e6b8:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e6bc:	0d 7d       	subc	r13,	r13	;
    e6be:	3d e3       	inv	r13		;
    e6c0:	b0 12 24 e3 	call	#58148		;#0xe324

0000e6c4 <.LVL129>:
	    break;
    e6c4:	30 40 44 e6 	br	#0xe644		;

0000e6c8 <.L101>:
	  case 'B':
	    i = va_arg (v, int);
	    cput_binary_byte (i);
	    break;
	  case 'w':
	    i = va_arg (v, int);
    e6c8:	18 53       	inc	r8		;

0000e6ca <.LVL130>:
    e6ca:	0c 48       	mov	r8,	r12	;
    e6cc:	1c c3       	bic	#1,	r12	;r3 As==01
    e6ce:	08 4c       	mov	r12,	r8	;

0000e6d0 <.LVL131>:
    e6d0:	28 53       	incd	r8		;

0000e6d2 <.LVL132>:
	    cput_hex_word (i);
    e6d2:	2c 4c       	mov	@r12,	r12	;
    e6d4:	b0 12 ae e2 	call	#58030		;#0xe2ae

0000e6d8 <.LVL133>:
	    break;
    e6d8:	30 40 44 e6 	br	#0xe644		;

0000e6dc <.L95>:
	  case 'd':
	    i = va_arg (v, int);
	    cput_number(i);
	    break;
	  case 'b':
	    i = va_arg (v, int);
    e6dc:	18 53       	inc	r8		;

0000e6de <.LVL134>:
    e6de:	0c 48       	mov	r8,	r12	;
    e6e0:	1c c3       	bic	#1,	r12	;r3 As==01
    e6e2:	08 4c       	mov	r12,	r8	;

0000e6e4 <.LVL135>:
    e6e4:	28 53       	incd	r8		;

0000e6e6 <.LVL136>:
    e6e6:	26 4c       	mov	@r12,	r6	;

0000e6e8 <.LBB242>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e6e8:	37 40 08 e0 	mov	#57352,	r7	;#0xe008

0000e6ec <.LBE244>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e6ec:	0c 46       	mov	r6,	r12	;
    e6ee:	b0 12 9e e8 	call	#59550		;#0xe89e

0000e6f2 <.LBB249>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e6f2:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e6f6:	0c 57       	add	r7,	r12	;
    e6f8:	6c 4c       	mov.b	@r12,	r12	;

0000e6fa <.L104>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e6fa:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e6fe:	fd 23       	jnz	$-4      	;abs 0xe6fa

0000e700 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e700:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e704 <.LBB250>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e704:	76 f0 0f 00 	and.b	#15,	r6	;#0x000f
    e708:	07 56       	add	r6,	r7	;
    e70a:	6c 47       	mov.b	@r7,	r12	;

0000e70c <.L105>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e70c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e710:	b7 27       	jz	$-144    	;abs 0xe680
    e712:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e716:	fa 23       	jnz	$-10     	;abs 0xe70c
    e718:	30 40 80 e6 	br	#0xe680		;

0000e71c <.L132>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e71c:	7d 90 25 00 	cmp.b	#37,	r13	;#0x0025
    e720:	91 23       	jnz	$-220    	;abs 0xe644

0000e722 <.L94>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e722:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e726:	fd 23       	jnz	$-4      	;abs 0xe722

0000e728 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e728:	f2 40 25 00 	mov.b	#37,	&0x0084	;#0x0025
    e72c:	84 00 
    e72e:	30 40 44 e6 	br	#0xe644		;

0000e732 <.L92>:
	  case 'b':
	    i = va_arg (v, int);
	    cput_hex_byte (i);
	    break;
	  case 'B':
	    i = va_arg (v, int);
    e732:	18 53       	inc	r8		;

0000e734 <.LVL143>:
    e734:	0c 48       	mov	r8,	r12	;
    e736:	1c c3       	bic	#1,	r12	;r3 As==01
    e738:	08 4c       	mov	r12,	r8	;

0000e73a <.LVL144>:
    e73a:	28 53       	incd	r8		;

0000e73c <.LVL145>:
    e73c:	26 4c       	mov	@r12,	r6	;

0000e73e <.LBB256>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e73e:	75 40 07 00 	mov.b	#7,	r5	;

0000e742 <.LBB258>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);

  // Write the output character
  UART_TXD = txdata;
    e742:	77 40 84 00 	mov.b	#132,	r7	;#0x0084

0000e746 <.LBE258>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e746:	0c 46       	mov	r6,	r12	;
    e748:	0d 45       	mov	r5,	r13	;
    e74a:	b0 12 ac e8 	call	#59564		;#0xe8ac
    e74e:	1c b3       	bit	#1,	r12	;r3 As==01
    e750:	10 24       	jz	$+34     	;abs 0xe772

0000e752 <.L133>:
    e752:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031

0000e756 <.L107>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e756:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e75a:	fd 23       	jnz	$-4      	;abs 0xe756

0000e75c <.L134>:

  // Write the output character
  UART_TXD = txdata;
    e75c:	c7 4c 00 00 	mov.b	r12,	0(r7)	;

0000e760 <.LBE262>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e760:	35 53       	add	#-1,	r5	;r3 As==11
    e762:	35 93       	cmp	#-1,	r5	;r3 As==11
    e764:	6f 27       	jz	$-288    	;abs 0xe644

0000e766 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e766:	0c 46       	mov	r6,	r12	;
    e768:	0d 45       	mov	r5,	r13	;
    e76a:	b0 12 ac e8 	call	#59564		;#0xe8ac
    e76e:	1c b3       	bit	#1,	r12	;r3 As==01
    e770:	f0 23       	jnz	$-30     	;abs 0xe752

0000e772 <.L111>:
    e772:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e776 <.LBB263>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e776:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e77a:	ed 23       	jnz	$-36     	;abs 0xe756
    e77c:	30 40 5c e7 	br	#0xe75c		;

0000e780 <.L97>:
	    i = va_arg (v, int);
	    cput_nibble_block (s, i);
	    break;
	  case 's':
	    s = va_arg (v, char *);
	    tty_putc (s[0]);
    e780:	2c 48       	mov	@r8,	r12	;
    e782:	28 53       	incd	r8		;

0000e784 <.LVL152>:
    e784:	6c 4c       	mov.b	@r12,	r12	;

0000e786 <.L109>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e786:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e78a:	7a 27       	jz	$-266    	;abs 0xe680
    e78c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e790:	fa 23       	jnz	$-10     	;abs 0xe786
    e792:	30 40 80 e6 	br	#0xe680		;

0000e796 <.L90>:
	  case 'c':
	    i = va_arg (v, int);
	    tty_putc(i);
	    break;
	  case 'd':
	    i = va_arg (v, int);
    e796:	18 53       	inc	r8		;

0000e798 <.LVL155>:
    e798:	0c 48       	mov	r8,	r12	;
    e79a:	1c c3       	bic	#1,	r12	;r3 As==01
    e79c:	08 4c       	mov	r12,	r8	;

0000e79e <.LVL156>:
    e79e:	28 53       	incd	r8		;

0000e7a0 <.LVL157>:
	    cput_number(i);
    e7a0:	2c 4c       	mov	@r12,	r12	;
    e7a2:	b0 12 f0 e4 	call	#58608		;#0xe4f0

0000e7a6 <.LVL158>:
	    break;
    e7a6:	30 40 44 e6 	br	#0xe644		;

0000e7aa <udivmodhi4>:
    e7aa:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e7ae <.Loc.35.1>:
    e7ae:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e7b0 <.L2>:
    e7b0:	0d 9c       	cmp	r12,	r13	;
    e7b2:	08 28       	jnc	$+18     	;abs 0xe7c4

0000e7b4 <.L15>:
    e7b4:	4f 43       	clr.b	r15		;

0000e7b6 <.L4>:
    e7b6:	0b 93       	cmp	#0,	r11	;r3 As==00
    e7b8:	0e 20       	jnz	$+30     	;abs 0xe7d6

0000e7ba <.L5>:
    e7ba:	0e 93       	cmp	#0,	r14	;r3 As==00
    e7bc:	01 24       	jz	$+4      	;abs 0xe7c0
    e7be:	0f 4c       	mov	r12,	r15	;

0000e7c0 <.L1>:
    e7c0:	0c 4f       	mov	r15,	r12	;
    e7c2:	30 41       	ret			

0000e7c4 <.L3>:
    e7c4:	3f 53       	add	#-1,	r15	;r3 As==11

0000e7c6 <.Loc.38.1>:
    e7c6:	0f 93       	cmp	#0,	r15	;r3 As==00
    e7c8:	f8 27       	jz	$-14     	;abs 0xe7ba

0000e7ca <.Loc.38.1>:
    e7ca:	0d 93       	cmp	#0,	r13	;r3 As==00
    e7cc:	f3 3b       	jl	$-24     	;abs 0xe7b4

0000e7ce <.Loc.40.1>:
    e7ce:	0d 5d       	rla	r13		;

0000e7d0 <.Loc.41.1>:
    e7d0:	0b 5b       	rla	r11		;
    e7d2:	30 40 b0 e7 	br	#0xe7b0		;

0000e7d6 <.L9>:
    e7d6:	0c 9d       	cmp	r13,	r12	;
    e7d8:	02 28       	jnc	$+6      	;abs 0xe7de

0000e7da <.Loc.47.1>:
    e7da:	0c 8d       	sub	r13,	r12	;

0000e7dc <.Loc.48.1>:
    e7dc:	0f db       	bis	r11,	r15	;

0000e7de <.L8>:
    e7de:	12 c3       	clrc			
    e7e0:	0b 10       	rrc	r11		;

0000e7e2 <.Loc.51.1>:
    e7e2:	12 c3       	clrc			
    e7e4:	0d 10       	rrc	r13		;
    e7e6:	30 40 b6 e7 	br	#0xe7b6		;

0000e7ea <__mspabi_divi>:
    e7ea:	0a 12       	push	r10		;

0000e7ec <.LCFI0>:
    e7ec:	0f 4c       	mov	r12,	r15	;
    e7ee:	0e 4d       	mov	r13,	r14	;

0000e7f0 <.LVL14>:
    e7f0:	3b 40 aa e7 	mov	#59306,	r11	;#0xe7aa

0000e7f4 <.Loc.64.1>:
    e7f4:	0c 93       	cmp	#0,	r12	;r3 As==00
    e7f6:	1a 34       	jge	$+54     	;abs 0xe82c

0000e7f8 <.Loc.66.1>:
    e7f8:	4c 43       	clr.b	r12		;

0000e7fa <.LVL15>:
    e7fa:	0c 8f       	sub	r15,	r12	;
    e7fc:	0f 4c       	mov	r12,	r15	;

0000e7fe <.LVL16>:
    e7fe:	0d 93       	cmp	#0,	r13	;r3 As==00
    e800:	0d 34       	jge	$+28     	;abs 0xe81c

0000e802 <.Loc.67.1>:
    e802:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e804 <.L21>:
    e804:	0d 43       	clr	r13		;
    e806:	0d 8e       	sub	r14,	r13	;

0000e808 <.LVL18>:
    e808:	4e 43       	clr.b	r14		;

0000e80a <.LVL19>:
    e80a:	0c 4f       	mov	r15,	r12	;

0000e80c <.LVL20>:
    e80c:	8b 12       	call	r11		;

0000e80e <.LVL21>:
    e80e:	1a 93       	cmp	#1,	r10	;r3 As==01
    e810:	03 24       	jz	$+8      	;abs 0xe818

0000e812 <.L20>:
    e812:	4d 43       	clr.b	r13		;
    e814:	0d 8c       	sub	r12,	r13	;
    e816:	0c 4d       	mov	r13,	r12	;

0000e818 <.L16>:
    e818:	3a 41       	pop	r10		;
    e81a:	30 41       	ret			

0000e81c <.L18>:
    e81c:	4e 43       	clr.b	r14		;
    e81e:	8b 12       	call	r11		;

0000e820 <.LVL25>:
    e820:	30 40 12 e8 	br	#0xe812		;

0000e824 <.L27>:
    e824:	4e 43       	clr.b	r14		;
    e826:	8b 12       	call	r11		;

0000e828 <.LVL27>:
    e828:	30 40 18 e8 	br	#0xe818		;

0000e82c <.L17>:
    e82c:	0d 93       	cmp	#0,	r13	;r3 As==00
    e82e:	fa 37       	jge	$-10     	;abs 0xe824

0000e830 <.Loc.61.1>:
    e830:	4a 43       	clr.b	r10		;
    e832:	30 40 04 e8 	br	#0xe804		;

0000e836 <__mspabi_remi>:
    e836:	0a 12       	push	r10		;

0000e838 <.LCFI1>:
    e838:	0c 93       	cmp	#0,	r12	;r3 As==00
    e83a:	13 34       	jge	$+40     	;abs 0xe862

0000e83c <.Loc.92.1>:
    e83c:	4e 43       	clr.b	r14		;
    e83e:	0e 8c       	sub	r12,	r14	;
    e840:	0c 4e       	mov	r14,	r12	;

0000e842 <.LVL31>:
    e842:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e844 <.L29>:
    e844:	0d 93       	cmp	#0,	r13	;r3 As==00
    e846:	03 34       	jge	$+8      	;abs 0xe84e
    e848:	4e 43       	clr.b	r14		;
    e84a:	0e 8d       	sub	r13,	r14	;
    e84c:	0d 4e       	mov	r14,	r13	;

0000e84e <.L30>:
    e84e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e850:	b0 12 aa e7 	call	#59306		;#0xe7aa

0000e854 <.LVL34>:
    e854:	0a 93       	cmp	#0,	r10	;r3 As==00
    e856:	03 24       	jz	$+8      	;abs 0xe85e

0000e858 <.LVL35>:
    e858:	4d 43       	clr.b	r13		;
    e85a:	0d 8c       	sub	r12,	r13	;
    e85c:	0c 4d       	mov	r13,	r12	;

0000e85e <.L28>:
    e85e:	3a 41       	pop	r10		;
    e860:	30 41       	ret			

0000e862 <.L32>:
    e862:	4a 43       	clr.b	r10		;
    e864:	30 40 44 e8 	br	#0xe844		;

0000e868 <__mspabi_divu>:
    e868:	4e 43       	clr.b	r14		;
    e86a:	b0 12 aa e7 	call	#59306		;#0xe7aa

0000e86e <.LVL39>:
    e86e:	30 41       	ret			

0000e870 <__mspabi_remu>:
    e870:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e872:	b0 12 aa e7 	call	#59306		;#0xe7aa

0000e876 <.LVL41>:
    e876:	30 41       	ret			

0000e878 <__mspabi_func_epilog_7>:
    e878:	34 41       	pop	r4		;

0000e87a <__mspabi_func_epilog_6>:
    e87a:	35 41       	pop	r5		;

0000e87c <__mspabi_func_epilog_5>:
    e87c:	36 41       	pop	r6		;

0000e87e <__mspabi_func_epilog_4>:
    e87e:	37 41       	pop	r7		;

0000e880 <__mspabi_func_epilog_3>:
    e880:	38 41       	pop	r8		;

0000e882 <__mspabi_func_epilog_2>:
    e882:	39 41       	pop	r9		;

0000e884 <__mspabi_func_epilog_1>:
    e884:	3a 41       	pop	r10		;
    e886:	30 41       	ret			

0000e888 <__mspabi_srai_15>:
    e888:	0c 11       	rra	r12		;

0000e88a <__mspabi_srai_14>:
    e88a:	0c 11       	rra	r12		;

0000e88c <__mspabi_srai_13>:
    e88c:	0c 11       	rra	r12		;

0000e88e <__mspabi_srai_12>:
    e88e:	0c 11       	rra	r12		;

0000e890 <__mspabi_srai_11>:
    e890:	0c 11       	rra	r12		;

0000e892 <__mspabi_srai_10>:
    e892:	0c 11       	rra	r12		;

0000e894 <__mspabi_srai_9>:
    e894:	0c 11       	rra	r12		;

0000e896 <__mspabi_srai_8>:
    e896:	0c 11       	rra	r12		;

0000e898 <__mspabi_srai_7>:
    e898:	0c 11       	rra	r12		;

0000e89a <__mspabi_srai_6>:
    e89a:	0c 11       	rra	r12		;

0000e89c <__mspabi_srai_5>:
    e89c:	0c 11       	rra	r12		;

0000e89e <__mspabi_srai_4>:
    e89e:	0c 11       	rra	r12		;

0000e8a0 <__mspabi_srai_3>:
    e8a0:	0c 11       	rra	r12		;

0000e8a2 <__mspabi_srai_2>:
    e8a2:	0c 11       	rra	r12		;

0000e8a4 <__mspabi_srai_1>:
    e8a4:	0c 11       	rra	r12		;
    e8a6:	30 41       	ret			

0000e8a8 <.L11>:
    e8a8:	3d 53       	add	#-1,	r13	;r3 As==11
    e8aa:	0c 11       	rra	r12		;

0000e8ac <__mspabi_srai>:
    e8ac:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8ae:	fc 23       	jnz	$-6      	;abs 0xe8a8
    e8b0:	30 41       	ret			

0000e8b2 <__mspabi_sral_15>:
    e8b2:	0d 11       	rra	r13		;
    e8b4:	0c 10       	rrc	r12		;

0000e8b6 <__mspabi_sral_14>:
    e8b6:	0d 11       	rra	r13		;
    e8b8:	0c 10       	rrc	r12		;

0000e8ba <__mspabi_sral_13>:
    e8ba:	0d 11       	rra	r13		;
    e8bc:	0c 10       	rrc	r12		;

0000e8be <__mspabi_sral_12>:
    e8be:	0d 11       	rra	r13		;
    e8c0:	0c 10       	rrc	r12		;

0000e8c2 <__mspabi_sral_11>:
    e8c2:	0d 11       	rra	r13		;
    e8c4:	0c 10       	rrc	r12		;

0000e8c6 <__mspabi_sral_10>:
    e8c6:	0d 11       	rra	r13		;
    e8c8:	0c 10       	rrc	r12		;

0000e8ca <__mspabi_sral_9>:
    e8ca:	0d 11       	rra	r13		;
    e8cc:	0c 10       	rrc	r12		;

0000e8ce <__mspabi_sral_8>:
    e8ce:	0d 11       	rra	r13		;
    e8d0:	0c 10       	rrc	r12		;

0000e8d2 <__mspabi_sral_7>:
    e8d2:	0d 11       	rra	r13		;
    e8d4:	0c 10       	rrc	r12		;

0000e8d6 <__mspabi_sral_6>:
    e8d6:	0d 11       	rra	r13		;
    e8d8:	0c 10       	rrc	r12		;

0000e8da <__mspabi_sral_5>:
    e8da:	0d 11       	rra	r13		;
    e8dc:	0c 10       	rrc	r12		;

0000e8de <__mspabi_sral_4>:
    e8de:	0d 11       	rra	r13		;
    e8e0:	0c 10       	rrc	r12		;

0000e8e2 <__mspabi_sral_3>:
    e8e2:	0d 11       	rra	r13		;
    e8e4:	0c 10       	rrc	r12		;

0000e8e6 <__mspabi_sral_2>:
    e8e6:	0d 11       	rra	r13		;
    e8e8:	0c 10       	rrc	r12		;

0000e8ea <__mspabi_sral_1>:
    e8ea:	0d 11       	rra	r13		;
    e8ec:	0c 10       	rrc	r12		;
    e8ee:	30 41       	ret			

0000e8f0 <.L12>:
    e8f0:	3e 53       	add	#-1,	r14	;r3 As==11
    e8f2:	0d 11       	rra	r13		;
    e8f4:	0c 10       	rrc	r12		;

0000e8f6 <__mspabi_sral>:
    e8f6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e8f8:	fb 23       	jnz	$-8      	;abs 0xe8f0
    e8fa:	30 41       	ret			

0000e8fc <__mspabi_srli_15>:
    e8fc:	12 c3       	clrc			
    e8fe:	0c 10       	rrc	r12		;

0000e900 <__mspabi_srli_14>:
    e900:	12 c3       	clrc			
    e902:	0c 10       	rrc	r12		;

0000e904 <__mspabi_srli_13>:
    e904:	12 c3       	clrc			
    e906:	0c 10       	rrc	r12		;

0000e908 <__mspabi_srli_12>:
    e908:	12 c3       	clrc			
    e90a:	0c 10       	rrc	r12		;

0000e90c <__mspabi_srli_11>:
    e90c:	12 c3       	clrc			
    e90e:	0c 10       	rrc	r12		;

0000e910 <__mspabi_srli_10>:
    e910:	12 c3       	clrc			
    e912:	0c 10       	rrc	r12		;

0000e914 <__mspabi_srli_9>:
    e914:	12 c3       	clrc			
    e916:	0c 10       	rrc	r12		;

0000e918 <__mspabi_srli_8>:
    e918:	12 c3       	clrc			
    e91a:	0c 10       	rrc	r12		;

0000e91c <__mspabi_srli_7>:
    e91c:	12 c3       	clrc			
    e91e:	0c 10       	rrc	r12		;

0000e920 <__mspabi_srli_6>:
    e920:	12 c3       	clrc			
    e922:	0c 10       	rrc	r12		;

0000e924 <__mspabi_srli_5>:
    e924:	12 c3       	clrc			
    e926:	0c 10       	rrc	r12		;

0000e928 <__mspabi_srli_4>:
    e928:	12 c3       	clrc			
    e92a:	0c 10       	rrc	r12		;

0000e92c <__mspabi_srli_3>:
    e92c:	12 c3       	clrc			
    e92e:	0c 10       	rrc	r12		;

0000e930 <__mspabi_srli_2>:
    e930:	12 c3       	clrc			
    e932:	0c 10       	rrc	r12		;

0000e934 <__mspabi_srli_1>:
    e934:	12 c3       	clrc			
    e936:	0c 10       	rrc	r12		;
    e938:	30 41       	ret			

0000e93a <.L11>:
    e93a:	3d 53       	add	#-1,	r13	;r3 As==11
    e93c:	12 c3       	clrc			
    e93e:	0c 10       	rrc	r12		;

0000e940 <__mspabi_srli>:
    e940:	0d 93       	cmp	#0,	r13	;r3 As==00
    e942:	fb 23       	jnz	$-8      	;abs 0xe93a
    e944:	30 41       	ret			

0000e946 <__mspabi_srll_15>:
    e946:	12 c3       	clrc			
    e948:	0d 10       	rrc	r13		;
    e94a:	0c 10       	rrc	r12		;

0000e94c <__mspabi_srll_14>:
    e94c:	12 c3       	clrc			
    e94e:	0d 10       	rrc	r13		;
    e950:	0c 10       	rrc	r12		;

0000e952 <__mspabi_srll_13>:
    e952:	12 c3       	clrc			
    e954:	0d 10       	rrc	r13		;
    e956:	0c 10       	rrc	r12		;

0000e958 <__mspabi_srll_12>:
    e958:	12 c3       	clrc			
    e95a:	0d 10       	rrc	r13		;
    e95c:	0c 10       	rrc	r12		;

0000e95e <__mspabi_srll_11>:
    e95e:	12 c3       	clrc			
    e960:	0d 10       	rrc	r13		;
    e962:	0c 10       	rrc	r12		;

0000e964 <__mspabi_srll_10>:
    e964:	12 c3       	clrc			
    e966:	0d 10       	rrc	r13		;
    e968:	0c 10       	rrc	r12		;

0000e96a <__mspabi_srll_9>:
    e96a:	12 c3       	clrc			
    e96c:	0d 10       	rrc	r13		;
    e96e:	0c 10       	rrc	r12		;

0000e970 <__mspabi_srll_8>:
    e970:	12 c3       	clrc			
    e972:	0d 10       	rrc	r13		;
    e974:	0c 10       	rrc	r12		;

0000e976 <__mspabi_srll_7>:
    e976:	12 c3       	clrc			
    e978:	0d 10       	rrc	r13		;
    e97a:	0c 10       	rrc	r12		;

0000e97c <__mspabi_srll_6>:
    e97c:	12 c3       	clrc			
    e97e:	0d 10       	rrc	r13		;
    e980:	0c 10       	rrc	r12		;

0000e982 <__mspabi_srll_5>:
    e982:	12 c3       	clrc			
    e984:	0d 10       	rrc	r13		;
    e986:	0c 10       	rrc	r12		;

0000e988 <__mspabi_srll_4>:
    e988:	12 c3       	clrc			
    e98a:	0d 10       	rrc	r13		;
    e98c:	0c 10       	rrc	r12		;

0000e98e <__mspabi_srll_3>:
    e98e:	12 c3       	clrc			
    e990:	0d 10       	rrc	r13		;
    e992:	0c 10       	rrc	r12		;

0000e994 <__mspabi_srll_2>:
    e994:	12 c3       	clrc			
    e996:	0d 10       	rrc	r13		;
    e998:	0c 10       	rrc	r12		;

0000e99a <__mspabi_srll_1>:
    e99a:	12 c3       	clrc			
    e99c:	0d 10       	rrc	r13		;
    e99e:	0c 10       	rrc	r12		;
    e9a0:	30 41       	ret			

0000e9a2 <.L12>:
    e9a2:	3e 53       	add	#-1,	r14	;r3 As==11
    e9a4:	12 c3       	clrc			
    e9a6:	0d 10       	rrc	r13		;
    e9a8:	0c 10       	rrc	r12		;

0000e9aa <__mspabi_srll>:
    e9aa:	0e 93       	cmp	#0,	r14	;r3 As==00
    e9ac:	fa 23       	jnz	$-10     	;abs 0xe9a2
    e9ae:	30 41       	ret			

0000e9b0 <memmove>:
    e9b0:	0d 9c       	cmp	r12,	r13	;
    e9b2:	0a 28       	jnc	$+22     	;abs 0xe9c8

0000e9b4 <.L5>:
    e9b4:	0f 4c       	mov	r12,	r15	;
    e9b6:	0e 5c       	add	r12,	r14	;

0000e9b8 <.L3>:
    e9b8:	0e 9f       	cmp	r15,	r14	;
    e9ba:	0d 24       	jz	$+28     	;abs 0xe9d6

0000e9bc <.LVL3>:
    e9bc:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    e9c0:	1f 53       	inc	r15		;

0000e9c2 <.LVL4>:
    e9c2:	1d 53       	inc	r13		;
    e9c4:	30 40 b8 e9 	br	#0xe9b8		;

0000e9c8 <.L2>:
    e9c8:	0f 4d       	mov	r13,	r15	;
    e9ca:	0f 5e       	add	r14,	r15	;
    e9cc:	0c 9f       	cmp	r15,	r12	;
    e9ce:	f2 2f       	jc	$-26     	;abs 0xe9b4

0000e9d0 <.L4>:
    e9d0:	3e 53       	add	#-1,	r14	;r3 As==11

0000e9d2 <.LVL7>:
    e9d2:	3e 93       	cmp	#-1,	r14	;r3 As==11
    e9d4:	01 20       	jnz	$+4      	;abs 0xe9d8

0000e9d6 <.L10>:
    e9d6:	30 41       	ret			

0000e9d8 <.L6>:
    e9d8:	0b 4c       	mov	r12,	r11	;
    e9da:	0b 5e       	add	r14,	r11	;
    e9dc:	0f 4d       	mov	r13,	r15	;
    e9de:	0f 5e       	add	r14,	r15	;
    e9e0:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    e9e4:	30 40 d0 e9 	br	#0xe9d0		;

0000e9e8 <memset>:
    e9e8:	0f 4c       	mov	r12,	r15	;
    e9ea:	0e 5c       	add	r12,	r14	;

0000e9ec <.L2>:
    e9ec:	0f 9e       	cmp	r14,	r15	;
    e9ee:	01 20       	jnz	$+4      	;abs 0xe9f2

0000e9f0 <.Loc.104.1>:
    e9f0:	30 41       	ret			

0000e9f2 <.L3>:
    e9f2:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    e9f6:	1f 53       	inc	r15		;

0000e9f8 <.LVL4>:
    e9f8:	30 40 ec e9 	br	#0xe9ec		;

0000e9fc <L0>:
    e9fc:	30 41       	ret			

0000e9fe <__do_global_ctors_aux>:
    e9fe:	0a 12       	push	r10		;
    ea00:	3a 40 24 e0 	mov	#57380,	r10	;#0xe024

0000ea04 <.L2>:
    ea04:	2c 4a       	mov	@r10,	r12	;
    ea06:	3c 93       	cmp	#-1,	r12	;r3 As==11
    ea08:	02 20       	jnz	$+6      	;abs 0xea0e
    ea0a:	3a 41       	pop	r10		;
    ea0c:	30 41       	ret			

0000ea0e <.L3>:
    ea0e:	8c 12       	call	r12		;
    ea10:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    ea14:	30 40 04 ea 	br	#0xea04		;

0000ea18 <call___do_global_ctors_aux>:
    ea18:	b0 12 32 e1 	call	#57650		;#0xe132
    ea1c:	b0 12 fe e9 	call	#59902		;#0xe9fe

0000ea20 <L0>:
    ea20:	b0 12 6a e0 	call	#57450		;#0xe06a

0000ea24 <.Loc.19.1>:
    ea24:	b0 12 5c e0 	call	#57436		;#0xe05c

0000ea28 <.Loc.20.1>:
    ea28:	30 41       	ret			

0000ea2a <__msp430_fini>:
    ea2a:	b0 12 78 e0 	call	#57464		;#0xe078

0000ea2e <L0>:
    ea2e:	b0 12 e4 e0 	call	#57572		;#0xe0e4

0000ea32 <L0>:
    ea32:	30 41       	ret			
