
hw_uart.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fae0 l    d  .keyfunction	00000000 .keyfunction
0000ffee l    d  __interrupt_vector_8	00000000 __interrupt_vector_8
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e018 l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000214 l    d  .bss	00000000 .bss
00000227 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e074 l       .text	00000000 _msp430_run_array
0000e082 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e010 l     O .rodata	00000000 __CTOR_LIST__
0000e014 l     O .rodata	00000000 __DTOR_LIST__
0000e008 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000e8ca l     O .text	00000000 __TMC_LIST__
0000e088 l     F .text	00000000 deregister_tm_clones
0000e0a2 l     F .text	00000000 register_tm_clones
0000e0d0 l     F .text	00000000 __do_global_dtors_aux
00000214 l     O .bss	00000000 completed.3056
00000216 l     O .bss	00000000 dtor_idx.3058
0000e11e l     F .text	00000000 call___do_global_dtors_aux
0000e11e l     F .text	00000000 frame_dummy
00000218 l     O .bss	00000000 object.3071
0000e136 l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e012 l     O .rodata	00000000 __CTOR_END__
0000e008 l     O .rodata	00000000 __FRAME_END__
0000e894 l     F .text	00000000 __do_global_ctors_aux
0000e8ae l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 cprintf.c
00000202 l     O .data	00000011 hex
0000e1d8 l     F .text	00000028 tty_putc
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e7aa g       .text	00000000 .hidden __mspabi_srli_9
0000e730 g       .text	00000000 .hidden __mspabi_srai_6
0000e73a g       .text	00000000 .hidden __mspabi_srai_1
0000e7fa g       .text	00000000 .hidden __mspabi_srll_10
0000e7a6 g       .text	00000000 .hidden __mspabi_srli_10
0000e75c g       .text	00000000 .hidden __mspabi_sral_10
0000e74c g       .text	00000000 .hidden __mspabi_sral_14
0000e15c g     F .text	00000054 INT_uart_rx
0000e792 g       .text	00000000 .hidden __mspabi_srli_15
0000e846 g     F .text	00000038 memmove
0000e7be g       .text	00000000 .hidden __mspabi_srli_4
0000e640 g     F .text	00000040 .hidden udivmodhi4
0000e760 g       .text	00000000 .hidden __mspabi_sral_9
0000e7b2 g       .text	00000000 .hidden __mspabi_srli_7
0000e80c g       .text	00000000 .hidden __mspabi_srll_7
0000e824 g       .text	00000000 .hidden __mspabi_srll_3
0000e44c g     F .text	000001f4 cprintf
0000e76c g       .text	00000000 .hidden __mspabi_sral_6
0000e780 g       .text	00000000 .hidden __mspabi_sral_1
0000e710 g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e71e g       .text	00000000 .hidden __mspabi_srai_15
0000e200 g     F .text	0000001a cput_nibble
0000e8ca g     O .text	00000000 .hidden __TMC_END__
0000e7e8 g       .text	00000000 .hidden __mspabi_srll_13
0000e016 g     O .rodata	00000000 .hidden __DTOR_END__
0000e00c g       .rodata	00000000 __fini_array_end
0000e79e g       .text	00000000 .hidden __mspabi_srli_12
0000e738 g       .text	00000000 .hidden __mspabi_srai_2
0000e736 g       .text	00000000 .hidden __mspabi_srai_3
0000e018 g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e01c g     F .text	0000000e __crt0_init_bss
00000013 g       *ABS*	00000000 __bsssize
0000e728 g       .text	00000000 .hidden __mspabi_srai_10
0000e6cc g     F .text	00000032 .hidden __mspabi_remi
0000e03e g     F .text	0000000a __crt0_call_init_then_main
0000e71a g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e236 g     F .text	00000040 cput_binary_byte
0000e716 g       .text	00000000 .hidden __mspabi_func_epilog_3
0000e818 g       .text	00000000 .hidden __mspabi_srll_5
0000e7d6 g       .text	00000000 .hidden __mspabi_srli
0000e292 g     F .text	0000004c cput_hex_long
0000e7f4 g       .text	00000000 .hidden __mspabi_srll_11
0000e7ba g       .text	00000000 .hidden __mspabi_srli_5
00000226 g     O .bss	00000001 rxdata
00000000  w      *UND*	00000000 __deregister_frame_info
00000228 g       .noinit	00000000 end
0000e758 g       .text	00000000 .hidden __mspabi_sral_11
0000e748 g       .text	00000000 .hidden __mspabi_sral_15
0000e72e g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e21a g     F .text	0000001c cput_hex_byte
0000e706 g     F .text	00000008 .hidden __mspabi_remu
0000e812 g       .text	00000000 .hidden __mspabi_srll_6
0000e774 g       .text	00000000 .hidden __mspabi_sral_4
0000e018 g       .text	00000000 _start
0000e276 g     F .text	0000001c cput_hex_word
0000e064 g     F .text	00000000 _msp430_run_fini_array
0000e7ca g       .text	00000000 .hidden __mspabi_srli_1
0000e7e2 g       .text	00000000 .hidden __mspabi_srll_14
0000e742 g       .text	00000000 .hidden __mspabi_srai
0000e724 g       .text	00000000 .hidden __mspabi_srai_12
0000e796 g       .text	00000000 .hidden __mspabi_srli_14
00000014 g       *ABS*	00000000 __romdatacopysize
0000e768 g       .text	00000000 .hidden __mspabi_sral_7
0000e72c g       .text	00000000 .hidden __mspabi_srai_8
0000e7a2 g       .text	00000000 .hidden __mspabi_srli_11
0000e39a g     F .text	000000b2 cput_number
0000e77c g       .text	00000000 .hidden __mspabi_sral_2
0000e2de g     F .text	00000068 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e00c g       .rodata	00000000 __fini_array_start
0000e680 g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000e8ae g       .text	00000000 __msp430_init
0000e87e g     F .text	00000014 memset
0000e1b0 g     F .text	00000028 main
0000e72a g       .text	00000000 .hidden __mspabi_srai_9
0000e726 g       .text	00000000 .hidden __mspabi_srai_11
0000e81e g       .text	00000000 .hidden __mspabi_srll_4
0000e00c g       .rodata	00000000 __init_array_end
0000e7c6 g       .text	00000000 .hidden __mspabi_srli_2
0000e78c g       .text	00000000 .hidden __mspabi_sral
0000e6fe g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
00000000  w      *ABS*	00000000 __rom_highdatastart
0000e8ca g       .text	00000000 __msp430_fini_end
0000e764 g       .text	00000000 .hidden __mspabi_sral_8
0000e750 g       .text	00000000 .hidden __mspabi_sral_13
0000e136 g     F .text	00000014 delay
0000e7ee g       .text	00000000 .hidden __mspabi_srll_12
0000e8ca g       *ABS*	00000000 __romdatastart
0000e734 g       .text	00000000 .hidden __mspabi_srai_4
0000e048 g     F .text	00000000 _msp430_run_init_array
0000e7b6 g       .text	00000000 .hidden __mspabi_srli_6
0000e00c g       .rodata	00000000 __preinit_array_end
0000e7c2 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00000214 g       .bss	00000000 __bssstart
0000e712 g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e720 g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .MP430.attributes	00000000 __stack
0000e800 g       .text	00000000 .hidden __mspabi_srll_9
0000e778 g       .text	00000000 .hidden __mspabi_sral_3
00000214 g       .data	00000000 _edata
0000e754 g       .text	00000000 .hidden __mspabi_sral_12
0000e8c0 g       .text	00000000 __msp430_init_end
0000e14a g     F .text	00000012 tty_putc
0000e840 g       .text	00000000 .hidden __mspabi_srll
0000e346 g     F .text	00000054 cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000e7dc g       .text	00000000 .hidden __mspabi_srll_15
0000e00c g       .rodata	00000000 __init_array_start
0000e732 g       .text	00000000 .hidden __mspabi_srai_5
0000e722 g       .text	00000000 .hidden __mspabi_srai_13
0000e79a g       .text	00000000 .hidden __mspabi_srli_13
00000200 g       .data	00000000 __datastart
0000e806 g       .text	00000000 .hidden __mspabi_srll_8
0000e830 g       .text	00000000 .hidden __mspabi_srll_1
0000e00c g       .rodata	00000000 __preinit_array_start
0000e02a g     F .text	00000014 __crt0_movedata
0000e718 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e770 g       .text	00000000 .hidden __mspabi_sral_5
0000e056 g     F .text	00000000 _msp430_run_preinit_array
0000e70e g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e714 g       .text	00000000 .hidden __mspabi_func_epilog_4
0000e82a g       .text	00000000 .hidden __mspabi_srll_2
0000e8c0 g       .text	00000000 __msp430_fini
0000e7ae g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_8:

0000ffee <__interrupt_vector_8>:
    ffee:	5c e1       	interrupt service routine at 0xe15c

Disassembly of section .text:

0000e018 <__crt0_start>:
    e018:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e01c <__crt0_init_bss>:
    e01c:	3c 40 14 02 	mov	#532,	r12	;#0x0214

0000e020 <.Loc.74.1>:
    e020:	0d 43       	clr	r13		;

0000e022 <.Loc.75.1>:
    e022:	3e 40 13 00 	mov	#19,	r14	;#0x0013

0000e026 <.Loc.79.1>:
    e026:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e02a <__crt0_movedata>:
    e02a:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e02e <.Loc.116.1>:
    e02e:	3d 40 ca e8 	mov	#59594,	r13	;#0xe8ca

0000e032 <.Loc.119.1>:
    e032:	0d 9c       	cmp	r12,	r13	;

0000e034 <.Loc.120.1>:
    e034:	04 24       	jz	$+10     	;abs 0xe03e

0000e036 <.Loc.122.1>:
    e036:	3e 40 14 00 	mov	#20,	r14	;#0x0014

0000e03a <.Loc.124.1>:
    e03a:	b0 12 46 e8 	call	#59462		;#0xe846

0000e03e <__crt0_call_init_then_main>:
    e03e:	b0 12 ae e8 	call	#59566		;#0xe8ae

0000e042 <.Loc.196.1>:
    e042:	0c 43       	clr	r12		;

0000e044 <.Loc.197.1>:
    e044:	b0 12 b0 e1 	call	#57776		;#0xe1b0

0000e048 <_msp430_run_init_array>:
    e048:	34 40 0c e0 	mov	#57356,	r4	;#0xe00c

0000e04c <.Loc.224.1>:
    e04c:	35 40 0c e0 	mov	#57356,	r5	;#0xe00c

0000e050 <.Loc.225.1>:
    e050:	26 43       	mov	#2,	r6	;r3 As==10

0000e052 <.Loc.226.1>:
    e052:	30 40 74 e0 	br	#0xe074		;

0000e056 <_msp430_run_preinit_array>:
    e056:	34 40 0c e0 	mov	#57356,	r4	;#0xe00c

0000e05a <.Loc.232.1>:
    e05a:	35 40 0c e0 	mov	#57356,	r5	;#0xe00c

0000e05e <.Loc.233.1>:
    e05e:	26 43       	mov	#2,	r6	;r3 As==10

0000e060 <.Loc.234.1>:
    e060:	30 40 74 e0 	br	#0xe074		;

0000e064 <_msp430_run_fini_array>:
    e064:	34 40 0c e0 	mov	#57356,	r4	;#0xe00c

0000e068 <.Loc.240.1>:
    e068:	35 40 0c e0 	mov	#57356,	r5	;#0xe00c

0000e06c <.Loc.241.1>:
    e06c:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e070 <.Loc.242.1>:
    e070:	30 40 74 e0 	br	#0xe074		;

0000e074 <_msp430_run_array>:
    e074:	05 94       	cmp	r4,	r5	;

0000e076 <.Loc.246.1>:
    e076:	05 24       	jz	$+12     	;abs 0xe082

0000e078 <.Loc.247.1>:
    e078:	27 44       	mov	@r4,	r7	;

0000e07a <.Loc.248.1>:
    e07a:	04 56       	add	r6,	r4	;

0000e07c <.Loc.249.1>:
    e07c:	a7 12       	call	@r7		;

0000e07e <.Loc.250.1>:
    e07e:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe074

0000e082 <_msp430_run_done>:
    e082:	30 41       	ret			

0000e084 <L0>:
    e084:	30 41       	ret			
    e086:	30 41       	ret			

0000e088 <deregister_tm_clones>:
    e088:	3c 40 ca e8 	mov	#59594,	r12	;#0xe8ca
    e08c:	3c 90 ca e8 	cmp	#59594,	r12	;#0xe8ca
    e090:	07 24       	jz	$+16     	;abs 0xe0a0
    e092:	3d 40 00 00 	mov	#0,	r13	;
    e096:	0d 93       	cmp	#0,	r13	;r3 As==00
    e098:	03 24       	jz	$+8      	;abs 0xe0a0
    e09a:	3c 40 ca e8 	mov	#59594,	r12	;#0xe8ca
    e09e:	8d 12       	call	r13		;

0000e0a0 <.L1>:
    e0a0:	30 41       	ret			

0000e0a2 <register_tm_clones>:
    e0a2:	0a 12       	push	r10		;
    e0a4:	3a 40 ca e8 	mov	#59594,	r10	;#0xe8ca
    e0a8:	3a 80 ca e8 	sub	#59594,	r10	;#0xe8ca
    e0ac:	0a 11       	rra	r10		;
    e0ae:	0c 4a       	mov	r10,	r12	;
    e0b0:	b0 12 92 e7 	call	#59282		;#0xe792
    e0b4:	0c 5a       	add	r10,	r12	;
    e0b6:	0d 4c       	mov	r12,	r13	;
    e0b8:	0d 11       	rra	r13		;
    e0ba:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0bc:	07 24       	jz	$+16     	;abs 0xe0cc
    e0be:	3e 40 00 00 	mov	#0,	r14	;
    e0c2:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0c4:	03 24       	jz	$+8      	;abs 0xe0cc
    e0c6:	3c 40 ca e8 	mov	#59594,	r12	;#0xe8ca
    e0ca:	8e 12       	call	r14		;

0000e0cc <.L9>:
    e0cc:	3a 41       	pop	r10		;
    e0ce:	30 41       	ret			

0000e0d0 <__do_global_dtors_aux>:
    e0d0:	0a 12       	push	r10		;
    e0d2:	09 12       	push	r9		;
    e0d4:	c2 93 14 02 	cmp.b	#0,	&0x0214	;r3 As==00
    e0d8:	17 20       	jnz	$+48     	;abs 0xe108
    e0da:	3a 40 16 e0 	mov	#57366,	r10	;#0xe016
    e0de:	3a 80 14 e0 	sub	#57364,	r10	;#0xe014
    e0e2:	0a 11       	rra	r10		;
    e0e4:	3a 53       	add	#-1,	r10	;r3 As==11
    e0e6:	39 40 14 e0 	mov	#57364,	r9	;#0xe014

0000e0ea <.L19>:
    e0ea:	1c 42 16 02 	mov	&0x0216,r12	;0x0216
    e0ee:	0c 9a       	cmp	r10,	r12	;
    e0f0:	0d 28       	jnc	$+28     	;abs 0xe10c
    e0f2:	b0 12 88 e0 	call	#57480		;#0xe088
    e0f6:	3d 40 00 00 	mov	#0,	r13	;
    e0fa:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0fc:	03 24       	jz	$+8      	;abs 0xe104
    e0fe:	3c 40 08 e0 	mov	#57352,	r12	;#0xe008
    e102:	8d 12       	call	r13		;

0000e104 <.L21>:
    e104:	d2 43 14 02 	mov.b	#1,	&0x0214	;r3 As==01

0000e108 <.L17>:
    e108:	30 40 18 e7 	br	#0xe718		;

0000e10c <.L20>:
    e10c:	1c 53       	inc	r12		;
    e10e:	82 4c 16 02 	mov	r12,	&0x0216	;
    e112:	0c 5c       	rla	r12		;
    e114:	0c 59       	add	r9,	r12	;
    e116:	2c 4c       	mov	@r12,	r12	;
    e118:	8c 12       	call	r12		;
    e11a:	30 40 ea e0 	br	#0xe0ea		;

0000e11e <call___do_global_dtors_aux>:
    e11e:	3e 40 00 00 	mov	#0,	r14	;
    e122:	0e 93       	cmp	#0,	r14	;r3 As==00
    e124:	05 24       	jz	$+12     	;abs 0xe130
    e126:	3d 40 18 02 	mov	#536,	r13	;#0x0218
    e12a:	3c 40 08 e0 	mov	#57352,	r12	;#0xe008
    e12e:	8e 12       	call	r14		;

0000e130 <.L27>:
    e130:	b0 12 a2 e0 	call	#57506		;#0xe0a2
    e134:	30 41       	ret			

0000e136 <delay>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e136:	0d 4c       	mov	r12,	r13	;
    e138:	3d 53       	add	#-1,	r13	;r3 As==11

0000e13a <.LVL1>:
    e13a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e13c:	05 24       	jz	$+12     	;abs 0xe148

0000e13e <.L3>:
      __nop();
    e13e:	03 43       	nop			

0000e140 <.Loc.13.1>:
      __nop();
    e140:	03 43       	nop			

0000e142 <.Loc.11.1>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e142:	3d 53       	add	#-1,	r13	;r3 As==11
    e144:	3d 93       	cmp	#-1,	r13	;r3 As==11
    e146:	fb 23       	jnz	$-8      	;abs 0xe13e

0000e148 <.L1>:
      __nop();
      __nop();
   }
}
    e148:	30 41       	ret			

0000e14a <tty_putc>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e14a:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

0000e14e <.L10>:
    e14e:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    e152:	fd 23       	jnz	$-4      	;abs 0xe14e

0000e154 <.Loc.27.1>:

  // Write the output character
  UART_TXD = txdata;
    e154:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e158 <.Loc.30.1>:

  return 0;
}
    e158:	4c 43       	clr.b	r12		;

0000e15a <.LVL4>:
    e15a:	30 41       	ret			

0000e15c <INT_uart_rx>:
//         (receive a byte from the UART)           //
//--------------------------------------------------//
volatile char rxdata;

// wakeup interrupt (8) INT_uart_rx(void) {
interrupt (8) INT_uart_rx(void) {
    e15c:	0f 12       	push	r15		;

0000e15e <.LCFI0>:
    e15e:	0e 12       	push	r14		;

0000e160 <.LCFI1>:
    e160:	0d 12       	push	r13		;

0000e162 <.LCFI2>:
    e162:	0c 12       	push	r12		;

0000e164 <.LCFI3>:
    e164:	0b 12       	push	r11		;

0000e166 <.LCFI4>:
    e166:	0a 12       	push	r10		;

0000e168 <.LCFI5>:
    e168:	09 12       	push	r9		;

0000e16a <.LCFI6>:
    e16a:	08 12       	push	r8		;

0000e16c <.LCFI7>:
    e16c:	07 12       	push	r7		;

0000e16e <.LCFI8>:
    e16e:	06 12       	push	r6		;

0000e170 <.LCFI9>:
    e170:	05 12       	push	r5		;

0000e172 <.LCFI10>:
    e172:	04 12       	push	r4		;

0000e174 <.LCFI11>:
    e174:	21 82       	sub	#4,	r1	;r2 As==10

0000e176 <.LCFI12>:
  // Read the received data
  rxdata = UART_RXD;
    e176:	d2 42 85 00 	mov.b	&0x0085,&0x0226	;0x0085
    e17a:	26 02 

0000e17c <.Loc.44.1>:

  // Clear the receive pending flag
  UART_STAT = UART_RX_PND;
    e17c:	f2 40 10 00 	mov.b	#16,	&0x0081	;#0x0010
    e180:	81 00 

0000e182 <.Loc.46.1>:

  cprintf("%c", rxdata);
    e182:	5c 42 26 02 	mov.b	&0x0226,r12	;0x0226
    e186:	81 4c 02 00 	mov	r12,	2(r1)	;
    e18a:	b1 40 00 e0 	mov	#57344,	0(r1)	;#0xe000
    e18e:	00 00 
    e190:	b0 12 4c e4 	call	#58444		;#0xe44c

0000e194 <.LVL5>:
  // // Exit the low power mode
  // LPM0_EXIT;
}
    e194:	21 52       	add	#4,	r1	;r2 As==10
    e196:	34 41       	pop	r4		;
    e198:	35 41       	pop	r5		;
    e19a:	36 41       	pop	r6		;
    e19c:	37 41       	pop	r7		;
    e19e:	38 41       	pop	r8		;
    e1a0:	39 41       	pop	r9		;
    e1a2:	3a 41       	pop	r10		;
    e1a4:	3b 41       	pop	r11		;
    e1a6:	3c 41       	pop	r12		;
    e1a8:	3d 41       	pop	r13		;
    e1aa:	3e 41       	pop	r14		;
    e1ac:	3f 41       	pop	r15		;
    e1ae:	00 13       	reti			

0000e1b0 <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e1b0:	21 83       	decd	r1		;

0000e1b2 <.LCFI13>:
    char buf[40];
    int led = 0;
//    int *key;
//    key = (void *)0xfee0; 

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e1b2:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    e1b6:	20 01 

0000e1b8 <.Loc.73.1>:


    UART_BAUD = BAUD;                   // Init UART
    e1b8:	b2 40 11 04 	mov	#1041,	&0x0082	;#0x0411
    e1bc:	82 00 

0000e1be <.Loc.74.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e1be:	f2 40 11 00 	mov.b	#17,	&0x0080	;#0x0011
    e1c2:	80 00 

0000e1c4 <.Loc.76.1>:

    cprintf("> ");
    e1c4:	b1 40 03 e0 	mov	#57347,	0(r1)	;#0xe003
    e1c8:	00 00 
    e1ca:	b0 12 4c e4 	call	#58444		;#0xe44c

0000e1ce <.LVL7>:

    enable_interrupts();                  // Enable interrupts
    e1ce:	03 43       	nop			
    e1d0:	32 d2       	eint			
    e1d2:	03 43       	nop			

0000e1d4 <.L14>:
    e1d4:	30 40 d4 e1 	br	#0xe1d4		;

0000e1d8 <tty_putc>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {
    e1d8:	21 83       	decd	r1		;

0000e1da <.LCFI0>:
    e1da:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e1de <.Loc.14.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e1de:	03 43       	nop			

0000e1e0 <.L2>:
    e1e0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e1e4:	6c 4c       	mov.b	@r12,	r12	;
    e1e6:	7c f2       	and.b	#8,	r12	;r2 As==11
    e1e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    e1ea:	fa 23       	jnz	$-10     	;abs 0xe1e0

0000e1ec <.Loc.17.1>:

  // Write the output character
  UART_TXD = txdata;
    e1ec:	7c 40 84 00 	mov.b	#132,	r12	;#0x0084
    e1f0:	2d 41       	mov	@r1,	r13	;
    e1f2:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    e1f6:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000e1fa <.Loc.19.1>:

  return 0;
    e1fa:	4c 43       	clr.b	r12		;

0000e1fc <.Loc.20.1>:
}
    e1fc:	21 53       	incd	r1		;
    e1fe:	30 41       	ret			

0000e200 <cput_nibble>:

void
cput_nibble (int n) {
    e200:	21 83       	decd	r1		;

0000e202 <.LCFI1>:
    e202:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e206 <.Loc.24.1>:
  tty_putc (hex[n&0x0f]);
    e206:	2c 41       	mov	@r1,	r12	;
    e208:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e20c:	5c 4c 02 02 	mov.b	514(r12),r12	;0x00202
    e210:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e214 <.Loc.25.1>:
}
    e214:	03 43       	nop			
    e216:	21 53       	incd	r1		;
    e218:	30 41       	ret			

0000e21a <cput_hex_byte>:

void
cput_hex_byte (int n) {
    e21a:	21 83       	decd	r1		;

0000e21c <.LCFI2>:
    e21c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e220 <.Loc.29.1>:
  cput_nibble (n >> 4);
    e220:	2c 41       	mov	@r1,	r12	;
    e222:	b0 12 34 e7 	call	#59188		;#0xe734
    e226:	b0 12 00 e2 	call	#57856		;#0xe200

0000e22a <.Loc.30.1>:
  cput_nibble (n);
    e22a:	2c 41       	mov	@r1,	r12	;
    e22c:	b0 12 00 e2 	call	#57856		;#0xe200

0000e230 <.Loc.31.1>:
}
    e230:	03 43       	nop			
    e232:	21 53       	incd	r1		;
    e234:	30 41       	ret			

0000e236 <cput_binary_byte>:

void
cput_binary_byte (int n) {
    e236:	21 82       	sub	#4,	r1	;r2 As==10

0000e238 <.LCFI3>:
    e238:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e23c <.Loc.36.1>:
  int i;
  for (i=7; i>=0; i--)
    e23c:	b1 40 07 00 	mov	#7,	2(r1)	;
    e240:	02 00 
    e242:	30 40 6a e2 	br	#0xe26a		;

0000e246 <.L10>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e246:	2c 41       	mov	@r1,	r12	;
    e248:	1d 41 02 00 	mov	2(r1),	r13	;
    e24c:	b0 12 42 e7 	call	#59202		;#0xe742
    e250:	5c f3       	and.b	#1,	r12	;r3 As==01
    e252:	0c 93       	cmp	#0,	r12	;r3 As==00
    e254:	04 24       	jz	$+10     	;abs 0xe25e

0000e256 <.Loc.37.1>:
    e256:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031
    e25a:	30 40 62 e2 	br	#0xe262		;

0000e25e <.L8>:
    e25e:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e262 <.L9>:
    e262:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e266 <.Loc.36.1>:
}

void
cput_binary_byte (int n) {
  int i;
  for (i=7; i>=0; i--)
    e266:	b1 53 02 00 	add	#-1,	2(r1)	;r3 As==11

0000e26a <.L7>:
    e26a:	81 93 02 00 	cmp	#0,	2(r1)	;r3 As==00
    e26e:	eb 37       	jge	$-40     	;abs 0xe246

0000e270 <.Loc.38.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e270:	03 43       	nop			
    e272:	21 52       	add	#4,	r1	;r2 As==10
    e274:	30 41       	ret			

0000e276 <cput_hex_word>:

void
cput_hex_word (int n) {
    e276:	21 83       	decd	r1		;

0000e278 <.LCFI4>:
    e278:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e27c <.Loc.42.1>:
  cput_hex_byte (n >> 8);
    e27c:	2c 41       	mov	@r1,	r12	;
    e27e:	b0 12 2c e7 	call	#59180		;#0xe72c
    e282:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e286 <.Loc.43.1>:
  cput_hex_byte (n);
    e286:	2c 41       	mov	@r1,	r12	;
    e288:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e28c <.Loc.44.1>:
}
    e28c:	03 43       	nop			
    e28e:	21 53       	incd	r1		;
    e290:	30 41       	ret			

0000e292 <cput_hex_long>:

void
cput_hex_long (long int n) {
    e292:	21 82       	sub	#4,	r1	;r2 As==10

0000e294 <.LCFI5>:
    e294:	81 4c 00 00 	mov	r12,	0(r1)	;
    e298:	81 4d 02 00 	mov	r13,	2(r1)	;

0000e29c <.Loc.48.1>:
  cput_hex_byte (n >> 24);
    e29c:	2c 41       	mov	@r1,	r12	;
    e29e:	1d 41 02 00 	mov	2(r1),	r13	;
    e2a2:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e2a6:	4f 43       	clr.b	r15		;
    e2a8:	b0 12 8c e7 	call	#59276		;#0xe78c
    e2ac:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e2b0 <.Loc.49.1>:
  cput_hex_byte (n >> 16);
    e2b0:	2c 41       	mov	@r1,	r12	;
    e2b2:	1d 41 02 00 	mov	2(r1),	r13	;
    e2b6:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e2ba:	4f 43       	clr.b	r15		;
    e2bc:	b0 12 8c e7 	call	#59276		;#0xe78c
    e2c0:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e2c4 <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e2c4:	2c 41       	mov	@r1,	r12	;
    e2c6:	1d 41 02 00 	mov	2(r1),	r13	;
    e2ca:	b0 12 64 e7 	call	#59236		;#0xe764
    e2ce:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e2d2 <.Loc.51.1>:
  cput_hex_byte (n);
    e2d2:	2c 41       	mov	@r1,	r12	;
    e2d4:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e2d8 <.Loc.52.1>:
}
    e2d8:	03 43       	nop			
    e2da:	21 52       	add	#4,	r1	;r2 As==10
    e2dc:	30 41       	ret			

0000e2de <cput_hex_block>:

void
cput_hex_block (char *block, int n) {
    e2de:	31 80 06 00 	sub	#6,	r1	;

0000e2e2 <.LCFI6>:
    e2e2:	81 4c 02 00 	mov	r12,	2(r1)	;
    e2e6:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e2ea <.Loc.56.1>:
  int i = 0;
    e2ea:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e2ee <.Loc.57.1>:
  while (n)
    e2ee:	30 40 32 e3 	br	#0xe332		;

0000e2f2 <.L18>:
    {
      cput_hex_byte (*block++);
    e2f2:	1c 41 02 00 	mov	2(r1),	r12	;
    e2f6:	0d 4c       	mov	r12,	r13	;
    e2f8:	1d 53       	inc	r13		;
    e2fa:	81 4d 02 00 	mov	r13,	2(r1)	;
    e2fe:	6c 4c       	mov.b	@r12,	r12	;
    e300:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e304 <.Loc.60.1>:
      if (--n == 0)
    e304:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e308:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e30c:	17 24       	jz	$+48     	;abs 0xe33c

0000e30e <.Loc.62.1>:
	break;
      i++;
    e30e:	91 53 04 00 	inc	4(r1)		;

0000e312 <.Loc.63.1>:
      if ((i & 7) == 0)
    e312:	1c 41 04 00 	mov	4(r1),	r12	;
    e316:	7c f0 07 00 	and.b	#7,	r12	;
    e31a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e31c:	06 20       	jnz	$+14     	;abs 0xe32a

0000e31e <.Loc.64.1>:
	tty_putc (' ');
    e31e:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e322:	b0 12 d8 e1 	call	#57816		;#0xe1d8
    e326:	30 40 32 e3 	br	#0xe332		;

0000e32a <.L17>:
      else
	tty_putc (':');
    e32a:	7c 40 3a 00 	mov.b	#58,	r12	;#0x003a
    e32e:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e332 <.L14>:
}

void
cput_hex_block (char *block, int n) {
  int i = 0;
  while (n)
    e332:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e336:	dd 23       	jnz	$-68     	;abs 0xe2f2

0000e338 <.Loc.68.1>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e338:	30 40 3e e3 	br	#0xe33e		;

0000e33c <.L19>:
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
    e33c:	03 43       	nop			

0000e33e <.L16>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e33e:	03 43       	nop			
    e340:	31 50 06 00 	add	#6,	r1	;
    e344:	30 41       	ret			

0000e346 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n) {
    e346:	31 80 06 00 	sub	#6,	r1	;

0000e34a <.LCFI7>:
    e34a:	81 4c 02 00 	mov	r12,	2(r1)	;
    e34e:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e352 <.Loc.72.1>:
  int i = 0;
    e352:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e356 <.Loc.73.1>:
  while (n)
    e356:	30 40 86 e3 	br	#0xe386		;

0000e35a <.L24>:
    {
      cput_nibble (*block);
    e35a:	1c 41 02 00 	mov	2(r1),	r12	;
    e35e:	6c 4c       	mov.b	@r12,	r12	;
    e360:	b0 12 00 e2 	call	#57856		;#0xe200

0000e364 <.Loc.76.1>:
      if (--n == 0)
    e364:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e368:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e36c:	11 24       	jz	$+36     	;abs 0xe390

0000e36e <.Loc.78.1>:
	break;
      i++;
    e36e:	91 53 04 00 	inc	4(r1)		;

0000e372 <.Loc.79.1>:
      if ((i & 7) == 0)
    e372:	1c 41 04 00 	mov	4(r1),	r12	;
    e376:	7c f0 07 00 	and.b	#7,	r12	;
    e37a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e37c:	04 20       	jnz	$+10     	;abs 0xe386

0000e37e <.Loc.80.1>:
	tty_putc (' ');
    e37e:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e382:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e386 <.L21>:
}

void
cput_nibble_block (char *block, int n) {
  int i = 0;
  while (n)
    e386:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e38a:	e7 23       	jnz	$-48     	;abs 0xe35a

0000e38c <.Loc.82.1>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e38c:	30 40 92 e3 	br	#0xe392		;

0000e390 <.L25>:
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
	break;
    e390:	03 43       	nop			

0000e392 <.L23>:
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e392:	03 43       	nop			
    e394:	31 50 06 00 	add	#6,	r1	;
    e398:	30 41       	ret			

0000e39a <cput_number>:

void
cput_number (int n) {
    e39a:	31 80 18 00 	sub	#24,	r1	;#0x0018

0000e39e <.LCFI8>:
    e39e:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3a2 <.Loc.87.1>:
  char buf[20];
  int i = 0;
    e3a2:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016

0000e3a6 <.Loc.88.1>:
  if (n < 0)
    e3a6:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e3aa:	25 34       	jge	$+76     	;abs 0xe3f6

0000e3ac <.Loc.90.1>:
    {
      tty_putc ('-');
    e3ac:	7c 40 2d 00 	mov.b	#45,	r12	;#0x002d
    e3b0:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e3b4 <.Loc.91.1>:
      n = -n;
    e3b4:	4c 43       	clr.b	r12		;
    e3b6:	2c 81       	sub	@r1,	r12	;
    e3b8:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3bc <.Loc.93.1>:
    }
  while (n > 9)
    e3bc:	30 40 f6 e3 	br	#0xe3f6		;

0000e3c0 <.L29>:
    {
      buf[i++] = (n%10) + '0';
    e3c0:	2c 41       	mov	@r1,	r12	;
    e3c2:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e3c6:	b0 12 cc e6 	call	#59084		;#0xe6cc
    e3ca:	4d 4c       	mov.b	r12,	r13	;
    e3cc:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e3d0:	0e 4c       	mov	r12,	r14	;
    e3d2:	1e 53       	inc	r14		;
    e3d4:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e3d8:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e3dc:	4e 4d       	mov.b	r13,	r14	;
    e3de:	0d 41       	mov	r1,	r13	;
    e3e0:	2d 53       	incd	r13		;
    e3e2:	0c 5d       	add	r13,	r12	;
    e3e4:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e3e8 <.Loc.96.1>:
      n /= 10;
    e3e8:	2c 41       	mov	@r1,	r12	;
    e3ea:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e3ee:	b0 12 80 e6 	call	#59008		;#0xe680
    e3f2:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3f6 <.L28>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e3f6:	7c 40 09 00 	mov.b	#9,	r12	;
    e3fa:	2c 91       	cmp	@r1,	r12	;
    e3fc:	e1 3b       	jl	$-60     	;abs 0xe3c0

0000e3fe <.Loc.98.1>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e3fe:	2c 41       	mov	@r1,	r12	;
    e400:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e404:	b0 12 cc e6 	call	#59084		;#0xe6cc
    e408:	4d 4c       	mov.b	r12,	r13	;
    e40a:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e40e:	0e 4c       	mov	r12,	r14	;
    e410:	1e 53       	inc	r14		;
    e412:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e416:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e41a:	4e 4d       	mov.b	r13,	r14	;
    e41c:	0d 41       	mov	r1,	r13	;
    e41e:	2d 53       	incd	r13		;
    e420:	0c 5d       	add	r13,	r12	;
    e422:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e426 <.Loc.99.1>:
  while (i > 0)
    e426:	30 40 3c e4 	br	#0xe43c		;

0000e42a <.L31>:
    tty_putc (buf[--i]);
    e42a:	b1 53 16 00 	add	#-1,	22(r1)	;r3 As==11, 0x0016
    e42e:	0c 41       	mov	r1,	r12	;
    e430:	2c 53       	incd	r12		;
    e432:	1c 51 16 00 	add	22(r1),	r12	;0x00016
    e436:	6c 4c       	mov.b	@r12,	r12	;
    e438:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e43c <.L30>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e43c:	4c 43       	clr.b	r12		;
    e43e:	1c 91 16 00 	cmp	22(r1),	r12	;0x00016
    e442:	f3 3b       	jl	$-24     	;abs 0xe42a

0000e444 <.Loc.101.1>:
    tty_putc (buf[--i]);
}
    e444:	03 43       	nop			
    e446:	31 50 18 00 	add	#24,	r1	;#0x0018
    e44a:	30 41       	ret			

0000e44c <cprintf>:

void
cprintf (const char *fmt, ...) {
    e44c:	31 80 06 00 	sub	#6,	r1	;

0000e450 <.LCFI9>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e450:	0c 41       	mov	r1,	r12	;
    e452:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    e456:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e45a <.Loc.111.1>:

  while (*fmt) {
    e45a:	30 40 2e e6 	br	#0xe62e		;

0000e45e <.L49>:
      if (*fmt != '%')
    e45e:	1c 41 08 00 	mov	8(r1),	r12	;
    e462:	6c 4c       	mov.b	@r12,	r12	;
    e464:	7c 90 25 00 	cmp.b	#37,	r12	;#0x0025
    e468:	07 24       	jz	$+16     	;abs 0xe478

0000e46a <.Loc.113.1>:
	tty_putc (*fmt);
    e46a:	1c 41 08 00 	mov	8(r1),	r12	;
    e46e:	6c 4c       	mov.b	@r12,	r12	;
    e470:	b0 12 d8 e1 	call	#57816		;#0xe1d8
    e474:	30 40 2a e6 	br	#0xe62a		;

0000e478 <.L34>:
      else
	switch (*++fmt)
    e478:	91 53 08 00 	inc	8(r1)		;
    e47c:	1c 41 08 00 	mov	8(r1),	r12	;
    e480:	6c 4c       	mov.b	@r12,	r12	;
    e482:	3c 90 64 00 	cmp	#100,	r12	;#0x0064
    e486:	44 24       	jz	$+138    	;abs 0xe510
    e488:	7d 40 64 00 	mov.b	#100,	r13	;#0x0064
    e48c:	0d 9c       	cmp	r12,	r13	;
    e48e:	14 38       	jl	$+42     	;abs 0xe4b8
    e490:	3c 90 42 00 	cmp	#66,	r12	;#0x0042
    e494:	5b 24       	jz	$+184    	;abs 0xe54c
    e496:	7d 40 42 00 	mov.b	#66,	r13	;#0x0042
    e49a:	0d 9c       	cmp	r12,	r13	;
    e49c:	05 38       	jl	$+12     	;abs 0xe4a8
    e49e:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e4a2:	21 24       	jz	$+68     	;abs 0xe4e6
    e4a4:	30 40 2a e6 	br	#0xe62a		;

0000e4a8 <.L39>:
    e4a8:	3c 90 62 00 	cmp	#98,	r12	;#0x0062
    e4ac:	40 24       	jz	$+130    	;abs 0xe52e
    e4ae:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    e4b2:	1f 24       	jz	$+64     	;abs 0xe4f2
    e4b4:	30 40 2a e6 	br	#0xe62a		;

0000e4b8 <.L37>:
    e4b8:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    e4bc:	a9 24       	jz	$+340    	;abs 0xe610
    e4be:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    e4c2:	0d 9c       	cmp	r12,	r13	;
    e4c4:	08 38       	jl	$+18     	;abs 0xe4d6
    e4c6:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    e4ca:	5e 24       	jz	$+190    	;abs 0xe588
    e4cc:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    e4d0:	87 24       	jz	$+272    	;abs 0xe5e0
    e4d2:	30 40 2a e6 	br	#0xe62a		;

0000e4d6 <.L44>:
    e4d6:	3c 90 77 00 	cmp	#119,	r12	;#0x0077
    e4da:	47 24       	jz	$+144    	;abs 0xe56a
    e4dc:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    e4e0:	67 24       	jz	$+208    	;abs 0xe5b0
    e4e2:	30 40 2a e6 	br	#0xe62a		;

0000e4e6 <.L40>:
	  {
	  case '%':
	    tty_putc ('%');
    e4e6:	7c 40 25 00 	mov.b	#37,	r12	;#0x0025
    e4ea:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e4ee <.Loc.119.1>:
	    break;
    e4ee:	30 40 2a e6 	br	#0xe62a		;

0000e4f2 <.L42>:
	  case 'c':
	    i = va_arg (v, int);
    e4f2:	2c 41       	mov	@r1,	r12	;
    e4f4:	1c 53       	inc	r12		;
    e4f6:	1c c3       	bic	#1,	r12	;r3 As==01
    e4f8:	0d 4c       	mov	r12,	r13	;
    e4fa:	2d 53       	incd	r13		;
    e4fc:	81 4d 00 00 	mov	r13,	0(r1)	;
    e500:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e504 <.Loc.122.1>:
	    tty_putc(i);
    e504:	1c 41 02 00 	mov	2(r1),	r12	;
    e508:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e50c <.Loc.123.1>:
	    break;
    e50c:	30 40 2a e6 	br	#0xe62a		;

0000e510 <.L36>:
	  case 'd':
	    i = va_arg (v, int);
    e510:	2c 41       	mov	@r1,	r12	;
    e512:	1c 53       	inc	r12		;
    e514:	1c c3       	bic	#1,	r12	;r3 As==01
    e516:	0d 4c       	mov	r12,	r13	;
    e518:	2d 53       	incd	r13		;
    e51a:	81 4d 00 00 	mov	r13,	0(r1)	;
    e51e:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e522 <.Loc.126.1>:
	    cput_number(i);
    e522:	1c 41 02 00 	mov	2(r1),	r12	;
    e526:	b0 12 9a e3 	call	#58266		;#0xe39a

0000e52a <.Loc.127.1>:
	    break;
    e52a:	30 40 2a e6 	br	#0xe62a		;

0000e52e <.L41>:
	  case 'b':
	    i = va_arg (v, int);
    e52e:	2c 41       	mov	@r1,	r12	;
    e530:	1c 53       	inc	r12		;
    e532:	1c c3       	bic	#1,	r12	;r3 As==01
    e534:	0d 4c       	mov	r12,	r13	;
    e536:	2d 53       	incd	r13		;
    e538:	81 4d 00 00 	mov	r13,	0(r1)	;
    e53c:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e540 <.Loc.130.1>:
	    cput_hex_byte (i);
    e540:	1c 41 02 00 	mov	2(r1),	r12	;
    e544:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e548 <.Loc.131.1>:
	    break;
    e548:	30 40 2a e6 	br	#0xe62a		;

0000e54c <.L38>:
	  case 'B':
	    i = va_arg (v, int);
    e54c:	2c 41       	mov	@r1,	r12	;
    e54e:	1c 53       	inc	r12		;
    e550:	1c c3       	bic	#1,	r12	;r3 As==01
    e552:	0d 4c       	mov	r12,	r13	;
    e554:	2d 53       	incd	r13		;
    e556:	81 4d 00 00 	mov	r13,	0(r1)	;
    e55a:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e55e <.Loc.134.1>:
	    cput_binary_byte (i);
    e55e:	1c 41 02 00 	mov	2(r1),	r12	;
    e562:	b0 12 36 e2 	call	#57910		;#0xe236

0000e566 <.Loc.135.1>:
	    break;
    e566:	30 40 2a e6 	br	#0xe62a		;

0000e56a <.L47>:
	  case 'w':
	    i = va_arg (v, int);
    e56a:	2c 41       	mov	@r1,	r12	;
    e56c:	1c 53       	inc	r12		;
    e56e:	1c c3       	bic	#1,	r12	;r3 As==01
    e570:	0d 4c       	mov	r12,	r13	;
    e572:	2d 53       	incd	r13		;
    e574:	81 4d 00 00 	mov	r13,	0(r1)	;
    e578:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e57c <.Loc.138.1>:
	    cput_hex_word (i);
    e57c:	1c 41 02 00 	mov	2(r1),	r12	;
    e580:	b0 12 76 e2 	call	#57974		;#0xe276

0000e584 <.Loc.139.1>:
	    break;
    e584:	30 40 2a e6 	br	#0xe62a		;

0000e588 <.L45>:
	  case 'l':
	    i = va_arg (v, int);
    e588:	2c 41       	mov	@r1,	r12	;
    e58a:	1c 53       	inc	r12		;
    e58c:	1c c3       	bic	#1,	r12	;r3 As==01
    e58e:	0d 4c       	mov	r12,	r13	;
    e590:	2d 53       	incd	r13		;
    e592:	81 4d 00 00 	mov	r13,	0(r1)	;
    e596:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e59a <.Loc.142.1>:
	    cput_hex_long (i);
    e59a:	1e 41 02 00 	mov	2(r1),	r14	;
    e59e:	0c 4e       	mov	r14,	r12	;
    e5a0:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e5a4:	0d 7d       	subc	r13,	r13	;
    e5a6:	3d e3       	inv	r13		;
    e5a8:	b0 12 92 e2 	call	#58002		;#0xe292

0000e5ac <.Loc.143.1>:
	    break;
    e5ac:	30 40 2a e6 	br	#0xe62a		;

0000e5b0 <.L48>:
	  case 'x':
	    s = va_arg (v, char *);
    e5b0:	2c 41       	mov	@r1,	r12	;
    e5b2:	0d 4c       	mov	r12,	r13	;
    e5b4:	2d 53       	incd	r13		;
    e5b6:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5ba:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e5be <.Loc.146.1>:
	    i = va_arg (v, int);
    e5be:	2c 41       	mov	@r1,	r12	;
    e5c0:	1c 53       	inc	r12		;
    e5c2:	1c c3       	bic	#1,	r12	;r3 As==01
    e5c4:	0d 4c       	mov	r12,	r13	;
    e5c6:	2d 53       	incd	r13		;
    e5c8:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5cc:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5d0 <.Loc.147.1>:
	    cput_hex_block (s, i);
    e5d0:	1d 41 02 00 	mov	2(r1),	r13	;
    e5d4:	1c 41 04 00 	mov	4(r1),	r12	;
    e5d8:	b0 12 de e2 	call	#58078		;#0xe2de

0000e5dc <.Loc.148.1>:
	    break;
    e5dc:	30 40 2a e6 	br	#0xe62a		;

0000e5e0 <.L46>:
	  case 'n':
	    s = va_arg (v, char *);
    e5e0:	2c 41       	mov	@r1,	r12	;
    e5e2:	0d 4c       	mov	r12,	r13	;
    e5e4:	2d 53       	incd	r13		;
    e5e6:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5ea:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e5ee <.Loc.151.1>:
	    i = va_arg (v, int);
    e5ee:	2c 41       	mov	@r1,	r12	;
    e5f0:	1c 53       	inc	r12		;
    e5f2:	1c c3       	bic	#1,	r12	;r3 As==01
    e5f4:	0d 4c       	mov	r12,	r13	;
    e5f6:	2d 53       	incd	r13		;
    e5f8:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5fc:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e600 <.Loc.152.1>:
	    cput_nibble_block (s, i);
    e600:	1d 41 02 00 	mov	2(r1),	r13	;
    e604:	1c 41 04 00 	mov	4(r1),	r12	;
    e608:	b0 12 46 e3 	call	#58182		;#0xe346

0000e60c <.Loc.153.1>:
	    break;
    e60c:	30 40 2a e6 	br	#0xe62a		;

0000e610 <.L43>:
	  case 's':
	    s = va_arg (v, char *);
    e610:	2c 41       	mov	@r1,	r12	;
    e612:	0d 4c       	mov	r12,	r13	;
    e614:	2d 53       	incd	r13		;
    e616:	81 4d 00 00 	mov	r13,	0(r1)	;
    e61a:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e61e <.Loc.156.1>:
	    tty_putc (s[0]);
    e61e:	1c 41 04 00 	mov	4(r1),	r12	;
    e622:	6c 4c       	mov.b	@r12,	r12	;
    e624:	b0 12 d8 e1 	call	#57816		;#0xe1d8

0000e628 <.Loc.157.1>:
	    break;
    e628:	03 43       	nop			

0000e62a <.L35>:
	  }
      fmt ++;
    e62a:	91 53 08 00 	inc	8(r1)		;

0000e62e <.L33>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt) {
    e62e:	1c 41 08 00 	mov	8(r1),	r12	;
    e632:	6c 4c       	mov.b	@r12,	r12	;
    e634:	0c 93       	cmp	#0,	r12	;r3 As==00
    e636:	13 23       	jnz	$-472    	;abs 0xe45e

0000e638 <.Loc.161.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e638:	03 43       	nop			
    e63a:	31 50 06 00 	add	#6,	r1	;
    e63e:	30 41       	ret			

0000e640 <udivmodhi4>:
    e640:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e644 <.Loc.35.1>:
    e644:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e646 <.L2>:
    e646:	0d 9c       	cmp	r12,	r13	;
    e648:	08 28       	jnc	$+18     	;abs 0xe65a

0000e64a <.L15>:
    e64a:	4f 43       	clr.b	r15		;

0000e64c <.L4>:
    e64c:	0b 93       	cmp	#0,	r11	;r3 As==00
    e64e:	0e 20       	jnz	$+30     	;abs 0xe66c

0000e650 <.L5>:
    e650:	0e 93       	cmp	#0,	r14	;r3 As==00
    e652:	01 24       	jz	$+4      	;abs 0xe656
    e654:	0f 4c       	mov	r12,	r15	;

0000e656 <.L1>:
    e656:	0c 4f       	mov	r15,	r12	;
    e658:	30 41       	ret			

0000e65a <.L3>:
    e65a:	3f 53       	add	#-1,	r15	;r3 As==11

0000e65c <.Loc.38.1>:
    e65c:	0f 93       	cmp	#0,	r15	;r3 As==00
    e65e:	f8 27       	jz	$-14     	;abs 0xe650

0000e660 <.Loc.38.1>:
    e660:	0d 93       	cmp	#0,	r13	;r3 As==00
    e662:	f3 3b       	jl	$-24     	;abs 0xe64a

0000e664 <.Loc.40.1>:
    e664:	0d 5d       	rla	r13		;

0000e666 <.Loc.41.1>:
    e666:	0b 5b       	rla	r11		;
    e668:	30 40 46 e6 	br	#0xe646		;

0000e66c <.L9>:
    e66c:	0c 9d       	cmp	r13,	r12	;
    e66e:	02 28       	jnc	$+6      	;abs 0xe674

0000e670 <.Loc.47.1>:
    e670:	0c 8d       	sub	r13,	r12	;

0000e672 <.Loc.48.1>:
    e672:	0f db       	bis	r11,	r15	;

0000e674 <.L8>:
    e674:	12 c3       	clrc			
    e676:	0b 10       	rrc	r11		;

0000e678 <.Loc.51.1>:
    e678:	12 c3       	clrc			
    e67a:	0d 10       	rrc	r13		;
    e67c:	30 40 4c e6 	br	#0xe64c		;

0000e680 <__mspabi_divi>:
    e680:	0a 12       	push	r10		;

0000e682 <.LCFI0>:
    e682:	0f 4c       	mov	r12,	r15	;
    e684:	0e 4d       	mov	r13,	r14	;

0000e686 <.LVL14>:
    e686:	3b 40 40 e6 	mov	#58944,	r11	;#0xe640

0000e68a <.Loc.64.1>:
    e68a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e68c:	1a 34       	jge	$+54     	;abs 0xe6c2

0000e68e <.Loc.66.1>:
    e68e:	4c 43       	clr.b	r12		;

0000e690 <.LVL15>:
    e690:	0c 8f       	sub	r15,	r12	;
    e692:	0f 4c       	mov	r12,	r15	;

0000e694 <.LVL16>:
    e694:	0d 93       	cmp	#0,	r13	;r3 As==00
    e696:	0d 34       	jge	$+28     	;abs 0xe6b2

0000e698 <.Loc.67.1>:
    e698:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e69a <.L21>:
    e69a:	0d 43       	clr	r13		;
    e69c:	0d 8e       	sub	r14,	r13	;

0000e69e <.LVL18>:
    e69e:	4e 43       	clr.b	r14		;

0000e6a0 <.LVL19>:
    e6a0:	0c 4f       	mov	r15,	r12	;

0000e6a2 <.LVL20>:
    e6a2:	8b 12       	call	r11		;

0000e6a4 <.LVL21>:
    e6a4:	1a 93       	cmp	#1,	r10	;r3 As==01
    e6a6:	03 24       	jz	$+8      	;abs 0xe6ae

0000e6a8 <.L20>:
    e6a8:	4d 43       	clr.b	r13		;
    e6aa:	0d 8c       	sub	r12,	r13	;
    e6ac:	0c 4d       	mov	r13,	r12	;

0000e6ae <.L16>:
    e6ae:	3a 41       	pop	r10		;
    e6b0:	30 41       	ret			

0000e6b2 <.L18>:
    e6b2:	4e 43       	clr.b	r14		;
    e6b4:	8b 12       	call	r11		;

0000e6b6 <.LVL25>:
    e6b6:	30 40 a8 e6 	br	#0xe6a8		;

0000e6ba <.L27>:
    e6ba:	4e 43       	clr.b	r14		;
    e6bc:	8b 12       	call	r11		;

0000e6be <.LVL27>:
    e6be:	30 40 ae e6 	br	#0xe6ae		;

0000e6c2 <.L17>:
    e6c2:	0d 93       	cmp	#0,	r13	;r3 As==00
    e6c4:	fa 37       	jge	$-10     	;abs 0xe6ba

0000e6c6 <.Loc.61.1>:
    e6c6:	4a 43       	clr.b	r10		;
    e6c8:	30 40 9a e6 	br	#0xe69a		;

0000e6cc <__mspabi_remi>:
    e6cc:	0a 12       	push	r10		;

0000e6ce <.LCFI1>:
    e6ce:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6d0:	13 34       	jge	$+40     	;abs 0xe6f8

0000e6d2 <.Loc.92.1>:
    e6d2:	4e 43       	clr.b	r14		;
    e6d4:	0e 8c       	sub	r12,	r14	;
    e6d6:	0c 4e       	mov	r14,	r12	;

0000e6d8 <.LVL31>:
    e6d8:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e6da <.L29>:
    e6da:	0d 93       	cmp	#0,	r13	;r3 As==00
    e6dc:	03 34       	jge	$+8      	;abs 0xe6e4
    e6de:	4e 43       	clr.b	r14		;
    e6e0:	0e 8d       	sub	r13,	r14	;
    e6e2:	0d 4e       	mov	r14,	r13	;

0000e6e4 <.L30>:
    e6e4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e6e6:	b0 12 40 e6 	call	#58944		;#0xe640

0000e6ea <.LVL34>:
    e6ea:	0a 93       	cmp	#0,	r10	;r3 As==00
    e6ec:	03 24       	jz	$+8      	;abs 0xe6f4

0000e6ee <.LVL35>:
    e6ee:	4d 43       	clr.b	r13		;
    e6f0:	0d 8c       	sub	r12,	r13	;
    e6f2:	0c 4d       	mov	r13,	r12	;

0000e6f4 <.L28>:
    e6f4:	3a 41       	pop	r10		;
    e6f6:	30 41       	ret			

0000e6f8 <.L32>:
    e6f8:	4a 43       	clr.b	r10		;
    e6fa:	30 40 da e6 	br	#0xe6da		;

0000e6fe <__mspabi_divu>:
    e6fe:	4e 43       	clr.b	r14		;
    e700:	b0 12 40 e6 	call	#58944		;#0xe640

0000e704 <.LVL39>:
    e704:	30 41       	ret			

0000e706 <__mspabi_remu>:
    e706:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e708:	b0 12 40 e6 	call	#58944		;#0xe640

0000e70c <.LVL41>:
    e70c:	30 41       	ret			

0000e70e <__mspabi_func_epilog_7>:
    e70e:	34 41       	pop	r4		;

0000e710 <__mspabi_func_epilog_6>:
    e710:	35 41       	pop	r5		;

0000e712 <__mspabi_func_epilog_5>:
    e712:	36 41       	pop	r6		;

0000e714 <__mspabi_func_epilog_4>:
    e714:	37 41       	pop	r7		;

0000e716 <__mspabi_func_epilog_3>:
    e716:	38 41       	pop	r8		;

0000e718 <__mspabi_func_epilog_2>:
    e718:	39 41       	pop	r9		;

0000e71a <__mspabi_func_epilog_1>:
    e71a:	3a 41       	pop	r10		;
    e71c:	30 41       	ret			

0000e71e <__mspabi_srai_15>:
    e71e:	0c 11       	rra	r12		;

0000e720 <__mspabi_srai_14>:
    e720:	0c 11       	rra	r12		;

0000e722 <__mspabi_srai_13>:
    e722:	0c 11       	rra	r12		;

0000e724 <__mspabi_srai_12>:
    e724:	0c 11       	rra	r12		;

0000e726 <__mspabi_srai_11>:
    e726:	0c 11       	rra	r12		;

0000e728 <__mspabi_srai_10>:
    e728:	0c 11       	rra	r12		;

0000e72a <__mspabi_srai_9>:
    e72a:	0c 11       	rra	r12		;

0000e72c <__mspabi_srai_8>:
    e72c:	0c 11       	rra	r12		;

0000e72e <__mspabi_srai_7>:
    e72e:	0c 11       	rra	r12		;

0000e730 <__mspabi_srai_6>:
    e730:	0c 11       	rra	r12		;

0000e732 <__mspabi_srai_5>:
    e732:	0c 11       	rra	r12		;

0000e734 <__mspabi_srai_4>:
    e734:	0c 11       	rra	r12		;

0000e736 <__mspabi_srai_3>:
    e736:	0c 11       	rra	r12		;

0000e738 <__mspabi_srai_2>:
    e738:	0c 11       	rra	r12		;

0000e73a <__mspabi_srai_1>:
    e73a:	0c 11       	rra	r12		;
    e73c:	30 41       	ret			

0000e73e <.L11>:
    e73e:	3d 53       	add	#-1,	r13	;r3 As==11
    e740:	0c 11       	rra	r12		;

0000e742 <__mspabi_srai>:
    e742:	0d 93       	cmp	#0,	r13	;r3 As==00
    e744:	fc 23       	jnz	$-6      	;abs 0xe73e
    e746:	30 41       	ret			

0000e748 <__mspabi_sral_15>:
    e748:	0d 11       	rra	r13		;
    e74a:	0c 10       	rrc	r12		;

0000e74c <__mspabi_sral_14>:
    e74c:	0d 11       	rra	r13		;
    e74e:	0c 10       	rrc	r12		;

0000e750 <__mspabi_sral_13>:
    e750:	0d 11       	rra	r13		;
    e752:	0c 10       	rrc	r12		;

0000e754 <__mspabi_sral_12>:
    e754:	0d 11       	rra	r13		;
    e756:	0c 10       	rrc	r12		;

0000e758 <__mspabi_sral_11>:
    e758:	0d 11       	rra	r13		;
    e75a:	0c 10       	rrc	r12		;

0000e75c <__mspabi_sral_10>:
    e75c:	0d 11       	rra	r13		;
    e75e:	0c 10       	rrc	r12		;

0000e760 <__mspabi_sral_9>:
    e760:	0d 11       	rra	r13		;
    e762:	0c 10       	rrc	r12		;

0000e764 <__mspabi_sral_8>:
    e764:	0d 11       	rra	r13		;
    e766:	0c 10       	rrc	r12		;

0000e768 <__mspabi_sral_7>:
    e768:	0d 11       	rra	r13		;
    e76a:	0c 10       	rrc	r12		;

0000e76c <__mspabi_sral_6>:
    e76c:	0d 11       	rra	r13		;
    e76e:	0c 10       	rrc	r12		;

0000e770 <__mspabi_sral_5>:
    e770:	0d 11       	rra	r13		;
    e772:	0c 10       	rrc	r12		;

0000e774 <__mspabi_sral_4>:
    e774:	0d 11       	rra	r13		;
    e776:	0c 10       	rrc	r12		;

0000e778 <__mspabi_sral_3>:
    e778:	0d 11       	rra	r13		;
    e77a:	0c 10       	rrc	r12		;

0000e77c <__mspabi_sral_2>:
    e77c:	0d 11       	rra	r13		;
    e77e:	0c 10       	rrc	r12		;

0000e780 <__mspabi_sral_1>:
    e780:	0d 11       	rra	r13		;
    e782:	0c 10       	rrc	r12		;
    e784:	30 41       	ret			

0000e786 <.L12>:
    e786:	3e 53       	add	#-1,	r14	;r3 As==11
    e788:	0d 11       	rra	r13		;
    e78a:	0c 10       	rrc	r12		;

0000e78c <__mspabi_sral>:
    e78c:	0e 93       	cmp	#0,	r14	;r3 As==00
    e78e:	fb 23       	jnz	$-8      	;abs 0xe786
    e790:	30 41       	ret			

0000e792 <__mspabi_srli_15>:
    e792:	12 c3       	clrc			
    e794:	0c 10       	rrc	r12		;

0000e796 <__mspabi_srli_14>:
    e796:	12 c3       	clrc			
    e798:	0c 10       	rrc	r12		;

0000e79a <__mspabi_srli_13>:
    e79a:	12 c3       	clrc			
    e79c:	0c 10       	rrc	r12		;

0000e79e <__mspabi_srli_12>:
    e79e:	12 c3       	clrc			
    e7a0:	0c 10       	rrc	r12		;

0000e7a2 <__mspabi_srli_11>:
    e7a2:	12 c3       	clrc			
    e7a4:	0c 10       	rrc	r12		;

0000e7a6 <__mspabi_srli_10>:
    e7a6:	12 c3       	clrc			
    e7a8:	0c 10       	rrc	r12		;

0000e7aa <__mspabi_srli_9>:
    e7aa:	12 c3       	clrc			
    e7ac:	0c 10       	rrc	r12		;

0000e7ae <__mspabi_srli_8>:
    e7ae:	12 c3       	clrc			
    e7b0:	0c 10       	rrc	r12		;

0000e7b2 <__mspabi_srli_7>:
    e7b2:	12 c3       	clrc			
    e7b4:	0c 10       	rrc	r12		;

0000e7b6 <__mspabi_srli_6>:
    e7b6:	12 c3       	clrc			
    e7b8:	0c 10       	rrc	r12		;

0000e7ba <__mspabi_srli_5>:
    e7ba:	12 c3       	clrc			
    e7bc:	0c 10       	rrc	r12		;

0000e7be <__mspabi_srli_4>:
    e7be:	12 c3       	clrc			
    e7c0:	0c 10       	rrc	r12		;

0000e7c2 <__mspabi_srli_3>:
    e7c2:	12 c3       	clrc			
    e7c4:	0c 10       	rrc	r12		;

0000e7c6 <__mspabi_srli_2>:
    e7c6:	12 c3       	clrc			
    e7c8:	0c 10       	rrc	r12		;

0000e7ca <__mspabi_srli_1>:
    e7ca:	12 c3       	clrc			
    e7cc:	0c 10       	rrc	r12		;
    e7ce:	30 41       	ret			

0000e7d0 <.L11>:
    e7d0:	3d 53       	add	#-1,	r13	;r3 As==11
    e7d2:	12 c3       	clrc			
    e7d4:	0c 10       	rrc	r12		;

0000e7d6 <__mspabi_srli>:
    e7d6:	0d 93       	cmp	#0,	r13	;r3 As==00
    e7d8:	fb 23       	jnz	$-8      	;abs 0xe7d0
    e7da:	30 41       	ret			

0000e7dc <__mspabi_srll_15>:
    e7dc:	12 c3       	clrc			
    e7de:	0d 10       	rrc	r13		;
    e7e0:	0c 10       	rrc	r12		;

0000e7e2 <__mspabi_srll_14>:
    e7e2:	12 c3       	clrc			
    e7e4:	0d 10       	rrc	r13		;
    e7e6:	0c 10       	rrc	r12		;

0000e7e8 <__mspabi_srll_13>:
    e7e8:	12 c3       	clrc			
    e7ea:	0d 10       	rrc	r13		;
    e7ec:	0c 10       	rrc	r12		;

0000e7ee <__mspabi_srll_12>:
    e7ee:	12 c3       	clrc			
    e7f0:	0d 10       	rrc	r13		;
    e7f2:	0c 10       	rrc	r12		;

0000e7f4 <__mspabi_srll_11>:
    e7f4:	12 c3       	clrc			
    e7f6:	0d 10       	rrc	r13		;
    e7f8:	0c 10       	rrc	r12		;

0000e7fa <__mspabi_srll_10>:
    e7fa:	12 c3       	clrc			
    e7fc:	0d 10       	rrc	r13		;
    e7fe:	0c 10       	rrc	r12		;

0000e800 <__mspabi_srll_9>:
    e800:	12 c3       	clrc			
    e802:	0d 10       	rrc	r13		;
    e804:	0c 10       	rrc	r12		;

0000e806 <__mspabi_srll_8>:
    e806:	12 c3       	clrc			
    e808:	0d 10       	rrc	r13		;
    e80a:	0c 10       	rrc	r12		;

0000e80c <__mspabi_srll_7>:
    e80c:	12 c3       	clrc			
    e80e:	0d 10       	rrc	r13		;
    e810:	0c 10       	rrc	r12		;

0000e812 <__mspabi_srll_6>:
    e812:	12 c3       	clrc			
    e814:	0d 10       	rrc	r13		;
    e816:	0c 10       	rrc	r12		;

0000e818 <__mspabi_srll_5>:
    e818:	12 c3       	clrc			
    e81a:	0d 10       	rrc	r13		;
    e81c:	0c 10       	rrc	r12		;

0000e81e <__mspabi_srll_4>:
    e81e:	12 c3       	clrc			
    e820:	0d 10       	rrc	r13		;
    e822:	0c 10       	rrc	r12		;

0000e824 <__mspabi_srll_3>:
    e824:	12 c3       	clrc			
    e826:	0d 10       	rrc	r13		;
    e828:	0c 10       	rrc	r12		;

0000e82a <__mspabi_srll_2>:
    e82a:	12 c3       	clrc			
    e82c:	0d 10       	rrc	r13		;
    e82e:	0c 10       	rrc	r12		;

0000e830 <__mspabi_srll_1>:
    e830:	12 c3       	clrc			
    e832:	0d 10       	rrc	r13		;
    e834:	0c 10       	rrc	r12		;
    e836:	30 41       	ret			

0000e838 <.L12>:
    e838:	3e 53       	add	#-1,	r14	;r3 As==11
    e83a:	12 c3       	clrc			
    e83c:	0d 10       	rrc	r13		;
    e83e:	0c 10       	rrc	r12		;

0000e840 <__mspabi_srll>:
    e840:	0e 93       	cmp	#0,	r14	;r3 As==00
    e842:	fa 23       	jnz	$-10     	;abs 0xe838
    e844:	30 41       	ret			

0000e846 <memmove>:
    e846:	0d 9c       	cmp	r12,	r13	;
    e848:	0a 28       	jnc	$+22     	;abs 0xe85e

0000e84a <.L5>:
    e84a:	0f 4c       	mov	r12,	r15	;
    e84c:	0e 5c       	add	r12,	r14	;

0000e84e <.L3>:
    e84e:	0e 9f       	cmp	r15,	r14	;
    e850:	0d 24       	jz	$+28     	;abs 0xe86c

0000e852 <.LVL3>:
    e852:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    e856:	1f 53       	inc	r15		;

0000e858 <.LVL4>:
    e858:	1d 53       	inc	r13		;
    e85a:	30 40 4e e8 	br	#0xe84e		;

0000e85e <.L2>:
    e85e:	0f 4d       	mov	r13,	r15	;
    e860:	0f 5e       	add	r14,	r15	;
    e862:	0c 9f       	cmp	r15,	r12	;
    e864:	f2 2f       	jc	$-26     	;abs 0xe84a

0000e866 <.L4>:
    e866:	3e 53       	add	#-1,	r14	;r3 As==11

0000e868 <.LVL7>:
    e868:	3e 93       	cmp	#-1,	r14	;r3 As==11
    e86a:	01 20       	jnz	$+4      	;abs 0xe86e

0000e86c <.L10>:
    e86c:	30 41       	ret			

0000e86e <.L6>:
    e86e:	0b 4c       	mov	r12,	r11	;
    e870:	0b 5e       	add	r14,	r11	;
    e872:	0f 4d       	mov	r13,	r15	;
    e874:	0f 5e       	add	r14,	r15	;
    e876:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    e87a:	30 40 66 e8 	br	#0xe866		;

0000e87e <memset>:
    e87e:	0f 4c       	mov	r12,	r15	;
    e880:	0e 5c       	add	r12,	r14	;

0000e882 <.L2>:
    e882:	0f 9e       	cmp	r14,	r15	;
    e884:	01 20       	jnz	$+4      	;abs 0xe888

0000e886 <.Loc.104.1>:
    e886:	30 41       	ret			

0000e888 <.L3>:
    e888:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    e88c:	1f 53       	inc	r15		;

0000e88e <.LVL4>:
    e88e:	30 40 82 e8 	br	#0xe882		;

0000e892 <L0>:
    e892:	30 41       	ret			

0000e894 <__do_global_ctors_aux>:
    e894:	0a 12       	push	r10		;
    e896:	3a 40 10 e0 	mov	#57360,	r10	;#0xe010

0000e89a <.L2>:
    e89a:	2c 4a       	mov	@r10,	r12	;
    e89c:	3c 93       	cmp	#-1,	r12	;r3 As==11
    e89e:	02 20       	jnz	$+6      	;abs 0xe8a4
    e8a0:	3a 41       	pop	r10		;
    e8a2:	30 41       	ret			

0000e8a4 <.L3>:
    e8a4:	8c 12       	call	r12		;
    e8a6:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    e8aa:	30 40 9a e8 	br	#0xe89a		;

0000e8ae <call___do_global_ctors_aux>:
    e8ae:	b0 12 1e e1 	call	#57630		;#0xe11e
    e8b2:	b0 12 94 e8 	call	#59540		;#0xe894

0000e8b6 <L0>:
    e8b6:	b0 12 56 e0 	call	#57430		;#0xe056

0000e8ba <.Loc.19.1>:
    e8ba:	b0 12 48 e0 	call	#57416		;#0xe048

0000e8be <.Loc.20.1>:
    e8be:	30 41       	ret			

0000e8c0 <__msp430_fini>:
    e8c0:	b0 12 64 e0 	call	#57444		;#0xe064

0000e8c4 <L0>:
    e8c4:	b0 12 d0 e0 	call	#57552		;#0xe0d0

0000e8c8 <L0>:
    e8c8:	30 41       	ret			
