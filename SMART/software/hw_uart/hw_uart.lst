
hw_uart.elf:     file format elf32-msp430

SYMBOL TABLE:
0000ffee l    d  __interrupt_vector_8	00000000 __interrupt_vector_8
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e028 l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000202 l    d  .bss	00000000 .bss
00000215 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e084 l       .text	00000000 _msp430_run_array
0000e092 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 cprintf.c
0000e006 l     O .rodata	00000011 hex
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e020 l     O .rodata	00000000 __CTOR_LIST__
0000e024 l     O .rodata	00000000 __DTOR_LIST__
0000e018 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000ea14 l     O .text	00000000 __TMC_LIST__
0000e098 l     F .text	00000000 deregister_tm_clones
0000e0b2 l     F .text	00000000 register_tm_clones
0000e0e0 l     F .text	00000000 __do_global_dtors_aux
00000202 l     O .bss	00000000 completed.3056
00000204 l     O .bss	00000000 dtor_idx.3058
0000e12e l     F .text	00000000 call___do_global_dtors_aux
0000e12e l     F .text	00000000 frame_dummy
00000206 l     O .bss	00000000 object.3071
0000e146 l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e022 l     O .rodata	00000000 __CTOR_END__
0000e018 l     O .rodata	00000000 __FRAME_END__
0000e9de l     F .text	00000000 __do_global_ctors_aux
0000e9f8 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e8f4 g       .text	00000000 .hidden __mspabi_srli_9
0000e87a g       .text	00000000 .hidden __mspabi_srai_6
0000e884 g       .text	00000000 .hidden __mspabi_srai_1
0000e944 g       .text	00000000 .hidden __mspabi_srll_10
0000e8f0 g       .text	00000000 .hidden __mspabi_srli_10
0000e8a6 g       .text	00000000 .hidden __mspabi_sral_10
0000e896 g       .text	00000000 .hidden __mspabi_sral_14
0000e16c g     F .text	00000054 INT_uart_rx
0000e8dc g       .text	00000000 .hidden __mspabi_srli_15
0000e990 g     F .text	00000038 memmove
0000e908 g       .text	00000000 .hidden __mspabi_srli_4
0000e78a g     F .text	00000040 .hidden udivmodhi4
0000e8aa g       .text	00000000 .hidden __mspabi_sral_9
0000e8fc g       .text	00000000 .hidden __mspabi_srli_7
0000e956 g       .text	00000000 .hidden __mspabi_srll_7
0000e96e g       .text	00000000 .hidden __mspabi_srll_3
0000e596 g     F .text	000001f4 cprintf
0000e8b6 g       .text	00000000 .hidden __mspabi_sral_6
0000e8ca g       .text	00000000 .hidden __mspabi_sral_1
0000e85a g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e868 g       .text	00000000 .hidden __mspabi_srai_15
0000e1e8 g     F .text	00000018 cput_nibble
0000ea14 g     O .text	00000000 .hidden __TMC_END__
0000e932 g       .text	00000000 .hidden __mspabi_srll_13
0000e026 g     O .rodata	00000000 .hidden __DTOR_END__
0000e01c g       .rodata	00000000 __fini_array_end
0000e8e8 g       .text	00000000 .hidden __mspabi_srli_12
0000e882 g       .text	00000000 .hidden __mspabi_srai_2
0000e880 g       .text	00000000 .hidden __mspabi_srai_3
0000e028 g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e02c g     F .text	0000000e __crt0_init_bss
00000013 g       *ABS*	00000000 __bsssize
0000e872 g       .text	00000000 .hidden __mspabi_srai_10
0000e816 g     F .text	00000032 .hidden __mspabi_remi
0000e04e g     F .text	0000000a __crt0_call_init_then_main
0000e864 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e23e g     F .text	00000050 cput_binary_byte
0000e860 g       .text	00000000 .hidden __mspabi_func_epilog_3
0000e962 g       .text	00000000 .hidden __mspabi_srll_5
0000e920 g       .text	00000000 .hidden __mspabi_srli
0000e304 g     F .text	000000f8 cput_hex_long
0000e93e g       .text	00000000 .hidden __mspabi_srll_11
0000e904 g       .text	00000000 .hidden __mspabi_srli_5
00000214 g     O .bss	00000001 rxdata
00000000  w      *UND*	00000000 __deregister_frame_info
00000216 g       .noinit	00000000 end
0000e8a2 g       .text	00000000 .hidden __mspabi_sral_11
0000e892 g       .text	00000000 .hidden __mspabi_sral_15
0000e878 g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e200 g     F .text	0000003e cput_hex_byte
0000e850 g     F .text	00000008 .hidden __mspabi_remu
0000e95c g       .text	00000000 .hidden __mspabi_srll_6
0000e8be g       .text	00000000 .hidden __mspabi_sral_4
0000e028 g       .text	00000000 _start
0000e28e g     F .text	00000076 cput_hex_word
0000e074 g     F .text	00000000 _msp430_run_fini_array
0000e914 g       .text	00000000 .hidden __mspabi_srli_1
0000e92c g       .text	00000000 .hidden __mspabi_srll_14
0000e88c g       .text	00000000 .hidden __mspabi_srai
0000e86e g       .text	00000000 .hidden __mspabi_srai_12
0000e8e0 g       .text	00000000 .hidden __mspabi_srli_14
00000002 g       *ABS*	00000000 __romdatacopysize
0000e8b2 g       .text	00000000 .hidden __mspabi_sral_7
0000e876 g       .text	00000000 .hidden __mspabi_srai_8
0000e8ec g       .text	00000000 .hidden __mspabi_srli_11
0000e4d0 g     F .text	000000c6 cput_number
0000e8c6 g       .text	00000000 .hidden __mspabi_sral_2
0000e3fc g     F .text	00000088 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e01c g       .rodata	00000000 __fini_array_start
0000e7ca g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000e9f8 g       .text	00000000 __msp430_init
0000e9c8 g     F .text	00000014 memset
0000e1c0 g     F .text	00000028 main
0000e874 g       .text	00000000 .hidden __mspabi_srai_9
0000e870 g       .text	00000000 .hidden __mspabi_srai_11
0000e968 g       .text	00000000 .hidden __mspabi_srll_4
0000e01c g       .rodata	00000000 __init_array_end
0000e910 g       .text	00000000 .hidden __mspabi_srli_2
0000e8d6 g       .text	00000000 .hidden __mspabi_sral
0000e848 g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
00000000  w      *ABS*	00000000 __rom_highdatastart
0000ea14 g       .text	00000000 __msp430_fini_end
0000e8ae g       .text	00000000 .hidden __mspabi_sral_8
0000e89a g       .text	00000000 .hidden __mspabi_sral_13
0000e146 g     F .text	00000014 delay
0000e938 g       .text	00000000 .hidden __mspabi_srll_12
0000ea14 g       *ABS*	00000000 __romdatastart
0000e87e g       .text	00000000 .hidden __mspabi_srai_4
0000e058 g     F .text	00000000 _msp430_run_init_array
0000e900 g       .text	00000000 .hidden __mspabi_srli_6
0000e01c g       .rodata	00000000 __preinit_array_end
0000e90c g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00000202 g       .bss	00000000 __bssstart
0000e85c g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e86a g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .MP430.attributes	00000000 __stack
0000e94a g       .text	00000000 .hidden __mspabi_srll_9
0000e8c2 g       .text	00000000 .hidden __mspabi_sral_3
00000202 g       .data	00000000 _edata
0000e89e g       .text	00000000 .hidden __mspabi_sral_12
0000ea0a g       .text	00000000 __msp430_init_end
0000e15a g     F .text	00000012 tty_putc
0000e98a g       .text	00000000 .hidden __mspabi_srll
0000e484 g     F .text	0000004c cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000e926 g       .text	00000000 .hidden __mspabi_srll_15
0000e01c g       .rodata	00000000 __init_array_start
0000e87c g       .text	00000000 .hidden __mspabi_srai_5
0000e86c g       .text	00000000 .hidden __mspabi_srai_13
0000e8e4 g       .text	00000000 .hidden __mspabi_srli_13
00000200 g       .data	00000000 __datastart
0000e950 g       .text	00000000 .hidden __mspabi_srll_8
0000e97a g       .text	00000000 .hidden __mspabi_srll_1
0000e01c g       .rodata	00000000 __preinit_array_start
0000e03a g     F .text	00000014 __crt0_movedata
0000e862 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e8ba g       .text	00000000 .hidden __mspabi_sral_5
0000e066 g     F .text	00000000 _msp430_run_preinit_array
0000e858 g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e85e g       .text	00000000 .hidden __mspabi_func_epilog_4
0000e974 g       .text	00000000 .hidden __mspabi_srll_2
0000ea0a g       .text	00000000 __msp430_fini
0000e8f8 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_8:

0000ffee <__interrupt_vector_8>:
    ffee:	6c e1       	interrupt service routine at 0xe16c

Disassembly of section .text:

0000e028 <__crt0_start>:
    e028:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e02c <__crt0_init_bss>:
    e02c:	3c 40 02 02 	mov	#514,	r12	;#0x0202

0000e030 <.Loc.74.1>:
    e030:	0d 43       	clr	r13		;

0000e032 <.Loc.75.1>:
    e032:	3e 40 13 00 	mov	#19,	r14	;#0x0013

0000e036 <.Loc.79.1>:
    e036:	b0 12 c8 e9 	call	#59848		;#0xe9c8

0000e03a <__crt0_movedata>:
    e03a:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e03e <.Loc.116.1>:
    e03e:	3d 40 14 ea 	mov	#59924,	r13	;#0xea14

0000e042 <.Loc.119.1>:
    e042:	0d 9c       	cmp	r12,	r13	;

0000e044 <.Loc.120.1>:
    e044:	04 24       	jz	$+10     	;abs 0xe04e

0000e046 <.Loc.122.1>:
    e046:	3e 40 02 00 	mov	#2,	r14	;

0000e04a <.Loc.124.1>:
    e04a:	b0 12 90 e9 	call	#59792		;#0xe990

0000e04e <__crt0_call_init_then_main>:
    e04e:	b0 12 f8 e9 	call	#59896		;#0xe9f8

0000e052 <.Loc.196.1>:
    e052:	0c 43       	clr	r12		;

0000e054 <.Loc.197.1>:
    e054:	b0 12 c0 e1 	call	#57792		;#0xe1c0

0000e058 <_msp430_run_init_array>:
    e058:	34 40 1c e0 	mov	#57372,	r4	;#0xe01c

0000e05c <.Loc.224.1>:
    e05c:	35 40 1c e0 	mov	#57372,	r5	;#0xe01c

0000e060 <.Loc.225.1>:
    e060:	26 43       	mov	#2,	r6	;r3 As==10

0000e062 <.Loc.226.1>:
    e062:	30 40 84 e0 	br	#0xe084		;

0000e066 <_msp430_run_preinit_array>:
    e066:	34 40 1c e0 	mov	#57372,	r4	;#0xe01c

0000e06a <.Loc.232.1>:
    e06a:	35 40 1c e0 	mov	#57372,	r5	;#0xe01c

0000e06e <.Loc.233.1>:
    e06e:	26 43       	mov	#2,	r6	;r3 As==10

0000e070 <.Loc.234.1>:
    e070:	30 40 84 e0 	br	#0xe084		;

0000e074 <_msp430_run_fini_array>:
    e074:	34 40 1c e0 	mov	#57372,	r4	;#0xe01c

0000e078 <.Loc.240.1>:
    e078:	35 40 1c e0 	mov	#57372,	r5	;#0xe01c

0000e07c <.Loc.241.1>:
    e07c:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e080 <.Loc.242.1>:
    e080:	30 40 84 e0 	br	#0xe084		;

0000e084 <_msp430_run_array>:
    e084:	05 94       	cmp	r4,	r5	;

0000e086 <.Loc.246.1>:
    e086:	05 24       	jz	$+12     	;abs 0xe092

0000e088 <.Loc.247.1>:
    e088:	27 44       	mov	@r4,	r7	;

0000e08a <.Loc.248.1>:
    e08a:	04 56       	add	r6,	r4	;

0000e08c <.Loc.249.1>:
    e08c:	a7 12       	call	@r7		;

0000e08e <.Loc.250.1>:
    e08e:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe084

0000e092 <_msp430_run_done>:
    e092:	30 41       	ret			

0000e094 <L0>:
    e094:	30 41       	ret			
    e096:	30 41       	ret			

0000e098 <deregister_tm_clones>:
    e098:	3c 40 14 ea 	mov	#59924,	r12	;#0xea14
    e09c:	3c 90 14 ea 	cmp	#59924,	r12	;#0xea14
    e0a0:	07 24       	jz	$+16     	;abs 0xe0b0
    e0a2:	3d 40 00 00 	mov	#0,	r13	;
    e0a6:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0a8:	03 24       	jz	$+8      	;abs 0xe0b0
    e0aa:	3c 40 14 ea 	mov	#59924,	r12	;#0xea14
    e0ae:	8d 12       	call	r13		;

0000e0b0 <.L1>:
    e0b0:	30 41       	ret			

0000e0b2 <register_tm_clones>:
    e0b2:	0a 12       	push	r10		;
    e0b4:	3a 40 14 ea 	mov	#59924,	r10	;#0xea14
    e0b8:	3a 80 14 ea 	sub	#59924,	r10	;#0xea14
    e0bc:	0a 11       	rra	r10		;
    e0be:	0c 4a       	mov	r10,	r12	;
    e0c0:	b0 12 dc e8 	call	#59612		;#0xe8dc
    e0c4:	0c 5a       	add	r10,	r12	;
    e0c6:	0d 4c       	mov	r12,	r13	;
    e0c8:	0d 11       	rra	r13		;
    e0ca:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0cc:	07 24       	jz	$+16     	;abs 0xe0dc
    e0ce:	3e 40 00 00 	mov	#0,	r14	;
    e0d2:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0d4:	03 24       	jz	$+8      	;abs 0xe0dc
    e0d6:	3c 40 14 ea 	mov	#59924,	r12	;#0xea14
    e0da:	8e 12       	call	r14		;

0000e0dc <.L9>:
    e0dc:	3a 41       	pop	r10		;
    e0de:	30 41       	ret			

0000e0e0 <__do_global_dtors_aux>:
    e0e0:	0a 12       	push	r10		;
    e0e2:	09 12       	push	r9		;
    e0e4:	c2 93 02 02 	cmp.b	#0,	&0x0202	;r3 As==00
    e0e8:	17 20       	jnz	$+48     	;abs 0xe118
    e0ea:	3a 40 26 e0 	mov	#57382,	r10	;#0xe026
    e0ee:	3a 80 24 e0 	sub	#57380,	r10	;#0xe024
    e0f2:	0a 11       	rra	r10		;
    e0f4:	3a 53       	add	#-1,	r10	;r3 As==11
    e0f6:	39 40 24 e0 	mov	#57380,	r9	;#0xe024

0000e0fa <.L19>:
    e0fa:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    e0fe:	0c 9a       	cmp	r10,	r12	;
    e100:	0d 28       	jnc	$+28     	;abs 0xe11c
    e102:	b0 12 98 e0 	call	#57496		;#0xe098
    e106:	3d 40 00 00 	mov	#0,	r13	;
    e10a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e10c:	03 24       	jz	$+8      	;abs 0xe114
    e10e:	3c 40 18 e0 	mov	#57368,	r12	;#0xe018
    e112:	8d 12       	call	r13		;

0000e114 <.L21>:
    e114:	d2 43 02 02 	mov.b	#1,	&0x0202	;r3 As==01

0000e118 <.L17>:
    e118:	30 40 62 e8 	br	#0xe862		;

0000e11c <.L20>:
    e11c:	1c 53       	inc	r12		;
    e11e:	82 4c 04 02 	mov	r12,	&0x0204	;
    e122:	0c 5c       	rla	r12		;
    e124:	0c 59       	add	r9,	r12	;
    e126:	2c 4c       	mov	@r12,	r12	;
    e128:	8c 12       	call	r12		;
    e12a:	30 40 fa e0 	br	#0xe0fa		;

0000e12e <call___do_global_dtors_aux>:
    e12e:	3e 40 00 00 	mov	#0,	r14	;
    e132:	0e 93       	cmp	#0,	r14	;r3 As==00
    e134:	05 24       	jz	$+12     	;abs 0xe140
    e136:	3d 40 06 02 	mov	#518,	r13	;#0x0206
    e13a:	3c 40 18 e0 	mov	#57368,	r12	;#0xe018
    e13e:	8e 12       	call	r14		;

0000e140 <.L27>:
    e140:	b0 12 b2 e0 	call	#57522		;#0xe0b2
    e144:	30 41       	ret			

0000e146 <delay>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e146:	0d 4c       	mov	r12,	r13	;
    e148:	3d 53       	add	#-1,	r13	;r3 As==11

0000e14a <.LVL1>:
    e14a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e14c:	05 24       	jz	$+12     	;abs 0xe158

0000e14e <.L3>:
      __nop();
    e14e:	03 43       	nop			

0000e150 <.Loc.13.1>:
      __nop();
    e150:	03 43       	nop			

0000e152 <.Loc.11.1>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e152:	3d 53       	add	#-1,	r13	;r3 As==11
    e154:	3d 93       	cmp	#-1,	r13	;r3 As==11
    e156:	fb 23       	jnz	$-8      	;abs 0xe14e

0000e158 <.L1>:
      __nop();
      __nop();
   }
}
    e158:	30 41       	ret			

0000e15a <tty_putc>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e15a:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

0000e15e <.L10>:
    e15e:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    e162:	fd 23       	jnz	$-4      	;abs 0xe15e

0000e164 <.Loc.27.1>:

  // Write the output character
  UART_TXD = txdata;
    e164:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e168 <.Loc.30.1>:

  return 0;
}
    e168:	4c 43       	clr.b	r12		;

0000e16a <.LVL4>:
    e16a:	30 41       	ret			

0000e16c <INT_uart_rx>:
//         (receive a byte from the UART)           //
//--------------------------------------------------//
volatile char rxdata;

// wakeup interrupt (8) INT_uart_rx(void) {
interrupt (8) INT_uart_rx(void) {
    e16c:	0f 12       	push	r15		;

0000e16e <.LCFI0>:
    e16e:	0e 12       	push	r14		;

0000e170 <.LCFI1>:
    e170:	0d 12       	push	r13		;

0000e172 <.LCFI2>:
    e172:	0c 12       	push	r12		;

0000e174 <.LCFI3>:
    e174:	0b 12       	push	r11		;

0000e176 <.LCFI4>:
    e176:	0a 12       	push	r10		;

0000e178 <.LCFI5>:
    e178:	09 12       	push	r9		;

0000e17a <.LCFI6>:
    e17a:	08 12       	push	r8		;

0000e17c <.LCFI7>:
    e17c:	07 12       	push	r7		;

0000e17e <.LCFI8>:
    e17e:	06 12       	push	r6		;

0000e180 <.LCFI9>:
    e180:	05 12       	push	r5		;

0000e182 <.LCFI10>:
    e182:	04 12       	push	r4		;

0000e184 <.LCFI11>:
    e184:	21 82       	sub	#4,	r1	;r2 As==10

0000e186 <.LCFI12>:
  // Read the received data
  rxdata = UART_RXD;
    e186:	d2 42 85 00 	mov.b	&0x0085,&0x0214	;0x0085
    e18a:	14 02 

0000e18c <.Loc.44.1>:

  // Clear the receive pending flag
  UART_STAT = UART_RX_PND;
    e18c:	f2 40 10 00 	mov.b	#16,	&0x0081	;#0x0010
    e190:	81 00 

0000e192 <.Loc.46.1>:

  cprintf("%c", rxdata);
    e192:	5c 42 14 02 	mov.b	&0x0214,r12	;0x0214
    e196:	81 4c 02 00 	mov	r12,	2(r1)	;
    e19a:	b1 40 00 e0 	mov	#57344,	0(r1)	;#0xe000
    e19e:	00 00 
    e1a0:	b0 12 96 e5 	call	#58774		;#0xe596

0000e1a4 <.LVL5>:
  // // Exit the low power mode
  // LPM0_EXIT;
}
    e1a4:	21 52       	add	#4,	r1	;r2 As==10
    e1a6:	34 41       	pop	r4		;
    e1a8:	35 41       	pop	r5		;
    e1aa:	36 41       	pop	r6		;
    e1ac:	37 41       	pop	r7		;
    e1ae:	38 41       	pop	r8		;
    e1b0:	39 41       	pop	r9		;
    e1b2:	3a 41       	pop	r10		;
    e1b4:	3b 41       	pop	r11		;
    e1b6:	3c 41       	pop	r12		;
    e1b8:	3d 41       	pop	r13		;
    e1ba:	3e 41       	pop	r14		;
    e1bc:	3f 41       	pop	r15		;
    e1be:	00 13       	reti			

0000e1c0 <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e1c0:	21 83       	decd	r1		;

0000e1c2 <.LCFI13>:
    char buf[40];
    int led = 0;
//    int *key;
//    key = (void *)0xfee0; 

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e1c2:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    e1c6:	20 01 

0000e1c8 <.Loc.73.1>:


    UART_BAUD = BAUD;                   // Init UART
    e1c8:	b2 40 11 04 	mov	#1041,	&0x0082	;#0x0411
    e1cc:	82 00 

0000e1ce <.Loc.74.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e1ce:	f2 40 11 00 	mov.b	#17,	&0x0080	;#0x0011
    e1d2:	80 00 

0000e1d4 <.Loc.76.1>:

    cprintf("> ");
    e1d4:	b1 40 03 e0 	mov	#57347,	0(r1)	;#0xe003
    e1d8:	00 00 
    e1da:	b0 12 96 e5 	call	#58774		;#0xe596

0000e1de <.LVL7>:

    enable_interrupts();                  // Enable interrupts
    e1de:	03 43       	nop			
    e1e0:	32 d2       	eint			
    e1e2:	03 43       	nop			

0000e1e4 <.L14>:
    e1e4:	30 40 e4 e1 	br	#0xe1e4		;

0000e1e8 <cput_nibble>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e1e8:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f

0000e1ec <.LVL1>:
    e1ec:	5d 4c 06 e0 	mov.b	-8186(r12),r13	;0xffffe006

0000e1f0 <.LBB120>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e1f0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e1f4 <.L2>:
    e1f4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e1f8:	fd 23       	jnz	$-4      	;abs 0xe1f4

0000e1fa <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e1fa:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e1fe <.LBE120>:

void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
}
    e1fe:	30 41       	ret			

0000e200 <cput_hex_byte>:

void
cput_hex_byte (int n)
{
    e200:	0a 12       	push	r10		;

0000e202 <.LCFI0>:
    e202:	09 12       	push	r9		;

0000e204 <.LCFI1>:
    e204:	09 4c       	mov	r12,	r9	;

0000e206 <.LBB122>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e206:	3a 40 06 e0 	mov	#57350,	r10	;#0xe006

0000e20a <.LBE122>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e20a:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e20e <.LBB127>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e20e:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e212:	0c 5a       	add	r10,	r12	;
    e214:	6d 4c       	mov.b	@r12,	r13	;

0000e216 <.LBB124>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e216:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e21a <.L6>:
    e21a:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e21e:	fd 23       	jnz	$-4      	;abs 0xe21a

0000e220 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e220:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e224 <.LBB128>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e224:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e228 <.LVL9>:
    e228:	0a 59       	add	r9,	r10	;
    e22a:	6d 4a       	mov.b	@r10,	r13	;

0000e22c <.LBB130>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e22c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e230 <.L7>:
    e230:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e234:	fd 23       	jnz	$-4      	;abs 0xe230

0000e236 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e236:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e23a <.LBE128>:
void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
  cput_nibble (n);
}
    e23a:	30 40 62 e8 	br	#0xe862		;

0000e23e <cput_binary_byte>:

void
cput_binary_byte (int n)
{
    e23e:	0a 12       	push	r10		;

0000e240 <.LCFI2>:
    e240:	09 12       	push	r9		;

0000e242 <.LCFI3>:
    e242:	08 12       	push	r8		;

0000e244 <.LCFI4>:
    e244:	07 12       	push	r7		;

0000e246 <.LCFI5>:
    e246:	06 12       	push	r6		;

0000e248 <.LCFI6>:
    e248:	05 12       	push	r5		;

0000e24a <.LCFI7>:
    e24a:	07 4c       	mov	r12,	r7	;

0000e24c <.LVL13>:
  int i;
  for (i=7; i>=0; i--)
    e24c:	79 40 07 00 	mov.b	#7,	r9	;
    e250:	75 40 30 00 	mov.b	#48,	r5	;#0x0030

0000e254 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e254:	76 40 31 00 	mov.b	#49,	r6	;#0x0031

0000e258 <.LBB132>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e258:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e25c <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e25c:	78 40 84 00 	mov.b	#132,	r8	;#0x0084

0000e260 <.L13>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e260:	0c 47       	mov	r7,	r12	;
    e262:	0d 49       	mov	r9,	r13	;
    e264:	b0 12 8c e8 	call	#59532		;#0xe88c
    e268:	1c b3       	bit	#1,	r12	;r3 As==01
    e26a:	0b 24       	jz	$+24     	;abs 0xe282
    e26c:	0c 46       	mov	r6,	r12	;

0000e26e <.L12>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e26e:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e272:	fd 23       	jnz	$-4      	;abs 0xe26e

0000e274 <.L17>:

  // Write the output character
  UART_TXD = txdata;
    e274:	c8 4c 00 00 	mov.b	r12,	0(r8)	;

0000e278 <.LBE136>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e278:	39 53       	add	#-1,	r9	;r3 As==11
    e27a:	39 93       	cmp	#-1,	r9	;r3 As==11
    e27c:	f1 23       	jnz	$-28     	;abs 0xe260

0000e27e <.Loc.45.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e27e:	30 40 5a e8 	br	#0xe85a		;

0000e282 <.L14>:
    e282:	0c 45       	mov	r5,	r12	;

0000e284 <.LBB137>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e284:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e288:	f2 23       	jnz	$-26     	;abs 0xe26e
    e28a:	30 40 74 e2 	br	#0xe274		;

0000e28e <cput_hex_word>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}

void
cput_hex_word (int n)
{
    e28e:	0a 12       	push	r10		;

0000e290 <.LCFI8>:
    e290:	09 12       	push	r9		;

0000e292 <.LCFI9>:
    e292:	08 12       	push	r8		;

0000e294 <.LCFI10>:
    e294:	09 4c       	mov	r12,	r9	;

0000e296 <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e296:	b0 12 76 e8 	call	#59510		;#0xe876

0000e29a <.LVL18>:
    e29a:	08 4c       	mov	r12,	r8	;

0000e29c <.LBB138>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e29c:	3a 40 06 e0 	mov	#57350,	r10	;#0xe006
    e2a0:	0c 49       	mov	r9,	r12	;
    e2a2:	b0 12 e8 e8 	call	#59624		;#0xe8e8
    e2a6:	0c 5a       	add	r10,	r12	;
    e2a8:	6d 4c       	mov.b	@r12,	r13	;

0000e2aa <.LBB141>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2aa:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2ae <.L19>:
    e2ae:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2b2:	fd 23       	jnz	$-4      	;abs 0xe2ae

0000e2b4 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2b4:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2b8 <.LBB143>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2b8:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e2bc <.LVL23>:
    e2bc:	08 5a       	add	r10,	r8	;
    e2be:	6d 48       	mov.b	@r8,	r13	;

0000e2c0 <.LBB145>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2c0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2c4 <.L20>:
    e2c4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2c8:	fd 23       	jnz	$-4      	;abs 0xe2c4

0000e2ca <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2ca:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2ce <.LBB147>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e2ce:	0c 49       	mov	r9,	r12	;
    e2d0:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e2d4 <.LBB149>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2d4:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2d8:	0c 5a       	add	r10,	r12	;
    e2da:	6d 4c       	mov.b	@r12,	r13	;

0000e2dc <.LBB151>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2dc:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2e0 <.L21>:
    e2e0:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2e4:	fd 23       	jnz	$-4      	;abs 0xe2e0

0000e2e6 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2e6:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2ea <.LBB153>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2ea:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e2ee <.LVL29>:
    e2ee:	0a 59       	add	r9,	r10	;
    e2f0:	6d 4a       	mov.b	@r10,	r13	;

0000e2f2 <.LBB155>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2f2:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2f6 <.L22>:
    e2f6:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2fa:	fd 23       	jnz	$-4      	;abs 0xe2f6

0000e2fc <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2fc:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e300 <.LBE147>:
void
cput_hex_word (int n)
{
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e300:	30 40 60 e8 	br	#0xe860		;

0000e304 <cput_hex_long>:

void
cput_hex_long (long int n)
{
    e304:	0a 12       	push	r10		;

0000e306 <.LCFI11>:
    e306:	09 12       	push	r9		;

0000e308 <.LCFI12>:
    e308:	08 12       	push	r8		;

0000e30a <.LCFI13>:
    e30a:	07 12       	push	r7		;

0000e30c <.LCFI14>:
    e30c:	09 4c       	mov	r12,	r9	;
    e30e:	08 4d       	mov	r13,	r8	;

0000e310 <.Loc.57.1>:
  cput_hex_byte (n >> 24);
    e310:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e314:	b0 12 d6 e8 	call	#59606		;#0xe8d6

0000e318 <.LVL33>:
    e318:	07 4c       	mov	r12,	r7	;

0000e31a <.LBB157>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e31a:	3a 40 06 e0 	mov	#57350,	r10	;#0xe006

0000e31e <.LBE159>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e31e:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e322 <.LBB164>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e322:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e326:	0c 5a       	add	r10,	r12	;
    e328:	6d 4c       	mov.b	@r12,	r13	;

0000e32a <.LBB161>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e32a:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e32e <.L28>:
    e32e:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e332:	fd 23       	jnz	$-4      	;abs 0xe32e

0000e334 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e334:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e338 <.LBB165>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e338:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e33c <.LVL38>:
    e33c:	07 5a       	add	r10,	r7	;
    e33e:	6d 47       	mov.b	@r7,	r13	;

0000e340 <.LBB167>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e340:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e344 <.L29>:
    e344:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e348:	fd 23       	jnz	$-4      	;abs 0xe344

0000e34a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e34a:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e34e <.LBE157>:

void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
    e34e:	0c 49       	mov	r9,	r12	;
    e350:	0d 48       	mov	r8,	r13	;
    e352:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e356:	b0 12 d6 e8 	call	#59606		;#0xe8d6
    e35a:	07 4c       	mov	r12,	r7	;

0000e35c <.LBB169>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e35c:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e360 <.LBB171>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e360:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e364:	0c 5a       	add	r10,	r12	;
    e366:	6d 4c       	mov.b	@r12,	r13	;

0000e368 <.LBB173>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e368:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e36c <.L30>:
    e36c:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e370:	fd 23       	jnz	$-4      	;abs 0xe36c

0000e372 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e372:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e376 <.LBB175>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e376:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e37a <.LVL46>:
    e37a:	07 5a       	add	r10,	r7	;
    e37c:	6d 47       	mov.b	@r7,	r13	;

0000e37e <.LBB177>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e37e:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e382 <.L31>:
    e382:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e386:	fd 23       	jnz	$-4      	;abs 0xe382

0000e388 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e388:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e38c <.LBE169>:
void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
    e38c:	0c 49       	mov	r9,	r12	;
    e38e:	0d 48       	mov	r8,	r13	;
    e390:	b0 12 ae e8 	call	#59566		;#0xe8ae
    e394:	08 4c       	mov	r12,	r8	;

0000e396 <.LBB179>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e396:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e39a <.LBB181>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e39a:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e39e:	0c 5a       	add	r10,	r12	;
    e3a0:	6d 4c       	mov.b	@r12,	r13	;

0000e3a2 <.LBB183>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3a2:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3a6 <.L32>:
    e3a6:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3aa:	fd 23       	jnz	$-4      	;abs 0xe3a6

0000e3ac <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3ac:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3b0 <.LBB185>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3b0:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e3b4 <.LVL54>:
    e3b4:	08 5a       	add	r10,	r8	;
    e3b6:	6d 48       	mov.b	@r8,	r13	;

0000e3b8 <.LBB187>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3b8:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3bc <.L33>:
    e3bc:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3c0:	fd 23       	jnz	$-4      	;abs 0xe3bc

0000e3c2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3c2:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3c6 <.LBB189>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e3c6:	0c 49       	mov	r9,	r12	;
    e3c8:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e3cc <.LBB191>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3cc:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e3d0:	0c 5a       	add	r10,	r12	;
    e3d2:	6d 4c       	mov.b	@r12,	r13	;

0000e3d4 <.LBB193>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3d4:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3d8 <.L34>:
    e3d8:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3dc:	fd 23       	jnz	$-4      	;abs 0xe3d8

0000e3de <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3de:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3e2 <.LBB195>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3e2:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e3e6 <.LVL60>:
    e3e6:	0a 59       	add	r9,	r10	;
    e3e8:	6d 4a       	mov.b	@r10,	r13	;

0000e3ea <.LBB197>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3ea:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3ee <.L35>:
    e3ee:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3f2:	fd 23       	jnz	$-4      	;abs 0xe3ee

0000e3f4 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3f4:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3f8 <.LBE189>:
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e3f8:	30 40 5e e8 	br	#0xe85e		;

0000e3fc <cput_hex_block>:

void
cput_hex_block (char *block, int n)
{
    e3fc:	0a 12       	push	r10		;

0000e3fe <.LCFI15>:
    e3fe:	09 12       	push	r9		;

0000e400 <.LCFI16>:
    e400:	08 12       	push	r8		;

0000e402 <.LCFI17>:
    e402:	07 12       	push	r7		;

0000e404 <.LCFI18>:
    e404:	06 12       	push	r6		;

0000e406 <.LCFI19>:
    e406:	05 12       	push	r5		;

0000e408 <.LCFI20>:
    e408:	04 12       	push	r4		;

0000e40a <.LCFI21>:
  int i = 0;
  while (n)
    e40a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e40c:	39 24       	jz	$+116    	;abs 0xe480
    e40e:	3d 53       	add	#-1,	r13	;r3 As==11

0000e410 <.LVL65>:
    e410:	07 4c       	mov	r12,	r7	;
    e412:	07 5d       	add	r13,	r7	;
    e414:	05 4c       	mov	r12,	r5	;
    e416:	38 40 06 e0 	mov	#57350,	r8	;#0xe006

0000e41a <.LBB199>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e41a:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e41e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e41e:	74 40 84 00 	mov.b	#132,	r4	;#0x0084

0000e422 <.LBE199>:
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
      i++;
      if ((i & 7) == 0)
    e422:	16 43       	mov	#1,	r6	;r3 As==01
    e424:	06 8c       	sub	r12,	r6	;

0000e426 <.L51>:
cput_hex_block (char *block, int n)
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
    e426:	69 45       	mov.b	@r5,	r9	;

0000e428 <.LBB214>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e428:	0c 49       	mov	r9,	r12	;
    e42a:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e42e <.LBB208>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e42e:	0c 58       	add	r8,	r12	;
    e430:	6c 4c       	mov.b	@r12,	r12	;

0000e432 <.L46>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e432:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e436:	fd 23       	jnz	$-4      	;abs 0xe432

0000e438 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e438:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e43c <.LBB209>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e43c:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e440 <.LVL71>:
    e440:	09 58       	add	r8,	r9	;
    e442:	6c 49       	mov.b	@r9,	r12	;

0000e444 <.L47>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e444:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e448:	fd 23       	jnz	$-4      	;abs 0xe444

0000e44a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e44a:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e44e <.LBE209>:
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
    e44e:	05 97       	cmp	r7,	r5	;
    e450:	17 24       	jz	$+48     	;abs 0xe480

0000e452 <.LVL74>:
	break;
      i++;
      if ((i & 7) == 0)
    e452:	0c 46       	mov	r6,	r12	;
    e454:	0c 55       	add	r5,	r12	;
    e456:	3c b0 07 00 	bit	#7,	r12	;
    e45a:	09 20       	jnz	$+20     	;abs 0xe46e

0000e45c <.L49>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e45c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e460:	fd 23       	jnz	$-4      	;abs 0xe45c

0000e462 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e462:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e466:	84 00 
    e468:	15 53       	inc	r5		;

0000e46a <.LVL75>:
    e46a:	30 40 26 e4 	br	#0xe426		;

0000e46e <.L48>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e46e:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e472:	fd 23       	jnz	$-4      	;abs 0xe46e

0000e474 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e474:	f2 40 3a 00 	mov.b	#58,	&0x0084	;#0x003a
    e478:	84 00 
    e47a:	15 53       	inc	r5		;

0000e47c <.LVL77>:
    e47c:	30 40 26 e4 	br	#0xe426		;

0000e480 <.L44>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e480:	30 40 58 e8 	br	#0xe858		;

0000e484 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n)
{
    e484:	0a 12       	push	r10		;

0000e486 <.LCFI22>:
    e486:	09 12       	push	r9		;

0000e488 <.LCFI23>:
  int i = 0;
  while (n)
    e488:	0d 93       	cmp	#0,	r13	;r3 As==00
    e48a:	20 24       	jz	$+66     	;abs 0xe4cc
    e48c:	3d 53       	add	#-1,	r13	;r3 As==11

0000e48e <.LVL81>:
}

void
cput_nibble_block (char *block, int n)
{
  int i = 0;
    e48e:	4b 43       	clr.b	r11		;
    e490:	39 40 06 e0 	mov	#57350,	r9	;#0xe006

0000e494 <.LBB219>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e494:	7e 40 81 00 	mov.b	#129,	r14	;#0x0081

0000e498 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e498:	7a 40 84 00 	mov.b	#132,	r10	;#0x0084

0000e49c <.L65>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e49c:	6f 4c       	mov.b	@r12,	r15	;

0000e49e <.LVL83>:
    e49e:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f

0000e4a2 <.LVL84>:
    e4a2:	0f 59       	add	r9,	r15	;
    e4a4:	6f 4f       	mov.b	@r15,	r15	;

0000e4a6 <.L62>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4a6:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e4aa:	fd 23       	jnz	$-4      	;abs 0xe4a6

0000e4ac <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4ac:	ca 4f 00 00 	mov.b	r15,	0(r10)	;

0000e4b0 <.LBE219>:
{
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
    e4b0:	0b 9d       	cmp	r13,	r11	;
    e4b2:	0c 24       	jz	$+26     	;abs 0xe4cc

0000e4b4 <.Loc.89.1>:
	break;
      i++;
    e4b4:	1b 53       	inc	r11		;

0000e4b6 <.LVL87>:
      if ((i & 7) == 0)
    e4b6:	3b b0 07 00 	bit	#7,	r11	;
    e4ba:	f0 23       	jnz	$-30     	;abs 0xe49c

0000e4bc <.L64>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4bc:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e4c0:	fd 23       	jnz	$-4      	;abs 0xe4bc

0000e4c2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4c2:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e4c6:	84 00 
    e4c8:	30 40 9c e4 	br	#0xe49c		;

0000e4cc <.L60>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e4cc:	30 40 62 e8 	br	#0xe862		;

0000e4d0 <cput_number>:

void
cput_number (int n)
{
    e4d0:	0a 12       	push	r10		;

0000e4d2 <.LCFI24>:
    e4d2:	09 12       	push	r9		;

0000e4d4 <.LCFI25>:
    e4d4:	08 12       	push	r8		;

0000e4d6 <.LCFI26>:
    e4d6:	07 12       	push	r7		;

0000e4d8 <.LCFI27>:
    e4d8:	06 12       	push	r6		;

0000e4da <.LCFI28>:
    e4da:	05 12       	push	r5		;

0000e4dc <.LCFI29>:
    e4dc:	04 12       	push	r4		;

0000e4de <.LCFI30>:
    e4de:	31 80 16 00 	sub	#22,	r1	;#0x0016

0000e4e2 <.LCFI31>:
    e4e2:	0a 4c       	mov	r12,	r10	;

0000e4e4 <.LVL90>:
  char buf[20];
  int i = 0;
  if (n < 0)
    e4e4:	0c 93       	cmp	#0,	r12	;r3 As==00
    e4e6:	40 38       	jl	$+130    	;abs 0xe568

0000e4e8 <.Loc.105.1>:
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e4e8:	7c 40 09 00 	mov.b	#9,	r12	;

0000e4ec <.LVL91>:
    e4ec:	0c 9a       	cmp	r10,	r12	;
    e4ee:	4b 34       	jge	$+152    	;abs 0xe586

0000e4f0 <.L84>:
    e4f0:	0c 41       	mov	r1,	r12	;
    e4f2:	2c 53       	incd	r12		;
    e4f4:	81 4c 00 00 	mov	r12,	0(r1)	;
    e4f8:	09 4c       	mov	r12,	r9	;
    e4fa:	5c 43       	mov.b	#1,	r12	;r3 As==01
    e4fc:	0c 89       	sub	r9,	r12	;
    e4fe:	04 4c       	mov	r12,	r4	;
    e500:	35 40 16 e8 	mov	#59414,	r5	;#0xe816
    e504:	36 40 ca e7 	mov	#59338,	r6	;#0xe7ca

0000e508 <.Loc.107.1>:
    {
      buf[i++] = (n%10) + '0';
    e508:	78 40 0a 00 	mov.b	#10,	r8	;#0x000a

0000e50c <.L75>:
    e50c:	07 44       	mov	r4,	r7	;
    e50e:	07 59       	add	r9,	r7	;

0000e510 <.LVL93>:
    e510:	0d 48       	mov	r8,	r13	;
    e512:	0c 4a       	mov	r10,	r12	;
    e514:	85 12       	call	r5		;
    e516:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    e51a:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

0000e51e <.Loc.108.1>:
      n /= 10;
    e51e:	0d 48       	mov	r8,	r13	;
    e520:	0c 4a       	mov	r10,	r12	;
    e522:	86 12       	call	r6		;
    e524:	0a 4c       	mov	r12,	r10	;
    e526:	19 53       	inc	r9		;

0000e528 <.Loc.105.1>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e528:	7c 40 09 00 	mov.b	#9,	r12	;
    e52c:	0c 9a       	cmp	r10,	r12	;
    e52e:	ee 3b       	jl	$-34     	;abs 0xe50c
    e530:	0d 47       	mov	r7,	r13	;
    e532:	1d 53       	inc	r13		;

0000e534 <.L74>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e534:	27 51       	add	@r1,	r7	;

0000e536 <.LVL98>:
    e536:	7a 50 30 00 	add.b	#48,	r10	;#0x0030

0000e53a <.LVL99>:
    e53a:	c7 4a 00 00 	mov.b	r10,	0(r7)	;
    e53e:	3d 53       	add	#-1,	r13	;r3 As==11
    e540:	2d 51       	add	@r1,	r13	;
    e542:	0a 41       	mov	r1,	r10	;
    e544:	1a 53       	inc	r10		;

0000e546 <.LBB227>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e546:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e54a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e54a:	7f 40 84 00 	mov.b	#132,	r15	;#0x0084

0000e54e <.L77>:
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    tty_putc (buf[--i]);
    e54e:	6e 4d       	mov.b	@r13,	r14	;

0000e550 <.L76>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e550:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e554:	fd 23       	jnz	$-4      	;abs 0xe550

0000e556 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e556:	cf 4e 00 00 	mov.b	r14,	0(r15)	;
    e55a:	3d 53       	add	#-1,	r13	;r3 As==11

0000e55c <.LBE230>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e55c:	0a 9d       	cmp	r13,	r10	;
    e55e:	f7 23       	jnz	$-16     	;abs 0xe54e

0000e560 <.Loc.113.1>:
    tty_putc (buf[--i]);
}
    e560:	31 50 16 00 	add	#22,	r1	;#0x0016
    e564:	30 40 58 e8 	br	#0xe858		;

0000e568 <.L83>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e568:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e56c <.L73>:
    e56c:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e570:	fd 23       	jnz	$-4      	;abs 0xe56c

0000e572 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e572:	f2 40 2d 00 	mov.b	#45,	&0x0084	;#0x002d
    e576:	84 00 

0000e578 <.LBE231>:
  char buf[20];
  int i = 0;
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    e578:	4c 43       	clr.b	r12		;
    e57a:	0c 8a       	sub	r10,	r12	;
    e57c:	0a 4c       	mov	r12,	r10	;

0000e57e <.Loc.105.1>:
    }
  while (n > 9)
    e57e:	7c 40 09 00 	mov.b	#9,	r12	;
    e582:	0c 9a       	cmp	r10,	r12	;
    e584:	b5 3b       	jl	$-148    	;abs 0xe4f0

0000e586 <.L78>:
    e586:	5d 43       	mov.b	#1,	r13	;r3 As==01
    e588:	47 43       	clr.b	r7		;
    e58a:	0c 41       	mov	r1,	r12	;
    e58c:	2c 53       	incd	r12		;
    e58e:	81 4c 00 00 	mov	r12,	0(r1)	;
    e592:	30 40 34 e5 	br	#0xe534		;

0000e596 <cprintf>:
    tty_putc (buf[--i]);
}

void
cprintf (const char *fmt, ...)
{
    e596:	0a 12       	push	r10		;

0000e598 <.LCFI32>:
    e598:	09 12       	push	r9		;

0000e59a <.LCFI33>:
    e59a:	08 12       	push	r8		;

0000e59c <.LCFI34>:
    e59c:	07 12       	push	r7		;

0000e59e <.LCFI35>:
    e59e:	06 12       	push	r6		;

0000e5a0 <.LCFI36>:
    e5a0:	05 12       	push	r5		;

0000e5a2 <.LCFI37>:
    e5a2:	04 12       	push	r4		;

0000e5a4 <.LCFI38>:
    e5a4:	19 41 10 00 	mov	16(r1),	r9	;0x00010

0000e5a8 <.Loc.122.1>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e5a8:	08 41       	mov	r1,	r8	;
    e5aa:	38 50 12 00 	add	#18,	r8	;#0x0012

0000e5ae <.LVL106>:

  while (*fmt)
    e5ae:	6c 49       	mov.b	@r9,	r12	;
    e5b0:	0c 93       	cmp	#0,	r12	;r3 As==00
    e5b2:	2c 24       	jz	$+90     	;abs 0xe60c

0000e5b4 <.LBB233>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e5b4:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e5b8 <.L110>:
    e5b8:	04 49       	mov	r9,	r4	;
    e5ba:	14 53       	inc	r4		;

0000e5bc <.LBE233>:

  va_start (v, fmt);

  while (*fmt)
    {
      if (*fmt != '%')
    e5bc:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e5c0:	29 20       	jnz	$+84     	;abs 0xe614

0000e5c2 <.LVL108>:
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e5c2:	5d 49 01 00 	mov.b	1(r9),	r13	;
    e5c6:	29 53       	incd	r9		;
    e5c8:	7d 90 64 00 	cmp.b	#100,	r13	;#0x0064
    e5cc:	d4 24       	jz	$+426    	;abs 0xe776
    e5ce:	7e 40 64 00 	mov.b	#100,	r14	;#0x0064
    e5d2:	4e 9d       	cmp.b	r13,	r14	;
    e5d4:	2f 2c       	jc	$+96     	;abs 0xe634
    e5d6:	7d 90 73 00 	cmp.b	#115,	r13	;#0x0073
    e5da:	c2 24       	jz	$+390    	;abs 0xe760
    e5dc:	7e 40 73 00 	mov.b	#115,	r14	;#0x0073
    e5e0:	4e 9d       	cmp.b	r13,	r14	;
    e5e2:	42 28       	jnc	$+134    	;abs 0xe668
    e5e4:	7d 90 6c 00 	cmp.b	#108,	r13	;#0x006c
    e5e8:	51 24       	jz	$+164    	;abs 0xe68c
    e5ea:	7d 90 6e 00 	cmp.b	#110,	r13	;#0x006e
    e5ee:	1a 20       	jnz	$+54     	;abs 0xe624

0000e5f0 <.Loc.164.1>:
	    s = va_arg (v, char *);
	    i = va_arg (v, int);
	    cput_hex_block (s, i);
	    break;
	  case 'n':
	    s = va_arg (v, char *);
    e5f0:	2c 48       	mov	@r8,	r12	;

0000e5f2 <.Loc.165.1>:
	    i = va_arg (v, int);
    e5f2:	38 50 03 00 	add	#3,	r8	;

0000e5f6 <.LVL109>:
    e5f6:	0d 48       	mov	r8,	r13	;
    e5f8:	1d c3       	bic	#1,	r13	;r3 As==01
    e5fa:	08 4d       	mov	r13,	r8	;

0000e5fc <.LVL110>:
    e5fc:	28 53       	incd	r8		;

0000e5fe <.LVL111>:
	    cput_nibble_block (s, i);
    e5fe:	2d 4d       	mov	@r13,	r13	;
    e600:	b0 12 84 e4 	call	#58500		;#0xe484

0000e604 <.LVL112>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e604:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e608:	0c 93       	cmp	#0,	r12	;r3 As==00
    e60a:	d6 23       	jnz	$-82     	;abs 0xe5b8

0000e60c <.L85>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e60c:	30 40 58 e8 	br	#0xe858		;
    e610:	30 40 8a e7 	br	#0xe78a		;

0000e614 <.L88>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e614:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e618:	fd 23       	jnz	$-4      	;abs 0xe614

0000e61a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e61a:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e61e:	0c 44       	mov	r4,	r12	;
    e620:	04 49       	mov	r9,	r4	;
    e622:	09 4c       	mov	r12,	r9	;

0000e624 <.L89>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e624:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e628:	0c 93       	cmp	#0,	r12	;r3 As==00
    e62a:	c6 23       	jnz	$-114    	;abs 0xe5b8

0000e62c <.Loc.175.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e62c:	30 40 58 e8 	br	#0xe858		;
    e630:	30 40 8a e7 	br	#0xe78a		;

0000e634 <.L130>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e634:	7d 90 42 00 	cmp.b	#66,	r13	;#0x0042
    e638:	6c 24       	jz	$+218    	;abs 0xe712
    e63a:	7e 40 42 00 	mov.b	#66,	r14	;#0x0042
    e63e:	4e 9d       	cmp.b	r13,	r14	;
    e640:	5d 2c       	jc	$+188    	;abs 0xe6fc
    e642:	7d 90 62 00 	cmp.b	#98,	r13	;#0x0062
    e646:	3a 24       	jz	$+118    	;abs 0xe6bc
    e648:	7d 90 63 00 	cmp.b	#99,	r13	;#0x0063
    e64c:	eb 23       	jnz	$-40     	;abs 0xe624

0000e64e <.Loc.135.1>:
	  {
	  case '%':
	    tty_putc ('%');
	    break;
	  case 'c':
	    i = va_arg (v, int);
    e64e:	18 53       	inc	r8		;

0000e650 <.LVL117>:
    e650:	0c 48       	mov	r8,	r12	;
    e652:	1c c3       	bic	#1,	r12	;r3 As==01
    e654:	08 4c       	mov	r12,	r8	;

0000e656 <.LVL118>:
    e656:	28 53       	incd	r8		;

0000e658 <.LVL119>:
    e658:	2c 4c       	mov	@r12,	r12	;

0000e65a <.L103>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e65a:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e65e:	fd 23       	jnz	$-4      	;abs 0xe65a

0000e660 <.L126>:

  // Write the output character
  UART_TXD = txdata;
    e660:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e664:	30 40 24 e6 	br	#0xe624		;

0000e668 <.L98>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e668:	7d 90 77 00 	cmp.b	#119,	r13	;#0x0077
    e66c:	1d 24       	jz	$+60     	;abs 0xe6a8
    e66e:	7d 90 78 00 	cmp.b	#120,	r13	;#0x0078
    e672:	d8 23       	jnz	$-78     	;abs 0xe624

0000e674 <.Loc.159.1>:
	  case 'l':
	    i = va_arg (v, int);
	    cput_hex_long (i);
	    break;
	  case 'x':
	    s = va_arg (v, char *);
    e674:	2c 48       	mov	@r8,	r12	;

0000e676 <.Loc.160.1>:
	    i = va_arg (v, int);
    e676:	38 50 03 00 	add	#3,	r8	;

0000e67a <.LVL122>:
    e67a:	0d 48       	mov	r8,	r13	;
    e67c:	1d c3       	bic	#1,	r13	;r3 As==01
    e67e:	08 4d       	mov	r13,	r8	;

0000e680 <.LVL123>:
    e680:	28 53       	incd	r8		;

0000e682 <.LVL124>:
	    cput_hex_block (s, i);
    e682:	2d 4d       	mov	@r13,	r13	;
    e684:	b0 12 fc e3 	call	#58364		;#0xe3fc

0000e688 <.LVL125>:
	    break;
    e688:	30 40 24 e6 	br	#0xe624		;

0000e68c <.L99>:
	  case 'w':
	    i = va_arg (v, int);
	    cput_hex_word (i);
	    break;
	  case 'l':
	    i = va_arg (v, int);
    e68c:	18 53       	inc	r8		;

0000e68e <.LVL126>:
    e68e:	0c 48       	mov	r8,	r12	;
    e690:	1c c3       	bic	#1,	r12	;r3 As==01
    e692:	08 4c       	mov	r12,	r8	;

0000e694 <.LVL127>:
    e694:	28 53       	incd	r8		;

0000e696 <.LVL128>:
	    cput_hex_long (i);
    e696:	2c 4c       	mov	@r12,	r12	;
    e698:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e69c:	0d 7d       	subc	r13,	r13	;
    e69e:	3d e3       	inv	r13		;
    e6a0:	b0 12 04 e3 	call	#58116		;#0xe304

0000e6a4 <.LVL129>:
	    break;
    e6a4:	30 40 24 e6 	br	#0xe624		;

0000e6a8 <.L101>:
	  case 'B':
	    i = va_arg (v, int);
	    cput_binary_byte (i);
	    break;
	  case 'w':
	    i = va_arg (v, int);
    e6a8:	18 53       	inc	r8		;

0000e6aa <.LVL130>:
    e6aa:	0c 48       	mov	r8,	r12	;
    e6ac:	1c c3       	bic	#1,	r12	;r3 As==01
    e6ae:	08 4c       	mov	r12,	r8	;

0000e6b0 <.LVL131>:
    e6b0:	28 53       	incd	r8		;

0000e6b2 <.LVL132>:
	    cput_hex_word (i);
    e6b2:	2c 4c       	mov	@r12,	r12	;
    e6b4:	b0 12 8e e2 	call	#57998		;#0xe28e

0000e6b8 <.LVL133>:
	    break;
    e6b8:	30 40 24 e6 	br	#0xe624		;

0000e6bc <.L95>:
	  case 'd':
	    i = va_arg (v, int);
	    cput_number(i);
	    break;
	  case 'b':
	    i = va_arg (v, int);
    e6bc:	18 53       	inc	r8		;

0000e6be <.LVL134>:
    e6be:	0c 48       	mov	r8,	r12	;
    e6c0:	1c c3       	bic	#1,	r12	;r3 As==01
    e6c2:	08 4c       	mov	r12,	r8	;

0000e6c4 <.LVL135>:
    e6c4:	28 53       	incd	r8		;

0000e6c6 <.LVL136>:
    e6c6:	26 4c       	mov	@r12,	r6	;

0000e6c8 <.LBB242>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e6c8:	37 40 06 e0 	mov	#57350,	r7	;#0xe006

0000e6cc <.LBE244>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e6cc:	0c 46       	mov	r6,	r12	;
    e6ce:	b0 12 7e e8 	call	#59518		;#0xe87e

0000e6d2 <.LBB249>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e6d2:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e6d6:	0c 57       	add	r7,	r12	;
    e6d8:	6c 4c       	mov.b	@r12,	r12	;

0000e6da <.L104>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e6da:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e6de:	fd 23       	jnz	$-4      	;abs 0xe6da

0000e6e0 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e6e0:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e6e4 <.LBB250>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e6e4:	76 f0 0f 00 	and.b	#15,	r6	;#0x000f
    e6e8:	07 56       	add	r6,	r7	;
    e6ea:	6c 47       	mov.b	@r7,	r12	;

0000e6ec <.L105>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e6ec:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e6f0:	b7 27       	jz	$-144    	;abs 0xe660
    e6f2:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e6f6:	fa 23       	jnz	$-10     	;abs 0xe6ec
    e6f8:	30 40 60 e6 	br	#0xe660		;

0000e6fc <.L132>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e6fc:	7d 90 25 00 	cmp.b	#37,	r13	;#0x0025
    e700:	91 23       	jnz	$-220    	;abs 0xe624

0000e702 <.L94>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e702:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e706:	fd 23       	jnz	$-4      	;abs 0xe702

0000e708 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e708:	f2 40 25 00 	mov.b	#37,	&0x0084	;#0x0025
    e70c:	84 00 
    e70e:	30 40 24 e6 	br	#0xe624		;

0000e712 <.L92>:
	  case 'b':
	    i = va_arg (v, int);
	    cput_hex_byte (i);
	    break;
	  case 'B':
	    i = va_arg (v, int);
    e712:	18 53       	inc	r8		;

0000e714 <.LVL143>:
    e714:	0c 48       	mov	r8,	r12	;
    e716:	1c c3       	bic	#1,	r12	;r3 As==01
    e718:	08 4c       	mov	r12,	r8	;

0000e71a <.LVL144>:
    e71a:	28 53       	incd	r8		;

0000e71c <.LVL145>:
    e71c:	26 4c       	mov	@r12,	r6	;

0000e71e <.LBB256>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e71e:	75 40 07 00 	mov.b	#7,	r5	;

0000e722 <.LBB258>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);

  // Write the output character
  UART_TXD = txdata;
    e722:	77 40 84 00 	mov.b	#132,	r7	;#0x0084

0000e726 <.LBE258>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e726:	0c 46       	mov	r6,	r12	;
    e728:	0d 45       	mov	r5,	r13	;
    e72a:	b0 12 8c e8 	call	#59532		;#0xe88c
    e72e:	1c b3       	bit	#1,	r12	;r3 As==01
    e730:	10 24       	jz	$+34     	;abs 0xe752

0000e732 <.L133>:
    e732:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031

0000e736 <.L107>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e736:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e73a:	fd 23       	jnz	$-4      	;abs 0xe736

0000e73c <.L134>:

  // Write the output character
  UART_TXD = txdata;
    e73c:	c7 4c 00 00 	mov.b	r12,	0(r7)	;

0000e740 <.LBE262>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e740:	35 53       	add	#-1,	r5	;r3 As==11
    e742:	35 93       	cmp	#-1,	r5	;r3 As==11
    e744:	6f 27       	jz	$-288    	;abs 0xe624

0000e746 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e746:	0c 46       	mov	r6,	r12	;
    e748:	0d 45       	mov	r5,	r13	;
    e74a:	b0 12 8c e8 	call	#59532		;#0xe88c
    e74e:	1c b3       	bit	#1,	r12	;r3 As==01
    e750:	f0 23       	jnz	$-30     	;abs 0xe732

0000e752 <.L111>:
    e752:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e756 <.LBB263>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e756:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e75a:	ed 23       	jnz	$-36     	;abs 0xe736
    e75c:	30 40 3c e7 	br	#0xe73c		;

0000e760 <.L97>:
	    i = va_arg (v, int);
	    cput_nibble_block (s, i);
	    break;
	  case 's':
	    s = va_arg (v, char *);
	    tty_putc (s[0]);
    e760:	2c 48       	mov	@r8,	r12	;
    e762:	28 53       	incd	r8		;

0000e764 <.LVL152>:
    e764:	6c 4c       	mov.b	@r12,	r12	;

0000e766 <.L109>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e766:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e76a:	7a 27       	jz	$-266    	;abs 0xe660
    e76c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e770:	fa 23       	jnz	$-10     	;abs 0xe766
    e772:	30 40 60 e6 	br	#0xe660		;

0000e776 <.L90>:
	  case 'c':
	    i = va_arg (v, int);
	    tty_putc(i);
	    break;
	  case 'd':
	    i = va_arg (v, int);
    e776:	18 53       	inc	r8		;

0000e778 <.LVL155>:
    e778:	0c 48       	mov	r8,	r12	;
    e77a:	1c c3       	bic	#1,	r12	;r3 As==01
    e77c:	08 4c       	mov	r12,	r8	;

0000e77e <.LVL156>:
    e77e:	28 53       	incd	r8		;

0000e780 <.LVL157>:
	    cput_number(i);
    e780:	2c 4c       	mov	@r12,	r12	;
    e782:	b0 12 d0 e4 	call	#58576		;#0xe4d0

0000e786 <.LVL158>:
	    break;
    e786:	30 40 24 e6 	br	#0xe624		;

0000e78a <udivmodhi4>:
    e78a:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e78e <.Loc.35.1>:
    e78e:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e790 <.L2>:
    e790:	0d 9c       	cmp	r12,	r13	;
    e792:	08 28       	jnc	$+18     	;abs 0xe7a4

0000e794 <.L15>:
    e794:	4f 43       	clr.b	r15		;

0000e796 <.L4>:
    e796:	0b 93       	cmp	#0,	r11	;r3 As==00
    e798:	0e 20       	jnz	$+30     	;abs 0xe7b6

0000e79a <.L5>:
    e79a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e79c:	01 24       	jz	$+4      	;abs 0xe7a0
    e79e:	0f 4c       	mov	r12,	r15	;

0000e7a0 <.L1>:
    e7a0:	0c 4f       	mov	r15,	r12	;
    e7a2:	30 41       	ret			

0000e7a4 <.L3>:
    e7a4:	3f 53       	add	#-1,	r15	;r3 As==11

0000e7a6 <.Loc.38.1>:
    e7a6:	0f 93       	cmp	#0,	r15	;r3 As==00
    e7a8:	f8 27       	jz	$-14     	;abs 0xe79a

0000e7aa <.Loc.38.1>:
    e7aa:	0d 93       	cmp	#0,	r13	;r3 As==00
    e7ac:	f3 3b       	jl	$-24     	;abs 0xe794

0000e7ae <.Loc.40.1>:
    e7ae:	0d 5d       	rla	r13		;

0000e7b0 <.Loc.41.1>:
    e7b0:	0b 5b       	rla	r11		;
    e7b2:	30 40 90 e7 	br	#0xe790		;

0000e7b6 <.L9>:
    e7b6:	0c 9d       	cmp	r13,	r12	;
    e7b8:	02 28       	jnc	$+6      	;abs 0xe7be

0000e7ba <.Loc.47.1>:
    e7ba:	0c 8d       	sub	r13,	r12	;

0000e7bc <.Loc.48.1>:
    e7bc:	0f db       	bis	r11,	r15	;

0000e7be <.L8>:
    e7be:	12 c3       	clrc			
    e7c0:	0b 10       	rrc	r11		;

0000e7c2 <.Loc.51.1>:
    e7c2:	12 c3       	clrc			
    e7c4:	0d 10       	rrc	r13		;
    e7c6:	30 40 96 e7 	br	#0xe796		;

0000e7ca <__mspabi_divi>:
    e7ca:	0a 12       	push	r10		;

0000e7cc <.LCFI0>:
    e7cc:	0f 4c       	mov	r12,	r15	;
    e7ce:	0e 4d       	mov	r13,	r14	;

0000e7d0 <.LVL14>:
    e7d0:	3b 40 8a e7 	mov	#59274,	r11	;#0xe78a

0000e7d4 <.Loc.64.1>:
    e7d4:	0c 93       	cmp	#0,	r12	;r3 As==00
    e7d6:	1a 34       	jge	$+54     	;abs 0xe80c

0000e7d8 <.Loc.66.1>:
    e7d8:	4c 43       	clr.b	r12		;

0000e7da <.LVL15>:
    e7da:	0c 8f       	sub	r15,	r12	;
    e7dc:	0f 4c       	mov	r12,	r15	;

0000e7de <.LVL16>:
    e7de:	0d 93       	cmp	#0,	r13	;r3 As==00
    e7e0:	0d 34       	jge	$+28     	;abs 0xe7fc

0000e7e2 <.Loc.67.1>:
    e7e2:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e7e4 <.L21>:
    e7e4:	0d 43       	clr	r13		;
    e7e6:	0d 8e       	sub	r14,	r13	;

0000e7e8 <.LVL18>:
    e7e8:	4e 43       	clr.b	r14		;

0000e7ea <.LVL19>:
    e7ea:	0c 4f       	mov	r15,	r12	;

0000e7ec <.LVL20>:
    e7ec:	8b 12       	call	r11		;

0000e7ee <.LVL21>:
    e7ee:	1a 93       	cmp	#1,	r10	;r3 As==01
    e7f0:	03 24       	jz	$+8      	;abs 0xe7f8

0000e7f2 <.L20>:
    e7f2:	4d 43       	clr.b	r13		;
    e7f4:	0d 8c       	sub	r12,	r13	;
    e7f6:	0c 4d       	mov	r13,	r12	;

0000e7f8 <.L16>:
    e7f8:	3a 41       	pop	r10		;
    e7fa:	30 41       	ret			

0000e7fc <.L18>:
    e7fc:	4e 43       	clr.b	r14		;
    e7fe:	8b 12       	call	r11		;

0000e800 <.LVL25>:
    e800:	30 40 f2 e7 	br	#0xe7f2		;

0000e804 <.L27>:
    e804:	4e 43       	clr.b	r14		;
    e806:	8b 12       	call	r11		;

0000e808 <.LVL27>:
    e808:	30 40 f8 e7 	br	#0xe7f8		;

0000e80c <.L17>:
    e80c:	0d 93       	cmp	#0,	r13	;r3 As==00
    e80e:	fa 37       	jge	$-10     	;abs 0xe804

0000e810 <.Loc.61.1>:
    e810:	4a 43       	clr.b	r10		;
    e812:	30 40 e4 e7 	br	#0xe7e4		;

0000e816 <__mspabi_remi>:
    e816:	0a 12       	push	r10		;

0000e818 <.LCFI1>:
    e818:	0c 93       	cmp	#0,	r12	;r3 As==00
    e81a:	13 34       	jge	$+40     	;abs 0xe842

0000e81c <.Loc.92.1>:
    e81c:	4e 43       	clr.b	r14		;
    e81e:	0e 8c       	sub	r12,	r14	;
    e820:	0c 4e       	mov	r14,	r12	;

0000e822 <.LVL31>:
    e822:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e824 <.L29>:
    e824:	0d 93       	cmp	#0,	r13	;r3 As==00
    e826:	03 34       	jge	$+8      	;abs 0xe82e
    e828:	4e 43       	clr.b	r14		;
    e82a:	0e 8d       	sub	r13,	r14	;
    e82c:	0d 4e       	mov	r14,	r13	;

0000e82e <.L30>:
    e82e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e830:	b0 12 8a e7 	call	#59274		;#0xe78a

0000e834 <.LVL34>:
    e834:	0a 93       	cmp	#0,	r10	;r3 As==00
    e836:	03 24       	jz	$+8      	;abs 0xe83e

0000e838 <.LVL35>:
    e838:	4d 43       	clr.b	r13		;
    e83a:	0d 8c       	sub	r12,	r13	;
    e83c:	0c 4d       	mov	r13,	r12	;

0000e83e <.L28>:
    e83e:	3a 41       	pop	r10		;
    e840:	30 41       	ret			

0000e842 <.L32>:
    e842:	4a 43       	clr.b	r10		;
    e844:	30 40 24 e8 	br	#0xe824		;

0000e848 <__mspabi_divu>:
    e848:	4e 43       	clr.b	r14		;
    e84a:	b0 12 8a e7 	call	#59274		;#0xe78a

0000e84e <.LVL39>:
    e84e:	30 41       	ret			

0000e850 <__mspabi_remu>:
    e850:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e852:	b0 12 8a e7 	call	#59274		;#0xe78a

0000e856 <.LVL41>:
    e856:	30 41       	ret			

0000e858 <__mspabi_func_epilog_7>:
    e858:	34 41       	pop	r4		;

0000e85a <__mspabi_func_epilog_6>:
    e85a:	35 41       	pop	r5		;

0000e85c <__mspabi_func_epilog_5>:
    e85c:	36 41       	pop	r6		;

0000e85e <__mspabi_func_epilog_4>:
    e85e:	37 41       	pop	r7		;

0000e860 <__mspabi_func_epilog_3>:
    e860:	38 41       	pop	r8		;

0000e862 <__mspabi_func_epilog_2>:
    e862:	39 41       	pop	r9		;

0000e864 <__mspabi_func_epilog_1>:
    e864:	3a 41       	pop	r10		;
    e866:	30 41       	ret			

0000e868 <__mspabi_srai_15>:
    e868:	0c 11       	rra	r12		;

0000e86a <__mspabi_srai_14>:
    e86a:	0c 11       	rra	r12		;

0000e86c <__mspabi_srai_13>:
    e86c:	0c 11       	rra	r12		;

0000e86e <__mspabi_srai_12>:
    e86e:	0c 11       	rra	r12		;

0000e870 <__mspabi_srai_11>:
    e870:	0c 11       	rra	r12		;

0000e872 <__mspabi_srai_10>:
    e872:	0c 11       	rra	r12		;

0000e874 <__mspabi_srai_9>:
    e874:	0c 11       	rra	r12		;

0000e876 <__mspabi_srai_8>:
    e876:	0c 11       	rra	r12		;

0000e878 <__mspabi_srai_7>:
    e878:	0c 11       	rra	r12		;

0000e87a <__mspabi_srai_6>:
    e87a:	0c 11       	rra	r12		;

0000e87c <__mspabi_srai_5>:
    e87c:	0c 11       	rra	r12		;

0000e87e <__mspabi_srai_4>:
    e87e:	0c 11       	rra	r12		;

0000e880 <__mspabi_srai_3>:
    e880:	0c 11       	rra	r12		;

0000e882 <__mspabi_srai_2>:
    e882:	0c 11       	rra	r12		;

0000e884 <__mspabi_srai_1>:
    e884:	0c 11       	rra	r12		;
    e886:	30 41       	ret			

0000e888 <.L11>:
    e888:	3d 53       	add	#-1,	r13	;r3 As==11
    e88a:	0c 11       	rra	r12		;

0000e88c <__mspabi_srai>:
    e88c:	0d 93       	cmp	#0,	r13	;r3 As==00
    e88e:	fc 23       	jnz	$-6      	;abs 0xe888
    e890:	30 41       	ret			

0000e892 <__mspabi_sral_15>:
    e892:	0d 11       	rra	r13		;
    e894:	0c 10       	rrc	r12		;

0000e896 <__mspabi_sral_14>:
    e896:	0d 11       	rra	r13		;
    e898:	0c 10       	rrc	r12		;

0000e89a <__mspabi_sral_13>:
    e89a:	0d 11       	rra	r13		;
    e89c:	0c 10       	rrc	r12		;

0000e89e <__mspabi_sral_12>:
    e89e:	0d 11       	rra	r13		;
    e8a0:	0c 10       	rrc	r12		;

0000e8a2 <__mspabi_sral_11>:
    e8a2:	0d 11       	rra	r13		;
    e8a4:	0c 10       	rrc	r12		;

0000e8a6 <__mspabi_sral_10>:
    e8a6:	0d 11       	rra	r13		;
    e8a8:	0c 10       	rrc	r12		;

0000e8aa <__mspabi_sral_9>:
    e8aa:	0d 11       	rra	r13		;
    e8ac:	0c 10       	rrc	r12		;

0000e8ae <__mspabi_sral_8>:
    e8ae:	0d 11       	rra	r13		;
    e8b0:	0c 10       	rrc	r12		;

0000e8b2 <__mspabi_sral_7>:
    e8b2:	0d 11       	rra	r13		;
    e8b4:	0c 10       	rrc	r12		;

0000e8b6 <__mspabi_sral_6>:
    e8b6:	0d 11       	rra	r13		;
    e8b8:	0c 10       	rrc	r12		;

0000e8ba <__mspabi_sral_5>:
    e8ba:	0d 11       	rra	r13		;
    e8bc:	0c 10       	rrc	r12		;

0000e8be <__mspabi_sral_4>:
    e8be:	0d 11       	rra	r13		;
    e8c0:	0c 10       	rrc	r12		;

0000e8c2 <__mspabi_sral_3>:
    e8c2:	0d 11       	rra	r13		;
    e8c4:	0c 10       	rrc	r12		;

0000e8c6 <__mspabi_sral_2>:
    e8c6:	0d 11       	rra	r13		;
    e8c8:	0c 10       	rrc	r12		;

0000e8ca <__mspabi_sral_1>:
    e8ca:	0d 11       	rra	r13		;
    e8cc:	0c 10       	rrc	r12		;
    e8ce:	30 41       	ret			

0000e8d0 <.L12>:
    e8d0:	3e 53       	add	#-1,	r14	;r3 As==11
    e8d2:	0d 11       	rra	r13		;
    e8d4:	0c 10       	rrc	r12		;

0000e8d6 <__mspabi_sral>:
    e8d6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e8d8:	fb 23       	jnz	$-8      	;abs 0xe8d0
    e8da:	30 41       	ret			

0000e8dc <__mspabi_srli_15>:
    e8dc:	12 c3       	clrc			
    e8de:	0c 10       	rrc	r12		;

0000e8e0 <__mspabi_srli_14>:
    e8e0:	12 c3       	clrc			
    e8e2:	0c 10       	rrc	r12		;

0000e8e4 <__mspabi_srli_13>:
    e8e4:	12 c3       	clrc			
    e8e6:	0c 10       	rrc	r12		;

0000e8e8 <__mspabi_srli_12>:
    e8e8:	12 c3       	clrc			
    e8ea:	0c 10       	rrc	r12		;

0000e8ec <__mspabi_srli_11>:
    e8ec:	12 c3       	clrc			
    e8ee:	0c 10       	rrc	r12		;

0000e8f0 <__mspabi_srli_10>:
    e8f0:	12 c3       	clrc			
    e8f2:	0c 10       	rrc	r12		;

0000e8f4 <__mspabi_srli_9>:
    e8f4:	12 c3       	clrc			
    e8f6:	0c 10       	rrc	r12		;

0000e8f8 <__mspabi_srli_8>:
    e8f8:	12 c3       	clrc			
    e8fa:	0c 10       	rrc	r12		;

0000e8fc <__mspabi_srli_7>:
    e8fc:	12 c3       	clrc			
    e8fe:	0c 10       	rrc	r12		;

0000e900 <__mspabi_srli_6>:
    e900:	12 c3       	clrc			
    e902:	0c 10       	rrc	r12		;

0000e904 <__mspabi_srli_5>:
    e904:	12 c3       	clrc			
    e906:	0c 10       	rrc	r12		;

0000e908 <__mspabi_srli_4>:
    e908:	12 c3       	clrc			
    e90a:	0c 10       	rrc	r12		;

0000e90c <__mspabi_srli_3>:
    e90c:	12 c3       	clrc			
    e90e:	0c 10       	rrc	r12		;

0000e910 <__mspabi_srli_2>:
    e910:	12 c3       	clrc			
    e912:	0c 10       	rrc	r12		;

0000e914 <__mspabi_srli_1>:
    e914:	12 c3       	clrc			
    e916:	0c 10       	rrc	r12		;
    e918:	30 41       	ret			

0000e91a <.L11>:
    e91a:	3d 53       	add	#-1,	r13	;r3 As==11
    e91c:	12 c3       	clrc			
    e91e:	0c 10       	rrc	r12		;

0000e920 <__mspabi_srli>:
    e920:	0d 93       	cmp	#0,	r13	;r3 As==00
    e922:	fb 23       	jnz	$-8      	;abs 0xe91a
    e924:	30 41       	ret			

0000e926 <__mspabi_srll_15>:
    e926:	12 c3       	clrc			
    e928:	0d 10       	rrc	r13		;
    e92a:	0c 10       	rrc	r12		;

0000e92c <__mspabi_srll_14>:
    e92c:	12 c3       	clrc			
    e92e:	0d 10       	rrc	r13		;
    e930:	0c 10       	rrc	r12		;

0000e932 <__mspabi_srll_13>:
    e932:	12 c3       	clrc			
    e934:	0d 10       	rrc	r13		;
    e936:	0c 10       	rrc	r12		;

0000e938 <__mspabi_srll_12>:
    e938:	12 c3       	clrc			
    e93a:	0d 10       	rrc	r13		;
    e93c:	0c 10       	rrc	r12		;

0000e93e <__mspabi_srll_11>:
    e93e:	12 c3       	clrc			
    e940:	0d 10       	rrc	r13		;
    e942:	0c 10       	rrc	r12		;

0000e944 <__mspabi_srll_10>:
    e944:	12 c3       	clrc			
    e946:	0d 10       	rrc	r13		;
    e948:	0c 10       	rrc	r12		;

0000e94a <__mspabi_srll_9>:
    e94a:	12 c3       	clrc			
    e94c:	0d 10       	rrc	r13		;
    e94e:	0c 10       	rrc	r12		;

0000e950 <__mspabi_srll_8>:
    e950:	12 c3       	clrc			
    e952:	0d 10       	rrc	r13		;
    e954:	0c 10       	rrc	r12		;

0000e956 <__mspabi_srll_7>:
    e956:	12 c3       	clrc			
    e958:	0d 10       	rrc	r13		;
    e95a:	0c 10       	rrc	r12		;

0000e95c <__mspabi_srll_6>:
    e95c:	12 c3       	clrc			
    e95e:	0d 10       	rrc	r13		;
    e960:	0c 10       	rrc	r12		;

0000e962 <__mspabi_srll_5>:
    e962:	12 c3       	clrc			
    e964:	0d 10       	rrc	r13		;
    e966:	0c 10       	rrc	r12		;

0000e968 <__mspabi_srll_4>:
    e968:	12 c3       	clrc			
    e96a:	0d 10       	rrc	r13		;
    e96c:	0c 10       	rrc	r12		;

0000e96e <__mspabi_srll_3>:
    e96e:	12 c3       	clrc			
    e970:	0d 10       	rrc	r13		;
    e972:	0c 10       	rrc	r12		;

0000e974 <__mspabi_srll_2>:
    e974:	12 c3       	clrc			
    e976:	0d 10       	rrc	r13		;
    e978:	0c 10       	rrc	r12		;

0000e97a <__mspabi_srll_1>:
    e97a:	12 c3       	clrc			
    e97c:	0d 10       	rrc	r13		;
    e97e:	0c 10       	rrc	r12		;
    e980:	30 41       	ret			

0000e982 <.L12>:
    e982:	3e 53       	add	#-1,	r14	;r3 As==11
    e984:	12 c3       	clrc			
    e986:	0d 10       	rrc	r13		;
    e988:	0c 10       	rrc	r12		;

0000e98a <__mspabi_srll>:
    e98a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e98c:	fa 23       	jnz	$-10     	;abs 0xe982
    e98e:	30 41       	ret			

0000e990 <memmove>:
    e990:	0d 9c       	cmp	r12,	r13	;
    e992:	0a 28       	jnc	$+22     	;abs 0xe9a8

0000e994 <.L5>:
    e994:	0f 4c       	mov	r12,	r15	;
    e996:	0e 5c       	add	r12,	r14	;

0000e998 <.L3>:
    e998:	0e 9f       	cmp	r15,	r14	;
    e99a:	0d 24       	jz	$+28     	;abs 0xe9b6

0000e99c <.LVL3>:
    e99c:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    e9a0:	1f 53       	inc	r15		;

0000e9a2 <.LVL4>:
    e9a2:	1d 53       	inc	r13		;
    e9a4:	30 40 98 e9 	br	#0xe998		;

0000e9a8 <.L2>:
    e9a8:	0f 4d       	mov	r13,	r15	;
    e9aa:	0f 5e       	add	r14,	r15	;
    e9ac:	0c 9f       	cmp	r15,	r12	;
    e9ae:	f2 2f       	jc	$-26     	;abs 0xe994

0000e9b0 <.L4>:
    e9b0:	3e 53       	add	#-1,	r14	;r3 As==11

0000e9b2 <.LVL7>:
    e9b2:	3e 93       	cmp	#-1,	r14	;r3 As==11
    e9b4:	01 20       	jnz	$+4      	;abs 0xe9b8

0000e9b6 <.L10>:
    e9b6:	30 41       	ret			

0000e9b8 <.L6>:
    e9b8:	0b 4c       	mov	r12,	r11	;
    e9ba:	0b 5e       	add	r14,	r11	;
    e9bc:	0f 4d       	mov	r13,	r15	;
    e9be:	0f 5e       	add	r14,	r15	;
    e9c0:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    e9c4:	30 40 b0 e9 	br	#0xe9b0		;

0000e9c8 <memset>:
    e9c8:	0f 4c       	mov	r12,	r15	;
    e9ca:	0e 5c       	add	r12,	r14	;

0000e9cc <.L2>:
    e9cc:	0f 9e       	cmp	r14,	r15	;
    e9ce:	01 20       	jnz	$+4      	;abs 0xe9d2

0000e9d0 <.Loc.104.1>:
    e9d0:	30 41       	ret			

0000e9d2 <.L3>:
    e9d2:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    e9d6:	1f 53       	inc	r15		;

0000e9d8 <.LVL4>:
    e9d8:	30 40 cc e9 	br	#0xe9cc		;

0000e9dc <L0>:
    e9dc:	30 41       	ret			

0000e9de <__do_global_ctors_aux>:
    e9de:	0a 12       	push	r10		;
    e9e0:	3a 40 20 e0 	mov	#57376,	r10	;#0xe020

0000e9e4 <.L2>:
    e9e4:	2c 4a       	mov	@r10,	r12	;
    e9e6:	3c 93       	cmp	#-1,	r12	;r3 As==11
    e9e8:	02 20       	jnz	$+6      	;abs 0xe9ee
    e9ea:	3a 41       	pop	r10		;
    e9ec:	30 41       	ret			

0000e9ee <.L3>:
    e9ee:	8c 12       	call	r12		;
    e9f0:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    e9f4:	30 40 e4 e9 	br	#0xe9e4		;

0000e9f8 <call___do_global_ctors_aux>:
    e9f8:	b0 12 2e e1 	call	#57646		;#0xe12e
    e9fc:	b0 12 de e9 	call	#59870		;#0xe9de

0000ea00 <L0>:
    ea00:	b0 12 66 e0 	call	#57446		;#0xe066

0000ea04 <.Loc.19.1>:
    ea04:	b0 12 58 e0 	call	#57432		;#0xe058

0000ea08 <.Loc.20.1>:
    ea08:	30 41       	ret			

0000ea0a <__msp430_fini>:
    ea0a:	b0 12 74 e0 	call	#57460		;#0xe074

0000ea0e <L0>:
    ea0e:	b0 12 e0 e0 	call	#57568		;#0xe0e0

0000ea12 <L0>:
    ea12:	30 41       	ret			
