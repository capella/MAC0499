
basic_smart.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fee0 l    d  .key	00000000 .key
0000fae0 l    d  .keyfunction	00000000 .keyfunction
0000ffee l    d  __interrupt_vector_8	00000000 __interrupt_vector_8
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e01c l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000214 l    d  .bss	00000000 .bss
00000227 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e078 l       .text	00000000 _msp430_run_array
0000e086 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e014 l     O .rodata	00000000 __CTOR_LIST__
0000e018 l     O .rodata	00000000 __DTOR_LIST__
0000e00c l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000e976 l     O .text	00000000 __TMC_LIST__
0000e08c l     F .text	00000000 deregister_tm_clones
0000e0a6 l     F .text	00000000 register_tm_clones
0000e0d4 l     F .text	00000000 __do_global_dtors_aux
00000214 l     O .bss	00000000 completed.3056
00000216 l     O .bss	00000000 dtor_idx.3058
0000e122 l     F .text	00000000 call___do_global_dtors_aux
0000e122 l     F .text	00000000 frame_dummy
00000218 l     O .bss	00000000 object.3071
0000e13a l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e016 l     O .rodata	00000000 __CTOR_END__
0000e00c l     O .rodata	00000000 __FRAME_END__
0000e940 l     F .text	00000000 __do_global_ctors_aux
0000e95a l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 cprintf.c
00000202 l     O .data	00000011 hex
0000e284 l     F .text	00000028 tty_putc
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e856 g       .text	00000000 .hidden __mspabi_srli_9
0000e7dc g       .text	00000000 .hidden __mspabi_srai_6
0000e7e6 g       .text	00000000 .hidden __mspabi_srai_1
0000e8a6 g       .text	00000000 .hidden __mspabi_srll_10
0000e852 g       .text	00000000 .hidden __mspabi_srli_10
0000e808 g       .text	00000000 .hidden __mspabi_sral_10
0000e7f8 g       .text	00000000 .hidden __mspabi_sral_14
0000e196 g     F .text	0000005e INT_uart_rx
0000e83e g       .text	00000000 .hidden __mspabi_srli_15
0000e8f2 g     F .text	00000038 memmove
0000e86a g       .text	00000000 .hidden __mspabi_srli_4
0000e6ec g     F .text	00000040 .hidden udivmodhi4
0000e80c g       .text	00000000 .hidden __mspabi_sral_9
0000e85e g       .text	00000000 .hidden __mspabi_srli_7
0000e8b8 g       .text	00000000 .hidden __mspabi_srll_7
0000e8d0 g       .text	00000000 .hidden __mspabi_srll_3
0000e4f8 g     F .text	000001f4 cprintf
0000e818 g       .text	00000000 .hidden __mspabi_sral_6
0000e82c g       .text	00000000 .hidden __mspabi_sral_1
0000e7bc g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e7ca g       .text	00000000 .hidden __mspabi_srai_15
0000e2ac g     F .text	0000001a cput_nibble
0000e976 g     O .text	00000000 .hidden __TMC_END__
0000e894 g       .text	00000000 .hidden __mspabi_srll_13
0000e01a g     O .rodata	00000000 .hidden __DTOR_END__
0000e010 g       .rodata	00000000 __fini_array_end
0000e84a g       .text	00000000 .hidden __mspabi_srli_12
0000e7e4 g       .text	00000000 .hidden __mspabi_srai_2
0000e7e2 g       .text	00000000 .hidden __mspabi_srai_3
0000e01c g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e020 g     F .text	0000000e __crt0_init_bss
00000013 g       *ABS*	00000000 __bsssize
0000e7d4 g       .text	00000000 .hidden __mspabi_srai_10
0000e778 g     F .text	00000032 .hidden __mspabi_remi
0000e042 g     F .text	0000000a __crt0_call_init_then_main
0000e7c6 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e2e2 g     F .text	00000040 cput_binary_byte
0000e7c2 g       .text	00000000 .hidden __mspabi_func_epilog_3
0000fae0 g     F .keyfunction	0000027c makehash
0000e8c4 g       .text	00000000 .hidden __mspabi_srll_5
0000e882 g       .text	00000000 .hidden __mspabi_srli
0000e33e g     F .text	0000004c cput_hex_long
0000e8a0 g       .text	00000000 .hidden __mspabi_srll_11
0000e866 g       .text	00000000 .hidden __mspabi_srli_5
00000226 g     O .bss	00000001 rxdata
00000000  w      *UND*	00000000 __deregister_frame_info
00000228 g       .noinit	00000000 end
0000e804 g       .text	00000000 .hidden __mspabi_sral_11
0000e7f4 g       .text	00000000 .hidden __mspabi_sral_15
0000e7da g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e2c6 g     F .text	0000001c cput_hex_byte
0000e7b2 g     F .text	00000008 .hidden __mspabi_remu
0000e8be g       .text	00000000 .hidden __mspabi_srll_6
0000e820 g       .text	00000000 .hidden __mspabi_sral_4
0000e01c g       .text	00000000 _start
0000e322 g     F .text	0000001c cput_hex_word
0000e068 g     F .text	00000000 _msp430_run_fini_array
0000e876 g       .text	00000000 .hidden __mspabi_srli_1
0000e88e g       .text	00000000 .hidden __mspabi_srll_14
0000e7ee g       .text	00000000 .hidden __mspabi_srai
0000e7d0 g       .text	00000000 .hidden __mspabi_srai_12
0000e842 g       .text	00000000 .hidden __mspabi_srli_14
00000014 g       *ABS*	00000000 __romdatacopysize
0000e814 g       .text	00000000 .hidden __mspabi_sral_7
0000e7d8 g       .text	00000000 .hidden __mspabi_srai_8
0000e84e g       .text	00000000 .hidden __mspabi_srli_11
0000e446 g     F .text	000000b2 cput_number
0000e828 g       .text	00000000 .hidden __mspabi_sral_2
0000e38a g     F .text	00000068 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e010 g       .rodata	00000000 __fini_array_start
0000e72c g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000e95a g       .text	00000000 __msp430_init
0000e92a g     F .text	00000014 memset
0000e1f4 g     F .text	00000090 main
0000e7d6 g       .text	00000000 .hidden __mspabi_srai_9
0000e7d2 g       .text	00000000 .hidden __mspabi_srai_11
0000e8ca g       .text	00000000 .hidden __mspabi_srll_4
0000e010 g       .rodata	00000000 __init_array_end
0000e872 g       .text	00000000 .hidden __mspabi_srli_2
0000e838 g       .text	00000000 .hidden __mspabi_sral
0000e7aa g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
0000fee0 g     O .key	00000100 key
00000000  w      *ABS*	00000000 __rom_highdatastart
0000e976 g       .text	00000000 __msp430_fini_end
0000e810 g       .text	00000000 .hidden __mspabi_sral_8
0000e7fc g       .text	00000000 .hidden __mspabi_sral_13
0000e14c g     F .text	00000022 delay
0000e89a g       .text	00000000 .hidden __mspabi_srll_12
0000e976 g       *ABS*	00000000 __romdatastart
0000e7e0 g       .text	00000000 .hidden __mspabi_srai_4
0000e04c g     F .text	00000000 _msp430_run_init_array
0000e862 g       .text	00000000 .hidden __mspabi_srli_6
0000e010 g       .rodata	00000000 __preinit_array_end
0000e86e g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00000214 g       .bss	00000000 __bssstart
0000e7be g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e7cc g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .MP430.attributes	00000000 __stack
0000e8ac g       .text	00000000 .hidden __mspabi_srll_9
0000e824 g       .text	00000000 .hidden __mspabi_sral_3
00000214 g       .data	00000000 _edata
0000e800 g       .text	00000000 .hidden __mspabi_sral_12
0000e96c g       .text	00000000 __msp430_init_end
0000e16e g     F .text	00000028 tty_putc
0000e8ec g       .text	00000000 .hidden __mspabi_srll
0000e13a g     F .text	00000012 printx
0000e3f2 g     F .text	00000054 cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000e888 g       .text	00000000 .hidden __mspabi_srll_15
0000e010 g       .rodata	00000000 __init_array_start
0000e7de g       .text	00000000 .hidden __mspabi_srai_5
0000e7ce g       .text	00000000 .hidden __mspabi_srai_13
0000e846 g       .text	00000000 .hidden __mspabi_srli_13
00000200 g       .data	00000000 __datastart
0000e8b2 g       .text	00000000 .hidden __mspabi_srll_8
0000e8dc g       .text	00000000 .hidden __mspabi_srll_1
0000e010 g       .rodata	00000000 __preinit_array_start
0000e02e g     F .text	00000014 __crt0_movedata
0000e7c4 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e81c g       .text	00000000 .hidden __mspabi_sral_5
0000e05a g     F .text	00000000 _msp430_run_preinit_array
0000e7ba g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e7c0 g       .text	00000000 .hidden __mspabi_func_epilog_4
0000e8d6 g       .text	00000000 .hidden __mspabi_srll_2
0000e96c g       .text	00000000 __msp430_fini
0000e85a g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section .keyfunction:

0000fae0 <makehash>:
}; 


#define SMART  __attribute__((__section__(".keyfunction"), noinline))

void SMART makehash (SmartIN input) {
    fae0:	0a 12       	push	r10		;

0000fae2 <.LCFI1>:
    fae2:	09 12       	push	r9		;

0000fae4 <.LCFI2>:
    fae4:	08 12       	push	r8		;

0000fae6 <.LCFI3>:
    fae6:	31 80 16 00 	sub	#22,	r1	;#0x0016

0000faea <.LCFI4>:
    faea:	81 4c 00 00 	mov	r12,	0(r1)	;

0000faee <.Loc.45.1>:
    char remaning[4];

    unsigned char *a;
    unsigned int size;

    a = input->a;
    faee:	2c 41       	mov	@r1,	r12	;
    faf0:	a1 4c 0a 00 	mov	@r12,	10(r1)	; 0x000a

0000faf4 <.Loc.46.1>:
    size = input->size;
    faf4:	2c 41       	mov	@r1,	r12	;
    faf6:	91 4c 02 00 	mov	2(r12),	8(r1)	;
    fafa:	08 00 

0000fafc <.Loc.49.1>:

    // [is_last, in_ready, size[2], reset]
    SHA_CONFIG = 0b00001;
    fafc:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fb00:	dc 43 00 00 	mov.b	#1,	0(r12)	;r3 As==01

0000fb04 <.Loc.50.1>:
    SHA_CONFIG = 0b00000;
    fb04:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fb08:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fb0c <.LBB2>:

    // Use key
    for (int i = 0; i < 64; ++i) {
    fb0c:	81 43 14 00 	mov	#0,	20(r1)	;r3 As==00, 0x0014
    fb10:	30 40 46 fb 	br	#0xfb46		;

0000fb14 <.L4>:
        SHA_IN = key[i];
    fb14:	3f 40 02 01 	mov	#258,	r15	;#0x0102
    fb18:	1c 41 14 00 	mov	20(r1),	r12	;0x00014
    fb1c:	0c 5c       	rla	r12		;
    fb1e:	0c 5c       	rla	r12		;
    fb20:	3c 50 e0 fe 	add	#65248,	r12	;#0xfee0
    fb24:	28 4c       	mov	@r12,	r8	;
    fb26:	19 4c 02 00 	mov	2(r12),	r9	;
    fb2a:	8f 48 00 00 	mov	r8,	0(r15)	;
    fb2e:	8f 49 02 00 	mov	r9,	2(r15)	;

0000fb32 <.Loc.55.1>:
        SHA_CONFIG = 0b01000;
    fb32:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fb36:	fc 42 00 00 	mov.b	#8,	0(r12)	;r2 As==11

0000fb3a <.Loc.56.1>:
        SHA_CONFIG = 0b00000;
    fb3a:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fb3e:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fb42 <.Loc.53.1>:
    // [is_last, in_ready, size[2], reset]
    SHA_CONFIG = 0b00001;
    SHA_CONFIG = 0b00000;

    // Use key
    for (int i = 0; i < 64; ++i) {
    fb42:	91 53 14 00 	inc	20(r1)		;

0000fb46 <.L3>:
    fb46:	7c 40 3f 00 	mov.b	#63,	r12	;#0x003f
    fb4a:	1c 91 14 00 	cmp	20(r1),	r12	;0x00014
    fb4e:	e2 37       	jge	$-58     	;abs 0xfb14

0000fb50 <.LBB3>:
        SHA_IN = key[i];
        SHA_CONFIG = 0b01000;
        SHA_CONFIG = 0b00000;
    }

    for (int i = 0; i < 4; ++i) {
    fb50:	81 43 12 00 	mov	#0,	18(r1)	;r3 As==00, 0x0012
    fb54:	30 40 68 fb 	br	#0xfb68		;

0000fb58 <.L6>:
        remaning[i] = 0;
    fb58:	0c 41       	mov	r1,	r12	;
    fb5a:	2c 53       	incd	r12		;
    fb5c:	1c 51 12 00 	add	18(r1),	r12	;0x00012
    fb60:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fb64 <.Loc.59.1>:
        SHA_IN = key[i];
        SHA_CONFIG = 0b01000;
        SHA_CONFIG = 0b00000;
    }

    for (int i = 0; i < 4; ++i) {
    fb64:	91 53 12 00 	inc	18(r1)		;

0000fb68 <.L5>:
    fb68:	7c 40 03 00 	mov.b	#3,	r12	;
    fb6c:	1c 91 12 00 	cmp	18(r1),	r12	;0x00012
    fb70:	f3 37       	jge	$-24     	;abs 0xfb58

0000fb72 <.LBB4>:
        remaning[i] = 0;
    }

    // Nounce
    for (int i = 0; i < input->n_size; ++i) {
    fb72:	81 43 10 00 	mov	#0,	16(r1)	;r3 As==00, 0x0010
    fb76:	30 40 b0 fb 	br	#0xfbb0		;

0000fb7a <.L8>:
        SHA_IN = (input->n)[i];
    fb7a:	2c 41       	mov	@r1,	r12	;
    fb7c:	1f 4c 06 00 	mov	6(r12),	r15	;
    fb80:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    fb84:	0c 5c       	rla	r12		;
    fb86:	0c 5c       	rla	r12		;
    fb88:	0f 5c       	add	r12,	r15	;
    fb8a:	3c 40 02 01 	mov	#258,	r12	;#0x0102
    fb8e:	28 4f       	mov	@r15,	r8	;
    fb90:	19 4f 02 00 	mov	2(r15),	r9	;
    fb94:	8c 48 00 00 	mov	r8,	0(r12)	;
    fb98:	8c 49 02 00 	mov	r9,	2(r12)	;

0000fb9c <.Loc.66.1>:
        SHA_CONFIG = 0b01000;
    fb9c:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fba0:	fc 42 00 00 	mov.b	#8,	0(r12)	;r2 As==11

0000fba4 <.Loc.67.1>:
        SHA_CONFIG = 0b00000;
    fba4:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fba8:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fbac <.Loc.64.1>:
    for (int i = 0; i < 4; ++i) {
        remaning[i] = 0;
    }

    // Nounce
    for (int i = 0; i < input->n_size; ++i) {
    fbac:	91 53 10 00 	inc	16(r1)		;

0000fbb0 <.L7>:
    fbb0:	2c 41       	mov	@r1,	r12	;
    fbb2:	1f 4c 08 00 	mov	8(r12),	r15	;
    fbb6:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    fbba:	0c 9f       	cmp	r15,	r12	;
    fbbc:	de 2b       	jnc	$-66     	;abs 0xfb7a

0000fbbe <.LBE4>:
        SHA_CONFIG = 0b01000;
        SHA_CONFIG = 0b00000;
    }

    // // Input info
    SHA_IN = (unsigned long)((unsigned int) a);
    fbbe:	1f 41 0a 00 	mov	10(r1),	r15	;0x0000a
    fbc2:	3c 40 02 01 	mov	#258,	r12	;#0x0102
    fbc6:	0a 4f       	mov	r15,	r10	;
    fbc8:	4b 43       	clr.b	r11		;
    fbca:	8c 4a 00 00 	mov	r10,	0(r12)	;
    fbce:	8c 4b 02 00 	mov	r11,	2(r12)	;

0000fbd2 <.Loc.72.1>:
    SHA_CONFIG = 0b01000;
    fbd2:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fbd6:	fc 42 00 00 	mov.b	#8,	0(r12)	;r2 As==11

0000fbda <.Loc.73.1>:
    SHA_CONFIG = 0b00000;
    fbda:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fbde:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fbe2 <.Loc.74.1>:
    SHA_IN = (unsigned long) size;
    fbe2:	3c 40 02 01 	mov	#258,	r12	;#0x0102
    fbe6:	1f 41 08 00 	mov	8(r1),	r15	;
    fbea:	0d 4f       	mov	r15,	r13	;
    fbec:	4e 43       	clr.b	r14		;
    fbee:	8c 4d 00 00 	mov	r13,	0(r12)	;
    fbf2:	8c 4e 02 00 	mov	r14,	2(r12)	;

0000fbf6 <.Loc.75.1>:
    SHA_CONFIG = 0b01000;
    fbf6:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fbfa:	fc 42 00 00 	mov.b	#8,	0(r12)	;r2 As==11

0000fbfe <.Loc.76.1>:
    SHA_CONFIG = 0b00000;
    fbfe:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fc02:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fc06 <.Loc.79.1>:

    // memory
    tt = (unsigned long *) input->a;
    fc06:	2c 41       	mov	@r1,	r12	;
    fc08:	a1 4c 06 00 	mov	@r12,	6(r1)	;

0000fc0c <.LBB5>:
    for (int i = 0; size-i*4 >= 4; ++i) {
    fc0c:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e
    fc10:	30 40 46 fc 	br	#0xfc46		;

0000fc14 <.L10>:
        SHA_IN = tt[i];
    fc14:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    fc18:	0c 5c       	rla	r12		;
    fc1a:	0c 5c       	rla	r12		;
    fc1c:	1c 51 06 00 	add	6(r1),	r12	;
    fc20:	3e 40 02 01 	mov	#258,	r14	;#0x0102
    fc24:	1d 4c 02 00 	mov	2(r12),	r13	;
    fc28:	2c 4c       	mov	@r12,	r12	;
    fc2a:	8e 4c 00 00 	mov	r12,	0(r14)	;
    fc2e:	8e 4d 02 00 	mov	r13,	2(r14)	;

0000fc32 <.Loc.82.1>:
        SHA_CONFIG = 0b01000;
    fc32:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fc36:	fc 42 00 00 	mov.b	#8,	0(r12)	;r2 As==11

0000fc3a <.Loc.83.1>:
        SHA_CONFIG = 0b00000;
    fc3a:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fc3e:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fc42 <.Loc.80.1>:
    SHA_CONFIG = 0b01000;
    SHA_CONFIG = 0b00000;

    // memory
    tt = (unsigned long *) input->a;
    for (int i = 0; size-i*4 >= 4; ++i) {
    fc42:	91 53 0e 00 	inc	14(r1)		;

0000fc46 <.L9>:
    fc46:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    fc4a:	0c 5c       	rla	r12		;
    fc4c:	0c 5c       	rla	r12		;
    fc4e:	1d 41 08 00 	mov	8(r1),	r13	;
    fc52:	0d 8c       	sub	r12,	r13	;
    fc54:	7c 40 03 00 	mov.b	#3,	r12	;
    fc58:	0c 9d       	cmp	r13,	r12	;
    fc5a:	dc 2b       	jnc	$-70     	;abs 0xfc14

0000fc5c <.LBB6>:
        SHA_IN = tt[i];
        SHA_CONFIG = 0b01000;
        SHA_CONFIG = 0b00000;
    }
    // last bytes memory
    for (int i = size - size%4; i < size; ++i) {
    fc5c:	1c 41 08 00 	mov	8(r1),	r12	;
    fc60:	0d 4c       	mov	r12,	r13	;
    fc62:	3d f0 fc ff 	and	#65532,	r13	;#0xfffc
    fc66:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c
    fc6a:	30 40 9c fc 	br	#0xfc9c		;

0000fc6e <.L13>:
        remaning[i%4] = a[i];
    fc6e:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    fc72:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    fc76:	0d 5c       	add	r12,	r13	;
    fc78:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    fc7c:	3c f0 03 80 	and	#32771,	r12	;#0x8003
    fc80:	0c 93       	cmp	#0,	r12	;r3 As==00
    fc82:	04 34       	jge	$+10     	;abs 0xfc8c
    fc84:	3c 53       	add	#-1,	r12	;r3 As==11
    fc86:	3c d0 fc ff 	bis	#65532,	r12	;#0xfffc
    fc8a:	1c 53       	inc	r12		;

0000fc8c <.L12>:
    fc8c:	6d 4d       	mov.b	@r13,	r13	;
    fc8e:	0e 41       	mov	r1,	r14	;
    fc90:	2e 53       	incd	r14		;
    fc92:	0c 5e       	add	r14,	r12	;
    fc94:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000fc98 <.Loc.86.1>:
        SHA_IN = tt[i];
        SHA_CONFIG = 0b01000;
        SHA_CONFIG = 0b00000;
    }
    // last bytes memory
    for (int i = size - size%4; i < size; ++i) {
    fc98:	91 53 0c 00 	inc	12(r1)		;

0000fc9c <.L11>:
    fc9c:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    fca0:	1c 91 08 00 	cmp	8(r1),	r12	;
    fca4:	e4 2b       	jnc	$-54     	;abs 0xfc6e

0000fca6 <.LBE6>:
        remaning[i%4] = a[i];
    }

    SHA_IN = ((unsigned long *) remaning)[0];
    fca6:	0c 41       	mov	r1,	r12	;
    fca8:	2c 53       	incd	r12		;
    fcaa:	3e 40 02 01 	mov	#258,	r14	;#0x0102
    fcae:	1d 4c 02 00 	mov	2(r12),	r13	;
    fcb2:	2c 4c       	mov	@r12,	r12	;
    fcb4:	8e 4c 00 00 	mov	r12,	0(r14)	;
    fcb8:	8e 4d 02 00 	mov	r13,	2(r14)	;

0000fcbc <.Loc.91.1>:
    if (size%4 == 0) { 
    fcbc:	1c 41 08 00 	mov	8(r1),	r12	;
    fcc0:	7c f0 03 00 	and.b	#3,	r12	;
    fcc4:	0c 93       	cmp	#0,	r12	;r3 As==00
    fcc6:	07 20       	jnz	$+16     	;abs 0xfcd6

0000fcc8 <.Loc.92.1>:
        SHA_CONFIG = 0b11000;
    fcc8:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fccc:	fc 40 18 00 	mov.b	#24,	0(r12)	;#0x0018
    fcd0:	00 00 
    fcd2:	30 40 22 fd 	br	#0xfd22		;

0000fcd6 <.L14>:
    } else if (size%4 == 1) { 
    fcd6:	1c 41 08 00 	mov	8(r1),	r12	;
    fcda:	7c f0 03 00 	and.b	#3,	r12	;
    fcde:	1c 93       	cmp	#1,	r12	;r3 As==01
    fce0:	07 20       	jnz	$+16     	;abs 0xfcf0

0000fce2 <.Loc.94.1>:
        SHA_CONFIG = 0b11010;
    fce2:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fce6:	fc 40 1a 00 	mov.b	#26,	0(r12)	;#0x001a
    fcea:	00 00 
    fcec:	30 40 22 fd 	br	#0xfd22		;

0000fcf0 <.L16>:
    }  else if (size%4 == 2) { 
    fcf0:	1c 41 08 00 	mov	8(r1),	r12	;
    fcf4:	7c f0 03 00 	and.b	#3,	r12	;
    fcf8:	2c 93       	cmp	#2,	r12	;r3 As==10
    fcfa:	07 20       	jnz	$+16     	;abs 0xfd0a

0000fcfc <.Loc.96.1>:
        SHA_CONFIG = 0b11100;
    fcfc:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fd00:	fc 40 1c 00 	mov.b	#28,	0(r12)	;#0x001c
    fd04:	00 00 
    fd06:	30 40 22 fd 	br	#0xfd22		;

0000fd0a <.L17>:
    } else if (size%4 == 3) { 
    fd0a:	1c 41 08 00 	mov	8(r1),	r12	;
    fd0e:	7c f0 03 00 	and.b	#3,	r12	;
    fd12:	3c 90 03 00 	cmp	#3,	r12	;
    fd16:	05 20       	jnz	$+12     	;abs 0xfd22

0000fd18 <.Loc.98.1>:
        SHA_CONFIG = 0b11110;
    fd18:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fd1c:	fc 40 1e 00 	mov.b	#30,	0(r12)	;#0x001e
    fd20:	00 00 

0000fd22 <.L15>:
    }
    SHA_CONFIG = 0b00000;
    fd22:	3c 40 00 01 	mov	#256,	r12	;#0x0100
    fd26:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00

0000fd2a <.Loc.102.1>:

    while (~(SHA_STATUS >> 1) & 0b1) { };
    fd2a:	03 43       	nop			

0000fd2c <.L18>:
    fd2c:	3c 40 01 01 	mov	#257,	r12	;#0x0101
    fd30:	6c 4c       	mov.b	@r12,	r12	;
    fd32:	12 c3       	clrc			
    fd34:	0c 10       	rrc	r12		;
    fd36:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    fd3a:	5c f3       	and.b	#1,	r12	;r3 As==01
    fd3c:	0c 93       	cmp	#0,	r12	;r3 As==00
    fd3e:	f6 27       	jz	$-18     	;abs 0xfd2c

0000fd40 <.Loc.104.1>:

    if (input->call != NULL)
    fd40:	2c 41       	mov	@r1,	r12	;
    fd42:	1c 4c 04 00 	mov	4(r12),	r12	;
    fd46:	0c 93       	cmp	#0,	r12	;r3 As==00
    fd48:	04 24       	jz	$+10     	;abs 0xfd52

0000fd4a <.Loc.105.1>:
        (input->call)();
    fd4a:	2c 41       	mov	@r1,	r12	;
    fd4c:	1c 4c 04 00 	mov	4(r12),	r12	;
    fd50:	8c 12       	call	r12		;

0000fd52 <.L20>:
}
    fd52:	03 43       	nop			
    fd54:	31 50 16 00 	add	#22,	r1	;#0x0016
    fd58:	30 40 c2 e7 	br	#0xe7c2		;

Disassembly of section __interrupt_vector_8:

0000ffee <__interrupt_vector_8>:
    ffee:	96 e1       	interrupt service routine at 0xe196

Disassembly of section .text:

0000e01c <__crt0_start>:
    e01c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e020 <__crt0_init_bss>:
    e020:	3c 40 14 02 	mov	#532,	r12	;#0x0214

0000e024 <.Loc.74.1>:
    e024:	0d 43       	clr	r13		;

0000e026 <.Loc.75.1>:
    e026:	3e 40 13 00 	mov	#19,	r14	;#0x0013

0000e02a <.Loc.79.1>:
    e02a:	b0 12 2a e9 	call	#59690		;#0xe92a

0000e02e <__crt0_movedata>:
    e02e:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e032 <.Loc.116.1>:
    e032:	3d 40 76 e9 	mov	#59766,	r13	;#0xe976

0000e036 <.Loc.119.1>:
    e036:	0d 9c       	cmp	r12,	r13	;

0000e038 <.Loc.120.1>:
    e038:	04 24       	jz	$+10     	;abs 0xe042

0000e03a <.Loc.122.1>:
    e03a:	3e 40 14 00 	mov	#20,	r14	;#0x0014

0000e03e <.Loc.124.1>:
    e03e:	b0 12 f2 e8 	call	#59634		;#0xe8f2

0000e042 <__crt0_call_init_then_main>:
    e042:	b0 12 5a e9 	call	#59738		;#0xe95a

0000e046 <.Loc.196.1>:
    e046:	0c 43       	clr	r12		;

0000e048 <.Loc.197.1>:
    e048:	b0 12 f4 e1 	call	#57844		;#0xe1f4

0000e04c <_msp430_run_init_array>:
    e04c:	34 40 10 e0 	mov	#57360,	r4	;#0xe010

0000e050 <.Loc.224.1>:
    e050:	35 40 10 e0 	mov	#57360,	r5	;#0xe010

0000e054 <.Loc.225.1>:
    e054:	26 43       	mov	#2,	r6	;r3 As==10

0000e056 <.Loc.226.1>:
    e056:	30 40 78 e0 	br	#0xe078		;

0000e05a <_msp430_run_preinit_array>:
    e05a:	34 40 10 e0 	mov	#57360,	r4	;#0xe010

0000e05e <.Loc.232.1>:
    e05e:	35 40 10 e0 	mov	#57360,	r5	;#0xe010

0000e062 <.Loc.233.1>:
    e062:	26 43       	mov	#2,	r6	;r3 As==10

0000e064 <.Loc.234.1>:
    e064:	30 40 78 e0 	br	#0xe078		;

0000e068 <_msp430_run_fini_array>:
    e068:	34 40 10 e0 	mov	#57360,	r4	;#0xe010

0000e06c <.Loc.240.1>:
    e06c:	35 40 10 e0 	mov	#57360,	r5	;#0xe010

0000e070 <.Loc.241.1>:
    e070:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e074 <.Loc.242.1>:
    e074:	30 40 78 e0 	br	#0xe078		;

0000e078 <_msp430_run_array>:
    e078:	05 94       	cmp	r4,	r5	;

0000e07a <.Loc.246.1>:
    e07a:	05 24       	jz	$+12     	;abs 0xe086

0000e07c <.Loc.247.1>:
    e07c:	27 44       	mov	@r4,	r7	;

0000e07e <.Loc.248.1>:
    e07e:	04 56       	add	r6,	r4	;

0000e080 <.Loc.249.1>:
    e080:	a7 12       	call	@r7		;

0000e082 <.Loc.250.1>:
    e082:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe078

0000e086 <_msp430_run_done>:
    e086:	30 41       	ret			

0000e088 <L0>:
    e088:	30 41       	ret			
    e08a:	30 41       	ret			

0000e08c <deregister_tm_clones>:
    e08c:	3c 40 76 e9 	mov	#59766,	r12	;#0xe976
    e090:	3c 90 76 e9 	cmp	#59766,	r12	;#0xe976
    e094:	07 24       	jz	$+16     	;abs 0xe0a4
    e096:	3d 40 00 00 	mov	#0,	r13	;
    e09a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e09c:	03 24       	jz	$+8      	;abs 0xe0a4
    e09e:	3c 40 76 e9 	mov	#59766,	r12	;#0xe976
    e0a2:	8d 12       	call	r13		;

0000e0a4 <.L1>:
    e0a4:	30 41       	ret			

0000e0a6 <register_tm_clones>:
    e0a6:	0a 12       	push	r10		;
    e0a8:	3a 40 76 e9 	mov	#59766,	r10	;#0xe976
    e0ac:	3a 80 76 e9 	sub	#59766,	r10	;#0xe976
    e0b0:	0a 11       	rra	r10		;
    e0b2:	0c 4a       	mov	r10,	r12	;
    e0b4:	b0 12 3e e8 	call	#59454		;#0xe83e
    e0b8:	0c 5a       	add	r10,	r12	;
    e0ba:	0d 4c       	mov	r12,	r13	;
    e0bc:	0d 11       	rra	r13		;
    e0be:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0c0:	07 24       	jz	$+16     	;abs 0xe0d0
    e0c2:	3e 40 00 00 	mov	#0,	r14	;
    e0c6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0c8:	03 24       	jz	$+8      	;abs 0xe0d0
    e0ca:	3c 40 76 e9 	mov	#59766,	r12	;#0xe976
    e0ce:	8e 12       	call	r14		;

0000e0d0 <.L9>:
    e0d0:	3a 41       	pop	r10		;
    e0d2:	30 41       	ret			

0000e0d4 <__do_global_dtors_aux>:
    e0d4:	0a 12       	push	r10		;
    e0d6:	09 12       	push	r9		;
    e0d8:	c2 93 14 02 	cmp.b	#0,	&0x0214	;r3 As==00
    e0dc:	17 20       	jnz	$+48     	;abs 0xe10c
    e0de:	3a 40 1a e0 	mov	#57370,	r10	;#0xe01a
    e0e2:	3a 80 18 e0 	sub	#57368,	r10	;#0xe018
    e0e6:	0a 11       	rra	r10		;
    e0e8:	3a 53       	add	#-1,	r10	;r3 As==11
    e0ea:	39 40 18 e0 	mov	#57368,	r9	;#0xe018

0000e0ee <.L19>:
    e0ee:	1c 42 16 02 	mov	&0x0216,r12	;0x0216
    e0f2:	0c 9a       	cmp	r10,	r12	;
    e0f4:	0d 28       	jnc	$+28     	;abs 0xe110
    e0f6:	b0 12 8c e0 	call	#57484		;#0xe08c
    e0fa:	3d 40 00 00 	mov	#0,	r13	;
    e0fe:	0d 93       	cmp	#0,	r13	;r3 As==00
    e100:	03 24       	jz	$+8      	;abs 0xe108
    e102:	3c 40 0c e0 	mov	#57356,	r12	;#0xe00c
    e106:	8d 12       	call	r13		;

0000e108 <.L21>:
    e108:	d2 43 14 02 	mov.b	#1,	&0x0214	;r3 As==01

0000e10c <.L17>:
    e10c:	30 40 c4 e7 	br	#0xe7c4		;

0000e110 <.L20>:
    e110:	1c 53       	inc	r12		;
    e112:	82 4c 16 02 	mov	r12,	&0x0216	;
    e116:	0c 5c       	rla	r12		;
    e118:	0c 59       	add	r9,	r12	;
    e11a:	2c 4c       	mov	@r12,	r12	;
    e11c:	8c 12       	call	r12		;
    e11e:	30 40 ee e0 	br	#0xe0ee		;

0000e122 <call___do_global_dtors_aux>:
    e122:	3e 40 00 00 	mov	#0,	r14	;
    e126:	0e 93       	cmp	#0,	r14	;r3 As==00
    e128:	05 24       	jz	$+12     	;abs 0xe134
    e12a:	3d 40 18 02 	mov	#536,	r13	;#0x0218
    e12e:	3c 40 0c e0 	mov	#57356,	r12	;#0xe00c
    e132:	8e 12       	call	r14		;

0000e134 <.L27>:
    e134:	b0 12 a6 e0 	call	#57510		;#0xe0a6
    e138:	30 41       	ret			

0000e13a <printx>:
  unsigned int n_size;  // size of the nounce
};

typedef struct smart_input * SmartIN;

void printx () {
    e13a:	21 83       	decd	r1		;

0000e13c <.LCFI0>:
    cprintf("> ");
    e13c:	b1 40 00 e0 	mov	#57344,	0(r1)	;#0xe000
    e140:	00 00 
    e142:	b0 12 f8 e4 	call	#58616		;#0xe4f8

0000e146 <.Loc.19.1>:
}
    e146:	03 43       	nop			
    e148:	21 53       	incd	r1		;
    e14a:	30 41       	ret			

0000e14c <delay>:


//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
    e14c:	21 83       	decd	r1		;

0000e14e <.LCFI5>:
    e14e:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e152 <.Loc.113.1>:
   while(d--) {
    e152:	30 40 5a e1 	br	#0xe15a		;

0000e156 <.L23>:
      __nop();
    e156:	03 43       	nop			

0000e158 <.Loc.115.1>:
      __nop();
    e158:	03 43       	nop			

0000e15a <.L22>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e15a:	2c 41       	mov	@r1,	r12	;
    e15c:	0d 4c       	mov	r12,	r13	;
    e15e:	3d 53       	add	#-1,	r13	;r3 As==11
    e160:	81 4d 00 00 	mov	r13,	0(r1)	;
    e164:	0c 93       	cmp	#0,	r12	;r3 As==00
    e166:	f7 23       	jnz	$-16     	;abs 0xe156

0000e168 <.Loc.117.1>:
      __nop();
      __nop();
   }
}
    e168:	03 43       	nop			
    e16a:	21 53       	incd	r1		;
    e16c:	30 41       	ret			

0000e16e <tty_putc>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int tty_putc (int txdata) {
    e16e:	21 83       	decd	r1		;

0000e170 <.LCFI6>:
    e170:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e174 <.Loc.126.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e174:	03 43       	nop			

0000e176 <.L25>:
    e176:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e17a:	6c 4c       	mov.b	@r12,	r12	;
    e17c:	7c f2       	and.b	#8,	r12	;r2 As==11
    e17e:	0c 93       	cmp	#0,	r12	;r3 As==00
    e180:	fa 23       	jnz	$-10     	;abs 0xe176

0000e182 <.Loc.129.1>:

  // Write the output character
  UART_TXD = txdata;
    e182:	7c 40 84 00 	mov.b	#132,	r12	;#0x0084
    e186:	2d 41       	mov	@r1,	r13	;
    e188:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    e18c:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000e190 <.Loc.131.1>:

  return 0;
    e190:	4c 43       	clr.b	r12		;

0000e192 <.Loc.132.1>:
}
    e192:	21 53       	incd	r1		;
    e194:	30 41       	ret			

0000e196 <INT_uart_rx>:
//         (receive a byte from the UART)           //
//--------------------------------------------------//
volatile char rxdata;

// wakeup interrupt (8) INT_uart_rx(void) {
interrupt (8) INT_uart_rx(void) {
    e196:	0f 12       	push	r15		;

0000e198 <.LCFI7>:
    e198:	0e 12       	push	r14		;

0000e19a <.LCFI8>:
    e19a:	0d 12       	push	r13		;

0000e19c <.LCFI9>:
    e19c:	0c 12       	push	r12		;

0000e19e <.LCFI10>:
    e19e:	0b 12       	push	r11		;

0000e1a0 <.LCFI11>:
    e1a0:	0a 12       	push	r10		;

0000e1a2 <.LCFI12>:
    e1a2:	09 12       	push	r9		;

0000e1a4 <.LCFI13>:
    e1a4:	08 12       	push	r8		;

0000e1a6 <.LCFI14>:
    e1a6:	07 12       	push	r7		;

0000e1a8 <.LCFI15>:
    e1a8:	06 12       	push	r6		;

0000e1aa <.LCFI16>:
    e1aa:	05 12       	push	r5		;

0000e1ac <.LCFI17>:
    e1ac:	04 12       	push	r4		;

0000e1ae <.LCFI18>:
    e1ae:	21 82       	sub	#4,	r1	;r2 As==10

0000e1b0 <.LCFI19>:
  // Read the received data
  rxdata = UART_RXD;
    e1b0:	7c 40 85 00 	mov.b	#133,	r12	;#0x0085
    e1b4:	6c 4c       	mov.b	@r12,	r12	;
    e1b6:	c2 4c 26 02 	mov.b	r12,	&0x0226	;

0000e1ba <.Loc.146.1>:

  // Clear the receive pending flag
  UART_STAT = UART_RX_PND;
    e1ba:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e1be:	fc 40 10 00 	mov.b	#16,	0(r12)	;#0x0010
    e1c2:	00 00 

0000e1c4 <.Loc.148.1>:

  cprintf("%c", rxdata);
    e1c4:	5c 42 26 02 	mov.b	&0x0226,r12	;0x0226
    e1c8:	81 4c 02 00 	mov	r12,	2(r1)	;
    e1cc:	b1 40 03 e0 	mov	#57347,	0(r1)	;#0xe003
    e1d0:	00 00 
    e1d2:	b0 12 f8 e4 	call	#58616		;#0xe4f8

0000e1d6 <.Loc.151.1>:
  // // Exit the low power mode
  // LPM0_EXIT;
}
    e1d6:	03 43       	nop			
    e1d8:	21 52       	add	#4,	r1	;r2 As==10
    e1da:	34 41       	pop	r4		;
    e1dc:	35 41       	pop	r5		;
    e1de:	36 41       	pop	r6		;
    e1e0:	37 41       	pop	r7		;
    e1e2:	38 41       	pop	r8		;
    e1e4:	39 41       	pop	r9		;
    e1e6:	3a 41       	pop	r10		;
    e1e8:	3b 41       	pop	r11		;
    e1ea:	3c 41       	pop	r12		;
    e1ec:	3d 41       	pop	r13		;
    e1ee:	3e 41       	pop	r14		;
    e1f0:	3f 41       	pop	r15		;
    e1f2:	00 13       	reti			

0000e1f4 <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e1f4:	31 80 10 00 	sub	#16,	r1	;#0x0010

0000e1f8 <.LCFI20>:

    struct smart_input input;

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e1f8:	3c 40 20 01 	mov	#288,	r12	;#0x0120
    e1fc:	bc 40 80 5a 	mov	#23168,	0(r12)	;#0x5a80
    e200:	00 00 

0000e202 <.Loc.165.1>:

    P3DIR  = 0xff;
    e202:	7c 40 1a 00 	mov.b	#26,	r12	;#0x001a
    e206:	fc 43 00 00 	mov.b	#-1,	0(r12)	;r3 As==11

0000e20a <.Loc.166.1>:
    P3OUT  = 0xff;                      // Light LED during init
    e20a:	7c 40 19 00 	mov.b	#25,	r12	;#0x0019
    e20e:	fc 43 00 00 	mov.b	#-1,	0(r12)	;r3 As==11

0000e212 <.Loc.168.1>:

    UART_BAUD = BAUD;                   // Init UART
    e212:	7c 40 82 00 	mov.b	#130,	r12	;#0x0082
    e216:	bc 40 ae 00 	mov	#174,	0(r12)	;#0x00ae
    e21a:	00 00 

0000e21c <.Loc.169.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e21c:	7c 40 80 00 	mov.b	#128,	r12	;#0x0080
    e220:	fc 40 11 00 	mov.b	#17,	0(r12)	;#0x0011
    e224:	00 00 

0000e226 <.Loc.171.1>:

    input.a = (void *) 0xFEE0;
    e226:	b1 40 e0 fe 	mov	#65248,	4(r1)	;#0xfee0
    e22a:	04 00 

0000e22c <.Loc.172.1>:
    input.size = 0x100;
    e22c:	b1 40 00 01 	mov	#256,	6(r1)	;#0x0100
    e230:	06 00 

0000e232 <.Loc.173.1>:
    input.call = printx;
    e232:	b1 40 3a e1 	mov	#57658,	8(r1)	;#0xe13a
    e236:	08 00 

0000e238 <.Loc.174.1>:
    input.n = NULL;
    e238:	81 43 0a 00 	mov	#0,	10(r1)	;r3 As==00, 0x000a

0000e23c <.Loc.175.1>:
    input.n_size = 0;
    e23c:	81 43 0c 00 	mov	#0,	12(r1)	;r3 As==00, 0x000c

0000e240 <.Loc.177.1>:

    makehash(&input);
    e240:	0c 41       	mov	r1,	r12	;
    e242:	2c 52       	add	#4,	r12	;r2 As==10
    e244:	b0 12 e0 fa 	call	#64224		;#0xfae0

0000e248 <.LBB7>:

    for (int i = 31; i >= 0; --i) {
    e248:	b1 40 1f 00 	mov	#31,	14(r1)	;#0x001f, 0x000e
    e24c:	0e 00 
    e24e:	30 40 70 e2 	br	#0xe270		;

0000e252 <.L30>:
        cprintf("%w", ((unsigned int *)&SHA_OUT)[i]);
    e252:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    e256:	0c 5c       	rla	r12		;
    e258:	3c 50 06 01 	add	#262,	r12	;#0x0106
    e25c:	2c 4c       	mov	@r12,	r12	;
    e25e:	81 4c 02 00 	mov	r12,	2(r1)	;
    e262:	b1 40 06 e0 	mov	#57350,	0(r1)	;#0xe006
    e266:	00 00 
    e268:	b0 12 f8 e4 	call	#58616		;#0xe4f8

0000e26c <.Loc.179.1>:
    input.n = NULL;
    input.n_size = 0;

    makehash(&input);

    for (int i = 31; i >= 0; --i) {
    e26c:	b1 53 0e 00 	add	#-1,	14(r1)	;r3 As==11, 0x000e

0000e270 <.L29>:
    e270:	81 93 0e 00 	cmp	#0,	14(r1)	;r3 As==00, 0x000e
    e274:	ee 37       	jge	$-34     	;abs 0xe252

0000e276 <.L31>:
        cprintf("%w", ((unsigned int *)&SHA_OUT)[i]);
    }
    while (1) cprintf(".");
    e276:	b1 40 09 e0 	mov	#57353,	0(r1)	;#0xe009
    e27a:	00 00 
    e27c:	b0 12 f8 e4 	call	#58616		;#0xe4f8
    e280:	30 40 76 e2 	br	#0xe276		;

0000e284 <tty_putc>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {
    e284:	21 83       	decd	r1		;

0000e286 <.LCFI0>:
    e286:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e28a <.Loc.17.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e28a:	03 43       	nop			

0000e28c <.L2>:
    e28c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e290:	6c 4c       	mov.b	@r12,	r12	;
    e292:	7c f2       	and.b	#8,	r12	;r2 As==11
    e294:	0c 93       	cmp	#0,	r12	;r3 As==00
    e296:	fa 23       	jnz	$-10     	;abs 0xe28c

0000e298 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e298:	7c 40 84 00 	mov.b	#132,	r12	;#0x0084
    e29c:	2d 41       	mov	@r1,	r13	;
    e29e:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    e2a2:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000e2a6 <.Loc.22.1>:

  return 0;
    e2a6:	4c 43       	clr.b	r12		;

0000e2a8 <.Loc.23.1>:
}
    e2a8:	21 53       	incd	r1		;
    e2aa:	30 41       	ret			

0000e2ac <cput_nibble>:


void
cput_nibble (int n)
{
    e2ac:	21 83       	decd	r1		;

0000e2ae <.LCFI1>:
    e2ae:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e2b2 <.Loc.29.1>:
  tty_putc (hex[n&0x0f]);
    e2b2:	2c 41       	mov	@r1,	r12	;
    e2b4:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2b8:	5c 4c 02 02 	mov.b	514(r12),r12	;0x00202
    e2bc:	b0 12 84 e2 	call	#57988		;#0xe284

0000e2c0 <.Loc.30.1>:
}
    e2c0:	03 43       	nop			
    e2c2:	21 53       	incd	r1		;
    e2c4:	30 41       	ret			

0000e2c6 <cput_hex_byte>:

void
cput_hex_byte (int n)
{
    e2c6:	21 83       	decd	r1		;

0000e2c8 <.LCFI2>:
    e2c8:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e2cc <.Loc.35.1>:
  cput_nibble (n >> 4);
    e2cc:	2c 41       	mov	@r1,	r12	;
    e2ce:	b0 12 e0 e7 	call	#59360		;#0xe7e0
    e2d2:	b0 12 ac e2 	call	#58028		;#0xe2ac

0000e2d6 <.Loc.36.1>:
  cput_nibble (n);
    e2d6:	2c 41       	mov	@r1,	r12	;
    e2d8:	b0 12 ac e2 	call	#58028		;#0xe2ac

0000e2dc <.Loc.37.1>:
}
    e2dc:	03 43       	nop			
    e2de:	21 53       	incd	r1		;
    e2e0:	30 41       	ret			

0000e2e2 <cput_binary_byte>:

void
cput_binary_byte (int n)
{
    e2e2:	21 82       	sub	#4,	r1	;r2 As==10

0000e2e4 <.LCFI3>:
    e2e4:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e2e8 <.Loc.43.1>:
  int i;
  for (i=7; i>=0; i--)
    e2e8:	b1 40 07 00 	mov	#7,	2(r1)	;
    e2ec:	02 00 
    e2ee:	30 40 16 e3 	br	#0xe316		;

0000e2f2 <.L10>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e2f2:	2c 41       	mov	@r1,	r12	;
    e2f4:	1d 41 02 00 	mov	2(r1),	r13	;
    e2f8:	b0 12 ee e7 	call	#59374		;#0xe7ee
    e2fc:	5c f3       	and.b	#1,	r12	;r3 As==01
    e2fe:	0c 93       	cmp	#0,	r12	;r3 As==00
    e300:	04 24       	jz	$+10     	;abs 0xe30a

0000e302 <.Loc.44.1>:
    e302:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031
    e306:	30 40 0e e3 	br	#0xe30e		;

0000e30a <.L8>:
    e30a:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e30e <.L9>:
    e30e:	b0 12 84 e2 	call	#57988		;#0xe284

0000e312 <.Loc.43.1>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e312:	b1 53 02 00 	add	#-1,	2(r1)	;r3 As==11

0000e316 <.L7>:
    e316:	81 93 02 00 	cmp	#0,	2(r1)	;r3 As==00
    e31a:	eb 37       	jge	$-40     	;abs 0xe2f2

0000e31c <.Loc.45.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e31c:	03 43       	nop			
    e31e:	21 52       	add	#4,	r1	;r2 As==10
    e320:	30 41       	ret			

0000e322 <cput_hex_word>:

void
cput_hex_word (int n)
{
    e322:	21 83       	decd	r1		;

0000e324 <.LCFI4>:
    e324:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e328 <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e328:	2c 41       	mov	@r1,	r12	;
    e32a:	b0 12 d8 e7 	call	#59352		;#0xe7d8
    e32e:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e332 <.Loc.51.1>:
  cput_hex_byte (n);
    e332:	2c 41       	mov	@r1,	r12	;
    e334:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e338 <.Loc.52.1>:
}
    e338:	03 43       	nop			
    e33a:	21 53       	incd	r1		;
    e33c:	30 41       	ret			

0000e33e <cput_hex_long>:

void
cput_hex_long (long int n)
{
    e33e:	21 82       	sub	#4,	r1	;r2 As==10

0000e340 <.LCFI5>:
    e340:	81 4c 00 00 	mov	r12,	0(r1)	;
    e344:	81 4d 02 00 	mov	r13,	2(r1)	;

0000e348 <.Loc.57.1>:
  cput_hex_byte (n >> 24);
    e348:	2c 41       	mov	@r1,	r12	;
    e34a:	1d 41 02 00 	mov	2(r1),	r13	;
    e34e:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e352:	4f 43       	clr.b	r15		;
    e354:	b0 12 38 e8 	call	#59448		;#0xe838
    e358:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e35c <.Loc.58.1>:
  cput_hex_byte (n >> 16);
    e35c:	2c 41       	mov	@r1,	r12	;
    e35e:	1d 41 02 00 	mov	2(r1),	r13	;
    e362:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e366:	4f 43       	clr.b	r15		;
    e368:	b0 12 38 e8 	call	#59448		;#0xe838
    e36c:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e370 <.Loc.59.1>:
  cput_hex_byte (n >> 8);
    e370:	2c 41       	mov	@r1,	r12	;
    e372:	1d 41 02 00 	mov	2(r1),	r13	;
    e376:	b0 12 10 e8 	call	#59408		;#0xe810
    e37a:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e37e <.Loc.60.1>:
  cput_hex_byte (n);
    e37e:	2c 41       	mov	@r1,	r12	;
    e380:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e384 <.Loc.61.1>:
}
    e384:	03 43       	nop			
    e386:	21 52       	add	#4,	r1	;r2 As==10
    e388:	30 41       	ret			

0000e38a <cput_hex_block>:

void
cput_hex_block (char *block, int n)
{
    e38a:	31 80 06 00 	sub	#6,	r1	;

0000e38e <.LCFI6>:
    e38e:	81 4c 02 00 	mov	r12,	2(r1)	;
    e392:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e396 <.Loc.66.1>:
  int i = 0;
    e396:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e39a <.Loc.67.1>:
  while (n)
    e39a:	30 40 de e3 	br	#0xe3de		;

0000e39e <.L18>:
    {
      cput_hex_byte (*block++);
    e39e:	1c 41 02 00 	mov	2(r1),	r12	;
    e3a2:	0d 4c       	mov	r12,	r13	;
    e3a4:	1d 53       	inc	r13		;
    e3a6:	81 4d 02 00 	mov	r13,	2(r1)	;
    e3aa:	6c 4c       	mov.b	@r12,	r12	;
    e3ac:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e3b0 <.Loc.70.1>:
      if (--n == 0)
    e3b0:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e3b4:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e3b8:	17 24       	jz	$+48     	;abs 0xe3e8

0000e3ba <.Loc.72.1>:
	break;
      i++;
    e3ba:	91 53 04 00 	inc	4(r1)		;

0000e3be <.Loc.73.1>:
      if ((i & 7) == 0)
    e3be:	1c 41 04 00 	mov	4(r1),	r12	;
    e3c2:	7c f0 07 00 	and.b	#7,	r12	;
    e3c6:	0c 93       	cmp	#0,	r12	;r3 As==00
    e3c8:	06 20       	jnz	$+14     	;abs 0xe3d6

0000e3ca <.Loc.74.1>:
	tty_putc (' ');
    e3ca:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e3ce:	b0 12 84 e2 	call	#57988		;#0xe284
    e3d2:	30 40 de e3 	br	#0xe3de		;

0000e3d6 <.L17>:
      else
	tty_putc (':');
    e3d6:	7c 40 3a 00 	mov.b	#58,	r12	;#0x003a
    e3da:	b0 12 84 e2 	call	#57988		;#0xe284

0000e3de <.L14>:

void
cput_hex_block (char *block, int n)
{
  int i = 0;
  while (n)
    e3de:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e3e2:	dd 23       	jnz	$-68     	;abs 0xe39e

0000e3e4 <.Loc.78.1>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e3e4:	30 40 ea e3 	br	#0xe3ea		;

0000e3e8 <.L19>:
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
    e3e8:	03 43       	nop			

0000e3ea <.L16>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e3ea:	03 43       	nop			
    e3ec:	31 50 06 00 	add	#6,	r1	;
    e3f0:	30 41       	ret			

0000e3f2 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n)
{
    e3f2:	31 80 06 00 	sub	#6,	r1	;

0000e3f6 <.LCFI7>:
    e3f6:	81 4c 02 00 	mov	r12,	2(r1)	;
    e3fa:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e3fe <.Loc.83.1>:
  int i = 0;
    e3fe:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e402 <.Loc.84.1>:
  while (n)
    e402:	30 40 32 e4 	br	#0xe432		;

0000e406 <.L24>:
    {
      cput_nibble (*block);
    e406:	1c 41 02 00 	mov	2(r1),	r12	;
    e40a:	6c 4c       	mov.b	@r12,	r12	;
    e40c:	b0 12 ac e2 	call	#58028		;#0xe2ac

0000e410 <.Loc.87.1>:
      if (--n == 0)
    e410:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e414:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e418:	11 24       	jz	$+36     	;abs 0xe43c

0000e41a <.Loc.89.1>:
	break;
      i++;
    e41a:	91 53 04 00 	inc	4(r1)		;

0000e41e <.Loc.90.1>:
      if ((i & 7) == 0)
    e41e:	1c 41 04 00 	mov	4(r1),	r12	;
    e422:	7c f0 07 00 	and.b	#7,	r12	;
    e426:	0c 93       	cmp	#0,	r12	;r3 As==00
    e428:	04 20       	jnz	$+10     	;abs 0xe432

0000e42a <.Loc.91.1>:
	tty_putc (' ');
    e42a:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e42e:	b0 12 84 e2 	call	#57988		;#0xe284

0000e432 <.L21>:

void
cput_nibble_block (char *block, int n)
{
  int i = 0;
  while (n)
    e432:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e436:	e7 23       	jnz	$-48     	;abs 0xe406

0000e438 <.Loc.93.1>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e438:	30 40 3e e4 	br	#0xe43e		;

0000e43c <.L25>:
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
	break;
    e43c:	03 43       	nop			

0000e43e <.L23>:
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e43e:	03 43       	nop			
    e440:	31 50 06 00 	add	#6,	r1	;
    e444:	30 41       	ret			

0000e446 <cput_number>:

void
cput_number (int n)
{
    e446:	31 80 18 00 	sub	#24,	r1	;#0x0018

0000e44a <.LCFI8>:
    e44a:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e44e <.Loc.99.1>:
  char buf[20];
  int i = 0;
    e44e:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016

0000e452 <.Loc.100.1>:
  if (n < 0)
    e452:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e456:	25 34       	jge	$+76     	;abs 0xe4a2

0000e458 <.Loc.102.1>:
    {
      tty_putc ('-');
    e458:	7c 40 2d 00 	mov.b	#45,	r12	;#0x002d
    e45c:	b0 12 84 e2 	call	#57988		;#0xe284

0000e460 <.Loc.103.1>:
      n = -n;
    e460:	4c 43       	clr.b	r12		;
    e462:	2c 81       	sub	@r1,	r12	;
    e464:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e468 <.Loc.105.1>:
    }
  while (n > 9)
    e468:	30 40 a2 e4 	br	#0xe4a2		;

0000e46c <.L29>:
    {
      buf[i++] = (n%10) + '0';
    e46c:	2c 41       	mov	@r1,	r12	;
    e46e:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e472:	b0 12 78 e7 	call	#59256		;#0xe778
    e476:	4d 4c       	mov.b	r12,	r13	;
    e478:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e47c:	0e 4c       	mov	r12,	r14	;
    e47e:	1e 53       	inc	r14		;
    e480:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e484:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e488:	4e 4d       	mov.b	r13,	r14	;
    e48a:	0d 41       	mov	r1,	r13	;
    e48c:	2d 53       	incd	r13		;
    e48e:	0c 5d       	add	r13,	r12	;
    e490:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e494 <.Loc.108.1>:
      n /= 10;
    e494:	2c 41       	mov	@r1,	r12	;
    e496:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e49a:	b0 12 2c e7 	call	#59180		;#0xe72c
    e49e:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e4a2 <.L28>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e4a2:	7c 40 09 00 	mov.b	#9,	r12	;
    e4a6:	2c 91       	cmp	@r1,	r12	;
    e4a8:	e1 3b       	jl	$-60     	;abs 0xe46c

0000e4aa <.Loc.110.1>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e4aa:	2c 41       	mov	@r1,	r12	;
    e4ac:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e4b0:	b0 12 78 e7 	call	#59256		;#0xe778
    e4b4:	4d 4c       	mov.b	r12,	r13	;
    e4b6:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e4ba:	0e 4c       	mov	r12,	r14	;
    e4bc:	1e 53       	inc	r14		;
    e4be:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e4c2:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e4c6:	4e 4d       	mov.b	r13,	r14	;
    e4c8:	0d 41       	mov	r1,	r13	;
    e4ca:	2d 53       	incd	r13		;
    e4cc:	0c 5d       	add	r13,	r12	;
    e4ce:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e4d2 <.Loc.111.1>:
  while (i > 0)
    e4d2:	30 40 e8 e4 	br	#0xe4e8		;

0000e4d6 <.L31>:
    tty_putc (buf[--i]);
    e4d6:	b1 53 16 00 	add	#-1,	22(r1)	;r3 As==11, 0x0016
    e4da:	0c 41       	mov	r1,	r12	;
    e4dc:	2c 53       	incd	r12		;
    e4de:	1c 51 16 00 	add	22(r1),	r12	;0x00016
    e4e2:	6c 4c       	mov.b	@r12,	r12	;
    e4e4:	b0 12 84 e2 	call	#57988		;#0xe284

0000e4e8 <.L30>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e4e8:	4c 43       	clr.b	r12		;
    e4ea:	1c 91 16 00 	cmp	22(r1),	r12	;0x00016
    e4ee:	f3 3b       	jl	$-24     	;abs 0xe4d6

0000e4f0 <.Loc.113.1>:
    tty_putc (buf[--i]);
}
    e4f0:	03 43       	nop			
    e4f2:	31 50 18 00 	add	#24,	r1	;#0x0018
    e4f6:	30 41       	ret			

0000e4f8 <cprintf>:

void
cprintf (const char *fmt, ...)
{
    e4f8:	31 80 06 00 	sub	#6,	r1	;

0000e4fc <.LCFI9>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e4fc:	0c 41       	mov	r1,	r12	;
    e4fe:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    e502:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e506 <.Loc.124.1>:

  while (*fmt)
    e506:	30 40 da e6 	br	#0xe6da		;

0000e50a <.L49>:
    {
      if (*fmt != '%')
    e50a:	1c 41 08 00 	mov	8(r1),	r12	;
    e50e:	6c 4c       	mov.b	@r12,	r12	;
    e510:	7c 90 25 00 	cmp.b	#37,	r12	;#0x0025
    e514:	07 24       	jz	$+16     	;abs 0xe524

0000e516 <.Loc.127.1>:
	tty_putc (*fmt);
    e516:	1c 41 08 00 	mov	8(r1),	r12	;
    e51a:	6c 4c       	mov.b	@r12,	r12	;
    e51c:	b0 12 84 e2 	call	#57988		;#0xe284
    e520:	30 40 d6 e6 	br	#0xe6d6		;

0000e524 <.L34>:
      else
	switch (*++fmt)
    e524:	91 53 08 00 	inc	8(r1)		;
    e528:	1c 41 08 00 	mov	8(r1),	r12	;
    e52c:	6c 4c       	mov.b	@r12,	r12	;
    e52e:	3c 90 64 00 	cmp	#100,	r12	;#0x0064
    e532:	44 24       	jz	$+138    	;abs 0xe5bc
    e534:	7d 40 64 00 	mov.b	#100,	r13	;#0x0064
    e538:	0d 9c       	cmp	r12,	r13	;
    e53a:	14 38       	jl	$+42     	;abs 0xe564
    e53c:	3c 90 42 00 	cmp	#66,	r12	;#0x0042
    e540:	5b 24       	jz	$+184    	;abs 0xe5f8
    e542:	7d 40 42 00 	mov.b	#66,	r13	;#0x0042
    e546:	0d 9c       	cmp	r12,	r13	;
    e548:	05 38       	jl	$+12     	;abs 0xe554
    e54a:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e54e:	21 24       	jz	$+68     	;abs 0xe592
    e550:	30 40 d6 e6 	br	#0xe6d6		;

0000e554 <.L39>:
    e554:	3c 90 62 00 	cmp	#98,	r12	;#0x0062
    e558:	40 24       	jz	$+130    	;abs 0xe5da
    e55a:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    e55e:	1f 24       	jz	$+64     	;abs 0xe59e
    e560:	30 40 d6 e6 	br	#0xe6d6		;

0000e564 <.L37>:
    e564:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    e568:	a9 24       	jz	$+340    	;abs 0xe6bc
    e56a:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    e56e:	0d 9c       	cmp	r12,	r13	;
    e570:	08 38       	jl	$+18     	;abs 0xe582
    e572:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    e576:	5e 24       	jz	$+190    	;abs 0xe634
    e578:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    e57c:	87 24       	jz	$+272    	;abs 0xe68c
    e57e:	30 40 d6 e6 	br	#0xe6d6		;

0000e582 <.L44>:
    e582:	3c 90 77 00 	cmp	#119,	r12	;#0x0077
    e586:	47 24       	jz	$+144    	;abs 0xe616
    e588:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    e58c:	67 24       	jz	$+208    	;abs 0xe65c
    e58e:	30 40 d6 e6 	br	#0xe6d6		;

0000e592 <.L40>:
	  {
	  case '%':
	    tty_putc ('%');
    e592:	7c 40 25 00 	mov.b	#37,	r12	;#0x0025
    e596:	b0 12 84 e2 	call	#57988		;#0xe284

0000e59a <.Loc.133.1>:
	    break;
    e59a:	30 40 d6 e6 	br	#0xe6d6		;

0000e59e <.L42>:
	  case 'c':
	    i = va_arg (v, int);
    e59e:	2c 41       	mov	@r1,	r12	;
    e5a0:	1c 53       	inc	r12		;
    e5a2:	1c c3       	bic	#1,	r12	;r3 As==01
    e5a4:	0d 4c       	mov	r12,	r13	;
    e5a6:	2d 53       	incd	r13		;
    e5a8:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5ac:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5b0 <.Loc.136.1>:
	    tty_putc(i);
    e5b0:	1c 41 02 00 	mov	2(r1),	r12	;
    e5b4:	b0 12 84 e2 	call	#57988		;#0xe284

0000e5b8 <.Loc.137.1>:
	    break;
    e5b8:	30 40 d6 e6 	br	#0xe6d6		;

0000e5bc <.L36>:
	  case 'd':
	    i = va_arg (v, int);
    e5bc:	2c 41       	mov	@r1,	r12	;
    e5be:	1c 53       	inc	r12		;
    e5c0:	1c c3       	bic	#1,	r12	;r3 As==01
    e5c2:	0d 4c       	mov	r12,	r13	;
    e5c4:	2d 53       	incd	r13		;
    e5c6:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5ca:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5ce <.Loc.140.1>:
	    cput_number(i);
    e5ce:	1c 41 02 00 	mov	2(r1),	r12	;
    e5d2:	b0 12 46 e4 	call	#58438		;#0xe446

0000e5d6 <.Loc.141.1>:
	    break;
    e5d6:	30 40 d6 e6 	br	#0xe6d6		;

0000e5da <.L41>:
	  case 'b':
	    i = va_arg (v, int);
    e5da:	2c 41       	mov	@r1,	r12	;
    e5dc:	1c 53       	inc	r12		;
    e5de:	1c c3       	bic	#1,	r12	;r3 As==01
    e5e0:	0d 4c       	mov	r12,	r13	;
    e5e2:	2d 53       	incd	r13		;
    e5e4:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5e8:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5ec <.Loc.144.1>:
	    cput_hex_byte (i);
    e5ec:	1c 41 02 00 	mov	2(r1),	r12	;
    e5f0:	b0 12 c6 e2 	call	#58054		;#0xe2c6

0000e5f4 <.Loc.145.1>:
	    break;
    e5f4:	30 40 d6 e6 	br	#0xe6d6		;

0000e5f8 <.L38>:
	  case 'B':
	    i = va_arg (v, int);
    e5f8:	2c 41       	mov	@r1,	r12	;
    e5fa:	1c 53       	inc	r12		;
    e5fc:	1c c3       	bic	#1,	r12	;r3 As==01
    e5fe:	0d 4c       	mov	r12,	r13	;
    e600:	2d 53       	incd	r13		;
    e602:	81 4d 00 00 	mov	r13,	0(r1)	;
    e606:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e60a <.Loc.148.1>:
	    cput_binary_byte (i);
    e60a:	1c 41 02 00 	mov	2(r1),	r12	;
    e60e:	b0 12 e2 e2 	call	#58082		;#0xe2e2

0000e612 <.Loc.149.1>:
	    break;
    e612:	30 40 d6 e6 	br	#0xe6d6		;

0000e616 <.L47>:
	  case 'w':
	    i = va_arg (v, int);
    e616:	2c 41       	mov	@r1,	r12	;
    e618:	1c 53       	inc	r12		;
    e61a:	1c c3       	bic	#1,	r12	;r3 As==01
    e61c:	0d 4c       	mov	r12,	r13	;
    e61e:	2d 53       	incd	r13		;
    e620:	81 4d 00 00 	mov	r13,	0(r1)	;
    e624:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e628 <.Loc.152.1>:
	    cput_hex_word (i);
    e628:	1c 41 02 00 	mov	2(r1),	r12	;
    e62c:	b0 12 22 e3 	call	#58146		;#0xe322

0000e630 <.Loc.153.1>:
	    break;
    e630:	30 40 d6 e6 	br	#0xe6d6		;

0000e634 <.L45>:
	  case 'l':
	    i = va_arg (v, int);
    e634:	2c 41       	mov	@r1,	r12	;
    e636:	1c 53       	inc	r12		;
    e638:	1c c3       	bic	#1,	r12	;r3 As==01
    e63a:	0d 4c       	mov	r12,	r13	;
    e63c:	2d 53       	incd	r13		;
    e63e:	81 4d 00 00 	mov	r13,	0(r1)	;
    e642:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e646 <.Loc.156.1>:
	    cput_hex_long (i);
    e646:	1e 41 02 00 	mov	2(r1),	r14	;
    e64a:	0c 4e       	mov	r14,	r12	;
    e64c:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e650:	0d 7d       	subc	r13,	r13	;
    e652:	3d e3       	inv	r13		;
    e654:	b0 12 3e e3 	call	#58174		;#0xe33e

0000e658 <.Loc.157.1>:
	    break;
    e658:	30 40 d6 e6 	br	#0xe6d6		;

0000e65c <.L48>:
	  case 'x':
	    s = va_arg (v, char *);
    e65c:	2c 41       	mov	@r1,	r12	;
    e65e:	0d 4c       	mov	r12,	r13	;
    e660:	2d 53       	incd	r13		;
    e662:	81 4d 00 00 	mov	r13,	0(r1)	;
    e666:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e66a <.Loc.160.1>:
	    i = va_arg (v, int);
    e66a:	2c 41       	mov	@r1,	r12	;
    e66c:	1c 53       	inc	r12		;
    e66e:	1c c3       	bic	#1,	r12	;r3 As==01
    e670:	0d 4c       	mov	r12,	r13	;
    e672:	2d 53       	incd	r13		;
    e674:	81 4d 00 00 	mov	r13,	0(r1)	;
    e678:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e67c <.Loc.161.1>:
	    cput_hex_block (s, i);
    e67c:	1d 41 02 00 	mov	2(r1),	r13	;
    e680:	1c 41 04 00 	mov	4(r1),	r12	;
    e684:	b0 12 8a e3 	call	#58250		;#0xe38a

0000e688 <.Loc.162.1>:
	    break;
    e688:	30 40 d6 e6 	br	#0xe6d6		;

0000e68c <.L46>:
	  case 'n':
	    s = va_arg (v, char *);
    e68c:	2c 41       	mov	@r1,	r12	;
    e68e:	0d 4c       	mov	r12,	r13	;
    e690:	2d 53       	incd	r13		;
    e692:	81 4d 00 00 	mov	r13,	0(r1)	;
    e696:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e69a <.Loc.165.1>:
	    i = va_arg (v, int);
    e69a:	2c 41       	mov	@r1,	r12	;
    e69c:	1c 53       	inc	r12		;
    e69e:	1c c3       	bic	#1,	r12	;r3 As==01
    e6a0:	0d 4c       	mov	r12,	r13	;
    e6a2:	2d 53       	incd	r13		;
    e6a4:	81 4d 00 00 	mov	r13,	0(r1)	;
    e6a8:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e6ac <.Loc.166.1>:
	    cput_nibble_block (s, i);
    e6ac:	1d 41 02 00 	mov	2(r1),	r13	;
    e6b0:	1c 41 04 00 	mov	4(r1),	r12	;
    e6b4:	b0 12 f2 e3 	call	#58354		;#0xe3f2

0000e6b8 <.Loc.167.1>:
	    break;
    e6b8:	30 40 d6 e6 	br	#0xe6d6		;

0000e6bc <.L43>:
	  case 's':
	    s = va_arg (v, char *);
    e6bc:	2c 41       	mov	@r1,	r12	;
    e6be:	0d 4c       	mov	r12,	r13	;
    e6c0:	2d 53       	incd	r13		;
    e6c2:	81 4d 00 00 	mov	r13,	0(r1)	;
    e6c6:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e6ca <.Loc.170.1>:
	    tty_putc (s[0]);
    e6ca:	1c 41 04 00 	mov	4(r1),	r12	;
    e6ce:	6c 4c       	mov.b	@r12,	r12	;
    e6d0:	b0 12 84 e2 	call	#57988		;#0xe284

0000e6d4 <.Loc.171.1>:
	    break;
    e6d4:	03 43       	nop			

0000e6d6 <.L35>:
	  }
      fmt ++;
    e6d6:	91 53 08 00 	inc	8(r1)		;

0000e6da <.L33>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e6da:	1c 41 08 00 	mov	8(r1),	r12	;
    e6de:	6c 4c       	mov.b	@r12,	r12	;
    e6e0:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6e2:	13 23       	jnz	$-472    	;abs 0xe50a

0000e6e4 <.Loc.175.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e6e4:	03 43       	nop			
    e6e6:	31 50 06 00 	add	#6,	r1	;
    e6ea:	30 41       	ret			

0000e6ec <udivmodhi4>:
    e6ec:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e6f0 <.Loc.35.1>:
    e6f0:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e6f2 <.L2>:
    e6f2:	0d 9c       	cmp	r12,	r13	;
    e6f4:	08 28       	jnc	$+18     	;abs 0xe706

0000e6f6 <.L15>:
    e6f6:	4f 43       	clr.b	r15		;

0000e6f8 <.L4>:
    e6f8:	0b 93       	cmp	#0,	r11	;r3 As==00
    e6fa:	0e 20       	jnz	$+30     	;abs 0xe718

0000e6fc <.L5>:
    e6fc:	0e 93       	cmp	#0,	r14	;r3 As==00
    e6fe:	01 24       	jz	$+4      	;abs 0xe702
    e700:	0f 4c       	mov	r12,	r15	;

0000e702 <.L1>:
    e702:	0c 4f       	mov	r15,	r12	;
    e704:	30 41       	ret			

0000e706 <.L3>:
    e706:	3f 53       	add	#-1,	r15	;r3 As==11

0000e708 <.Loc.38.1>:
    e708:	0f 93       	cmp	#0,	r15	;r3 As==00
    e70a:	f8 27       	jz	$-14     	;abs 0xe6fc

0000e70c <.Loc.38.1>:
    e70c:	0d 93       	cmp	#0,	r13	;r3 As==00
    e70e:	f3 3b       	jl	$-24     	;abs 0xe6f6

0000e710 <.Loc.40.1>:
    e710:	0d 5d       	rla	r13		;

0000e712 <.Loc.41.1>:
    e712:	0b 5b       	rla	r11		;
    e714:	30 40 f2 e6 	br	#0xe6f2		;

0000e718 <.L9>:
    e718:	0c 9d       	cmp	r13,	r12	;
    e71a:	02 28       	jnc	$+6      	;abs 0xe720

0000e71c <.Loc.47.1>:
    e71c:	0c 8d       	sub	r13,	r12	;

0000e71e <.Loc.48.1>:
    e71e:	0f db       	bis	r11,	r15	;

0000e720 <.L8>:
    e720:	12 c3       	clrc			
    e722:	0b 10       	rrc	r11		;

0000e724 <.Loc.51.1>:
    e724:	12 c3       	clrc			
    e726:	0d 10       	rrc	r13		;
    e728:	30 40 f8 e6 	br	#0xe6f8		;

0000e72c <__mspabi_divi>:
    e72c:	0a 12       	push	r10		;

0000e72e <.LCFI0>:
    e72e:	0f 4c       	mov	r12,	r15	;
    e730:	0e 4d       	mov	r13,	r14	;

0000e732 <.LVL14>:
    e732:	3b 40 ec e6 	mov	#59116,	r11	;#0xe6ec

0000e736 <.Loc.64.1>:
    e736:	0c 93       	cmp	#0,	r12	;r3 As==00
    e738:	1a 34       	jge	$+54     	;abs 0xe76e

0000e73a <.Loc.66.1>:
    e73a:	4c 43       	clr.b	r12		;

0000e73c <.LVL15>:
    e73c:	0c 8f       	sub	r15,	r12	;
    e73e:	0f 4c       	mov	r12,	r15	;

0000e740 <.LVL16>:
    e740:	0d 93       	cmp	#0,	r13	;r3 As==00
    e742:	0d 34       	jge	$+28     	;abs 0xe75e

0000e744 <.Loc.67.1>:
    e744:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e746 <.L21>:
    e746:	0d 43       	clr	r13		;
    e748:	0d 8e       	sub	r14,	r13	;

0000e74a <.LVL18>:
    e74a:	4e 43       	clr.b	r14		;

0000e74c <.LVL19>:
    e74c:	0c 4f       	mov	r15,	r12	;

0000e74e <.LVL20>:
    e74e:	8b 12       	call	r11		;

0000e750 <.LVL21>:
    e750:	1a 93       	cmp	#1,	r10	;r3 As==01
    e752:	03 24       	jz	$+8      	;abs 0xe75a

0000e754 <.L20>:
    e754:	4d 43       	clr.b	r13		;
    e756:	0d 8c       	sub	r12,	r13	;
    e758:	0c 4d       	mov	r13,	r12	;

0000e75a <.L16>:
    e75a:	3a 41       	pop	r10		;
    e75c:	30 41       	ret			

0000e75e <.L18>:
    e75e:	4e 43       	clr.b	r14		;
    e760:	8b 12       	call	r11		;

0000e762 <.LVL25>:
    e762:	30 40 54 e7 	br	#0xe754		;

0000e766 <.L27>:
    e766:	4e 43       	clr.b	r14		;
    e768:	8b 12       	call	r11		;

0000e76a <.LVL27>:
    e76a:	30 40 5a e7 	br	#0xe75a		;

0000e76e <.L17>:
    e76e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e770:	fa 37       	jge	$-10     	;abs 0xe766

0000e772 <.Loc.61.1>:
    e772:	4a 43       	clr.b	r10		;
    e774:	30 40 46 e7 	br	#0xe746		;

0000e778 <__mspabi_remi>:
    e778:	0a 12       	push	r10		;

0000e77a <.LCFI1>:
    e77a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e77c:	13 34       	jge	$+40     	;abs 0xe7a4

0000e77e <.Loc.92.1>:
    e77e:	4e 43       	clr.b	r14		;
    e780:	0e 8c       	sub	r12,	r14	;
    e782:	0c 4e       	mov	r14,	r12	;

0000e784 <.LVL31>:
    e784:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e786 <.L29>:
    e786:	0d 93       	cmp	#0,	r13	;r3 As==00
    e788:	03 34       	jge	$+8      	;abs 0xe790
    e78a:	4e 43       	clr.b	r14		;
    e78c:	0e 8d       	sub	r13,	r14	;
    e78e:	0d 4e       	mov	r14,	r13	;

0000e790 <.L30>:
    e790:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e792:	b0 12 ec e6 	call	#59116		;#0xe6ec

0000e796 <.LVL34>:
    e796:	0a 93       	cmp	#0,	r10	;r3 As==00
    e798:	03 24       	jz	$+8      	;abs 0xe7a0

0000e79a <.LVL35>:
    e79a:	4d 43       	clr.b	r13		;
    e79c:	0d 8c       	sub	r12,	r13	;
    e79e:	0c 4d       	mov	r13,	r12	;

0000e7a0 <.L28>:
    e7a0:	3a 41       	pop	r10		;
    e7a2:	30 41       	ret			

0000e7a4 <.L32>:
    e7a4:	4a 43       	clr.b	r10		;
    e7a6:	30 40 86 e7 	br	#0xe786		;

0000e7aa <__mspabi_divu>:
    e7aa:	4e 43       	clr.b	r14		;
    e7ac:	b0 12 ec e6 	call	#59116		;#0xe6ec

0000e7b0 <.LVL39>:
    e7b0:	30 41       	ret			

0000e7b2 <__mspabi_remu>:
    e7b2:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e7b4:	b0 12 ec e6 	call	#59116		;#0xe6ec

0000e7b8 <.LVL41>:
    e7b8:	30 41       	ret			

0000e7ba <__mspabi_func_epilog_7>:
    e7ba:	34 41       	pop	r4		;

0000e7bc <__mspabi_func_epilog_6>:
    e7bc:	35 41       	pop	r5		;

0000e7be <__mspabi_func_epilog_5>:
    e7be:	36 41       	pop	r6		;

0000e7c0 <__mspabi_func_epilog_4>:
    e7c0:	37 41       	pop	r7		;

0000e7c2 <__mspabi_func_epilog_3>:
    e7c2:	38 41       	pop	r8		;

0000e7c4 <__mspabi_func_epilog_2>:
    e7c4:	39 41       	pop	r9		;

0000e7c6 <__mspabi_func_epilog_1>:
    e7c6:	3a 41       	pop	r10		;
    e7c8:	30 41       	ret			

0000e7ca <__mspabi_srai_15>:
    e7ca:	0c 11       	rra	r12		;

0000e7cc <__mspabi_srai_14>:
    e7cc:	0c 11       	rra	r12		;

0000e7ce <__mspabi_srai_13>:
    e7ce:	0c 11       	rra	r12		;

0000e7d0 <__mspabi_srai_12>:
    e7d0:	0c 11       	rra	r12		;

0000e7d2 <__mspabi_srai_11>:
    e7d2:	0c 11       	rra	r12		;

0000e7d4 <__mspabi_srai_10>:
    e7d4:	0c 11       	rra	r12		;

0000e7d6 <__mspabi_srai_9>:
    e7d6:	0c 11       	rra	r12		;

0000e7d8 <__mspabi_srai_8>:
    e7d8:	0c 11       	rra	r12		;

0000e7da <__mspabi_srai_7>:
    e7da:	0c 11       	rra	r12		;

0000e7dc <__mspabi_srai_6>:
    e7dc:	0c 11       	rra	r12		;

0000e7de <__mspabi_srai_5>:
    e7de:	0c 11       	rra	r12		;

0000e7e0 <__mspabi_srai_4>:
    e7e0:	0c 11       	rra	r12		;

0000e7e2 <__mspabi_srai_3>:
    e7e2:	0c 11       	rra	r12		;

0000e7e4 <__mspabi_srai_2>:
    e7e4:	0c 11       	rra	r12		;

0000e7e6 <__mspabi_srai_1>:
    e7e6:	0c 11       	rra	r12		;
    e7e8:	30 41       	ret			

0000e7ea <.L11>:
    e7ea:	3d 53       	add	#-1,	r13	;r3 As==11
    e7ec:	0c 11       	rra	r12		;

0000e7ee <__mspabi_srai>:
    e7ee:	0d 93       	cmp	#0,	r13	;r3 As==00
    e7f0:	fc 23       	jnz	$-6      	;abs 0xe7ea
    e7f2:	30 41       	ret			

0000e7f4 <__mspabi_sral_15>:
    e7f4:	0d 11       	rra	r13		;
    e7f6:	0c 10       	rrc	r12		;

0000e7f8 <__mspabi_sral_14>:
    e7f8:	0d 11       	rra	r13		;
    e7fa:	0c 10       	rrc	r12		;

0000e7fc <__mspabi_sral_13>:
    e7fc:	0d 11       	rra	r13		;
    e7fe:	0c 10       	rrc	r12		;

0000e800 <__mspabi_sral_12>:
    e800:	0d 11       	rra	r13		;
    e802:	0c 10       	rrc	r12		;

0000e804 <__mspabi_sral_11>:
    e804:	0d 11       	rra	r13		;
    e806:	0c 10       	rrc	r12		;

0000e808 <__mspabi_sral_10>:
    e808:	0d 11       	rra	r13		;
    e80a:	0c 10       	rrc	r12		;

0000e80c <__mspabi_sral_9>:
    e80c:	0d 11       	rra	r13		;
    e80e:	0c 10       	rrc	r12		;

0000e810 <__mspabi_sral_8>:
    e810:	0d 11       	rra	r13		;
    e812:	0c 10       	rrc	r12		;

0000e814 <__mspabi_sral_7>:
    e814:	0d 11       	rra	r13		;
    e816:	0c 10       	rrc	r12		;

0000e818 <__mspabi_sral_6>:
    e818:	0d 11       	rra	r13		;
    e81a:	0c 10       	rrc	r12		;

0000e81c <__mspabi_sral_5>:
    e81c:	0d 11       	rra	r13		;
    e81e:	0c 10       	rrc	r12		;

0000e820 <__mspabi_sral_4>:
    e820:	0d 11       	rra	r13		;
    e822:	0c 10       	rrc	r12		;

0000e824 <__mspabi_sral_3>:
    e824:	0d 11       	rra	r13		;
    e826:	0c 10       	rrc	r12		;

0000e828 <__mspabi_sral_2>:
    e828:	0d 11       	rra	r13		;
    e82a:	0c 10       	rrc	r12		;

0000e82c <__mspabi_sral_1>:
    e82c:	0d 11       	rra	r13		;
    e82e:	0c 10       	rrc	r12		;
    e830:	30 41       	ret			

0000e832 <.L12>:
    e832:	3e 53       	add	#-1,	r14	;r3 As==11
    e834:	0d 11       	rra	r13		;
    e836:	0c 10       	rrc	r12		;

0000e838 <__mspabi_sral>:
    e838:	0e 93       	cmp	#0,	r14	;r3 As==00
    e83a:	fb 23       	jnz	$-8      	;abs 0xe832
    e83c:	30 41       	ret			

0000e83e <__mspabi_srli_15>:
    e83e:	12 c3       	clrc			
    e840:	0c 10       	rrc	r12		;

0000e842 <__mspabi_srli_14>:
    e842:	12 c3       	clrc			
    e844:	0c 10       	rrc	r12		;

0000e846 <__mspabi_srli_13>:
    e846:	12 c3       	clrc			
    e848:	0c 10       	rrc	r12		;

0000e84a <__mspabi_srli_12>:
    e84a:	12 c3       	clrc			
    e84c:	0c 10       	rrc	r12		;

0000e84e <__mspabi_srli_11>:
    e84e:	12 c3       	clrc			
    e850:	0c 10       	rrc	r12		;

0000e852 <__mspabi_srli_10>:
    e852:	12 c3       	clrc			
    e854:	0c 10       	rrc	r12		;

0000e856 <__mspabi_srli_9>:
    e856:	12 c3       	clrc			
    e858:	0c 10       	rrc	r12		;

0000e85a <__mspabi_srli_8>:
    e85a:	12 c3       	clrc			
    e85c:	0c 10       	rrc	r12		;

0000e85e <__mspabi_srli_7>:
    e85e:	12 c3       	clrc			
    e860:	0c 10       	rrc	r12		;

0000e862 <__mspabi_srli_6>:
    e862:	12 c3       	clrc			
    e864:	0c 10       	rrc	r12		;

0000e866 <__mspabi_srli_5>:
    e866:	12 c3       	clrc			
    e868:	0c 10       	rrc	r12		;

0000e86a <__mspabi_srli_4>:
    e86a:	12 c3       	clrc			
    e86c:	0c 10       	rrc	r12		;

0000e86e <__mspabi_srli_3>:
    e86e:	12 c3       	clrc			
    e870:	0c 10       	rrc	r12		;

0000e872 <__mspabi_srli_2>:
    e872:	12 c3       	clrc			
    e874:	0c 10       	rrc	r12		;

0000e876 <__mspabi_srli_1>:
    e876:	12 c3       	clrc			
    e878:	0c 10       	rrc	r12		;
    e87a:	30 41       	ret			

0000e87c <.L11>:
    e87c:	3d 53       	add	#-1,	r13	;r3 As==11
    e87e:	12 c3       	clrc			
    e880:	0c 10       	rrc	r12		;

0000e882 <__mspabi_srli>:
    e882:	0d 93       	cmp	#0,	r13	;r3 As==00
    e884:	fb 23       	jnz	$-8      	;abs 0xe87c
    e886:	30 41       	ret			

0000e888 <__mspabi_srll_15>:
    e888:	12 c3       	clrc			
    e88a:	0d 10       	rrc	r13		;
    e88c:	0c 10       	rrc	r12		;

0000e88e <__mspabi_srll_14>:
    e88e:	12 c3       	clrc			
    e890:	0d 10       	rrc	r13		;
    e892:	0c 10       	rrc	r12		;

0000e894 <__mspabi_srll_13>:
    e894:	12 c3       	clrc			
    e896:	0d 10       	rrc	r13		;
    e898:	0c 10       	rrc	r12		;

0000e89a <__mspabi_srll_12>:
    e89a:	12 c3       	clrc			
    e89c:	0d 10       	rrc	r13		;
    e89e:	0c 10       	rrc	r12		;

0000e8a0 <__mspabi_srll_11>:
    e8a0:	12 c3       	clrc			
    e8a2:	0d 10       	rrc	r13		;
    e8a4:	0c 10       	rrc	r12		;

0000e8a6 <__mspabi_srll_10>:
    e8a6:	12 c3       	clrc			
    e8a8:	0d 10       	rrc	r13		;
    e8aa:	0c 10       	rrc	r12		;

0000e8ac <__mspabi_srll_9>:
    e8ac:	12 c3       	clrc			
    e8ae:	0d 10       	rrc	r13		;
    e8b0:	0c 10       	rrc	r12		;

0000e8b2 <__mspabi_srll_8>:
    e8b2:	12 c3       	clrc			
    e8b4:	0d 10       	rrc	r13		;
    e8b6:	0c 10       	rrc	r12		;

0000e8b8 <__mspabi_srll_7>:
    e8b8:	12 c3       	clrc			
    e8ba:	0d 10       	rrc	r13		;
    e8bc:	0c 10       	rrc	r12		;

0000e8be <__mspabi_srll_6>:
    e8be:	12 c3       	clrc			
    e8c0:	0d 10       	rrc	r13		;
    e8c2:	0c 10       	rrc	r12		;

0000e8c4 <__mspabi_srll_5>:
    e8c4:	12 c3       	clrc			
    e8c6:	0d 10       	rrc	r13		;
    e8c8:	0c 10       	rrc	r12		;

0000e8ca <__mspabi_srll_4>:
    e8ca:	12 c3       	clrc			
    e8cc:	0d 10       	rrc	r13		;
    e8ce:	0c 10       	rrc	r12		;

0000e8d0 <__mspabi_srll_3>:
    e8d0:	12 c3       	clrc			
    e8d2:	0d 10       	rrc	r13		;
    e8d4:	0c 10       	rrc	r12		;

0000e8d6 <__mspabi_srll_2>:
    e8d6:	12 c3       	clrc			
    e8d8:	0d 10       	rrc	r13		;
    e8da:	0c 10       	rrc	r12		;

0000e8dc <__mspabi_srll_1>:
    e8dc:	12 c3       	clrc			
    e8de:	0d 10       	rrc	r13		;
    e8e0:	0c 10       	rrc	r12		;
    e8e2:	30 41       	ret			

0000e8e4 <.L12>:
    e8e4:	3e 53       	add	#-1,	r14	;r3 As==11
    e8e6:	12 c3       	clrc			
    e8e8:	0d 10       	rrc	r13		;
    e8ea:	0c 10       	rrc	r12		;

0000e8ec <__mspabi_srll>:
    e8ec:	0e 93       	cmp	#0,	r14	;r3 As==00
    e8ee:	fa 23       	jnz	$-10     	;abs 0xe8e4
    e8f0:	30 41       	ret			

0000e8f2 <memmove>:
    e8f2:	0d 9c       	cmp	r12,	r13	;
    e8f4:	0a 28       	jnc	$+22     	;abs 0xe90a

0000e8f6 <.L5>:
    e8f6:	0f 4c       	mov	r12,	r15	;
    e8f8:	0e 5c       	add	r12,	r14	;

0000e8fa <.L3>:
    e8fa:	0e 9f       	cmp	r15,	r14	;
    e8fc:	0d 24       	jz	$+28     	;abs 0xe918

0000e8fe <.LVL3>:
    e8fe:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    e902:	1f 53       	inc	r15		;

0000e904 <.LVL4>:
    e904:	1d 53       	inc	r13		;
    e906:	30 40 fa e8 	br	#0xe8fa		;

0000e90a <.L2>:
    e90a:	0f 4d       	mov	r13,	r15	;
    e90c:	0f 5e       	add	r14,	r15	;
    e90e:	0c 9f       	cmp	r15,	r12	;
    e910:	f2 2f       	jc	$-26     	;abs 0xe8f6

0000e912 <.L4>:
    e912:	3e 53       	add	#-1,	r14	;r3 As==11

0000e914 <.LVL7>:
    e914:	3e 93       	cmp	#-1,	r14	;r3 As==11
    e916:	01 20       	jnz	$+4      	;abs 0xe91a

0000e918 <.L10>:
    e918:	30 41       	ret			

0000e91a <.L6>:
    e91a:	0b 4c       	mov	r12,	r11	;
    e91c:	0b 5e       	add	r14,	r11	;
    e91e:	0f 4d       	mov	r13,	r15	;
    e920:	0f 5e       	add	r14,	r15	;
    e922:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    e926:	30 40 12 e9 	br	#0xe912		;

0000e92a <memset>:
    e92a:	0f 4c       	mov	r12,	r15	;
    e92c:	0e 5c       	add	r12,	r14	;

0000e92e <.L2>:
    e92e:	0f 9e       	cmp	r14,	r15	;
    e930:	01 20       	jnz	$+4      	;abs 0xe934

0000e932 <.Loc.104.1>:
    e932:	30 41       	ret			

0000e934 <.L3>:
    e934:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    e938:	1f 53       	inc	r15		;

0000e93a <.LVL4>:
    e93a:	30 40 2e e9 	br	#0xe92e		;

0000e93e <L0>:
    e93e:	30 41       	ret			

0000e940 <__do_global_ctors_aux>:
    e940:	0a 12       	push	r10		;
    e942:	3a 40 14 e0 	mov	#57364,	r10	;#0xe014

0000e946 <.L2>:
    e946:	2c 4a       	mov	@r10,	r12	;
    e948:	3c 93       	cmp	#-1,	r12	;r3 As==11
    e94a:	02 20       	jnz	$+6      	;abs 0xe950
    e94c:	3a 41       	pop	r10		;
    e94e:	30 41       	ret			

0000e950 <.L3>:
    e950:	8c 12       	call	r12		;
    e952:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    e956:	30 40 46 e9 	br	#0xe946		;

0000e95a <call___do_global_ctors_aux>:
    e95a:	b0 12 22 e1 	call	#57634		;#0xe122
    e95e:	b0 12 40 e9 	call	#59712		;#0xe940

0000e962 <L0>:
    e962:	b0 12 5a e0 	call	#57434		;#0xe05a

0000e966 <.Loc.19.1>:
    e966:	b0 12 4c e0 	call	#57420		;#0xe04c

0000e96a <.Loc.20.1>:
    e96a:	30 41       	ret			

0000e96c <__msp430_fini>:
    e96c:	b0 12 68 e0 	call	#57448		;#0xe068

0000e970 <L0>:
    e970:	b0 12 d4 e0 	call	#57556		;#0xe0d4

0000e974 <L0>:
    e974:	30 41       	ret			
