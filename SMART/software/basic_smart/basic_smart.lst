
basic_smart.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fee0 l    d  .key	00000000 .key
0000fae0 l    d  .keyfunction	00000000 .keyfunction
0000ffee l    d  __interrupt_vector_8	00000000 __interrupt_vector_8
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e02c l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000202 l    d  .bss	00000000 .bss
00000215 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e088 l       .text	00000000 _msp430_run_array
0000e096 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 cprintf.c
0000e009 l     O .rodata	00000011 hex
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e024 l     O .rodata	00000000 __CTOR_LIST__
0000e028 l     O .rodata	00000000 __DTOR_LIST__
0000e01c l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000ead8 l     O .text	00000000 __TMC_LIST__
0000e09c l     F .text	00000000 deregister_tm_clones
0000e0b6 l     F .text	00000000 register_tm_clones
0000e0e4 l     F .text	00000000 __do_global_dtors_aux
00000202 l     O .bss	00000000 completed.3056
00000204 l     O .bss	00000000 dtor_idx.3058
0000e132 l     F .text	00000000 call___do_global_dtors_aux
0000e132 l     F .text	00000000 frame_dummy
00000206 l     O .bss	00000000 object.3071
0000e14a l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e026 l     O .rodata	00000000 __CTOR_END__
0000e01c l     O .rodata	00000000 __FRAME_END__
0000eaa2 l     F .text	00000000 __do_global_ctors_aux
0000eabc l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e9b8 g       .text	00000000 .hidden __mspabi_srli_9
0000e93e g       .text	00000000 .hidden __mspabi_srai_6
0000e948 g       .text	00000000 .hidden __mspabi_srai_1
0000ea08 g       .text	00000000 .hidden __mspabi_srll_10
0000e9b4 g       .text	00000000 .hidden __mspabi_srli_10
0000e96a g       .text	00000000 .hidden __mspabi_sral_10
0000e95a g       .text	00000000 .hidden __mspabi_sral_14
0000e218 g     F .text	00000054 INT_uart_rx
0000e9a0 g       .text	00000000 .hidden __mspabi_srli_15
0000ea54 g     F .text	00000038 memmove
0000e9cc g       .text	00000000 .hidden __mspabi_srli_4
0000e84e g     F .text	00000040 .hidden udivmodhi4
0000e96e g       .text	00000000 .hidden __mspabi_sral_9
0000e9c0 g       .text	00000000 .hidden __mspabi_srli_7
0000ea1a g       .text	00000000 .hidden __mspabi_srll_7
0000ea32 g       .text	00000000 .hidden __mspabi_srll_3
0000e65a g     F .text	000001f4 cprintf
0000e97a g       .text	00000000 .hidden __mspabi_sral_6
0000e98e g       .text	00000000 .hidden __mspabi_sral_1
0000e91e g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e92c g       .text	00000000 .hidden __mspabi_srai_15
0000e2ac g     F .text	00000018 cput_nibble
0000ead8 g     O .text	00000000 .hidden __TMC_END__
0000e9f6 g       .text	00000000 .hidden __mspabi_srll_13
0000e02a g     O .rodata	00000000 .hidden __DTOR_END__
0000e020 g       .rodata	00000000 __fini_array_end
0000e9ac g       .text	00000000 .hidden __mspabi_srli_12
0000e946 g       .text	00000000 .hidden __mspabi_srai_2
0000e944 g       .text	00000000 .hidden __mspabi_srai_3
0000e02c g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e030 g     F .text	0000000e __crt0_init_bss
00000013 g       *ABS*	00000000 __bsssize
0000e936 g       .text	00000000 .hidden __mspabi_srai_10
0000e8da g     F .text	00000032 .hidden __mspabi_remi
0000e052 g     F .text	0000000a __crt0_call_init_then_main
0000e928 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e302 g     F .text	00000050 cput_binary_byte
0000e924 g       .text	00000000 .hidden __mspabi_func_epilog_3
0000ea26 g       .text	00000000 .hidden __mspabi_srll_5
0000e9e4 g       .text	00000000 .hidden __mspabi_srli
0000e3c8 g     F .text	000000f8 cput_hex_long
0000ea02 g       .text	00000000 .hidden __mspabi_srll_11
0000e9c8 g       .text	00000000 .hidden __mspabi_srli_5
00000214 g     O .bss	00000001 rxdata
00000000  w      *UND*	00000000 __deregister_frame_info
00000216 g       .noinit	00000000 end
0000e966 g       .text	00000000 .hidden __mspabi_sral_11
0000e956 g       .text	00000000 .hidden __mspabi_sral_15
0000e93c g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e2c4 g     F .text	0000003e cput_hex_byte
0000e914 g     F .text	00000008 .hidden __mspabi_remu
0000ea20 g       .text	00000000 .hidden __mspabi_srll_6
0000e982 g       .text	00000000 .hidden __mspabi_sral_4
0000e02c g       .text	00000000 _start
0000e352 g     F .text	00000076 cput_hex_word
0000e078 g     F .text	00000000 _msp430_run_fini_array
0000e9d8 g       .text	00000000 .hidden __mspabi_srli_1
0000e9f0 g       .text	00000000 .hidden __mspabi_srll_14
0000e950 g       .text	00000000 .hidden __mspabi_srai
0000e932 g       .text	00000000 .hidden __mspabi_srai_12
0000e9a4 g       .text	00000000 .hidden __mspabi_srli_14
00000002 g       *ABS*	00000000 __romdatacopysize
0000e976 g       .text	00000000 .hidden __mspabi_sral_7
0000e93a g       .text	00000000 .hidden __mspabi_srai_8
0000e9b0 g       .text	00000000 .hidden __mspabi_srli_11
0000e594 g     F .text	000000c6 cput_number
0000e98a g       .text	00000000 .hidden __mspabi_sral_2
0000e4c0 g     F .text	00000088 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e020 g       .rodata	00000000 __fini_array_start
0000e88e g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000eabc g       .text	00000000 __msp430_init
0000ea8c g     F .text	00000014 memset
0000e26c g     F .text	00000040 main
0000e938 g       .text	00000000 .hidden __mspabi_srai_9
0000e934 g       .text	00000000 .hidden __mspabi_srai_11
0000ea2c g       .text	00000000 .hidden __mspabi_srll_4
0000e020 g       .rodata	00000000 __init_array_end
0000e9d4 g       .text	00000000 .hidden __mspabi_srli_2
0000e99a g       .text	00000000 .hidden __mspabi_sral
0000e90c g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
0000fee0 g     O .key	00000100 key
00000000  w      *ABS*	00000000 __rom_highdatastart
0000ead8 g       .text	00000000 __msp430_fini_end
0000e972 g       .text	00000000 .hidden __mspabi_sral_8
0000e95e g       .text	00000000 .hidden __mspabi_sral_13
0000e1f2 g     F .text	00000014 delay
0000e9fc g       .text	00000000 .hidden __mspabi_srll_12
0000ead8 g       *ABS*	00000000 __romdatastart
0000e942 g       .text	00000000 .hidden __mspabi_srai_4
0000e05c g     F .text	00000000 _msp430_run_init_array
0000e9c4 g       .text	00000000 .hidden __mspabi_srli_6
0000e020 g       .rodata	00000000 __preinit_array_end
0000e9d0 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
0000e14a g     F .text	000000a8 copykey
00000202 g       .bss	00000000 __bssstart
0000e920 g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e92e g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .MP430.attributes	00000000 __stack
0000ea0e g       .text	00000000 .hidden __mspabi_srll_9
0000e986 g       .text	00000000 .hidden __mspabi_sral_3
00000202 g       .data	00000000 _edata
0000e962 g       .text	00000000 .hidden __mspabi_sral_12
0000eace g       .text	00000000 __msp430_init_end
0000e206 g     F .text	00000012 tty_putc
0000ea4e g       .text	00000000 .hidden __mspabi_srll
0000e548 g     F .text	0000004c cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000e9ea g       .text	00000000 .hidden __mspabi_srll_15
0000e020 g       .rodata	00000000 __init_array_start
0000e940 g       .text	00000000 .hidden __mspabi_srai_5
0000e930 g       .text	00000000 .hidden __mspabi_srai_13
0000e9a8 g       .text	00000000 .hidden __mspabi_srli_13
00000200 g       .data	00000000 __datastart
0000ea14 g       .text	00000000 .hidden __mspabi_srll_8
0000ea3e g       .text	00000000 .hidden __mspabi_srll_1
0000e020 g       .rodata	00000000 __preinit_array_start
0000e03e g     F .text	00000014 __crt0_movedata
0000e926 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e97e g       .text	00000000 .hidden __mspabi_sral_5
0000e06a g     F .text	00000000 _msp430_run_preinit_array
0000e91c g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e922 g       .text	00000000 .hidden __mspabi_func_epilog_4
0000ea38 g       .text	00000000 .hidden __mspabi_srll_2
0000eace g       .text	00000000 __msp430_fini
0000e9bc g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_8:

0000ffee <__interrupt_vector_8>:
    ffee:	18 e2       	interrupt service routine at 0xe218

Disassembly of section .text:

0000e02c <__crt0_start>:
    e02c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e030 <__crt0_init_bss>:
    e030:	3c 40 02 02 	mov	#514,	r12	;#0x0202

0000e034 <.Loc.74.1>:
    e034:	0d 43       	clr	r13		;

0000e036 <.Loc.75.1>:
    e036:	3e 40 13 00 	mov	#19,	r14	;#0x0013

0000e03a <.Loc.79.1>:
    e03a:	b0 12 8c ea 	call	#60044		;#0xea8c

0000e03e <__crt0_movedata>:
    e03e:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e042 <.Loc.116.1>:
    e042:	3d 40 d8 ea 	mov	#60120,	r13	;#0xead8

0000e046 <.Loc.119.1>:
    e046:	0d 9c       	cmp	r12,	r13	;

0000e048 <.Loc.120.1>:
    e048:	04 24       	jz	$+10     	;abs 0xe052

0000e04a <.Loc.122.1>:
    e04a:	3e 40 02 00 	mov	#2,	r14	;

0000e04e <.Loc.124.1>:
    e04e:	b0 12 54 ea 	call	#59988		;#0xea54

0000e052 <__crt0_call_init_then_main>:
    e052:	b0 12 bc ea 	call	#60092		;#0xeabc

0000e056 <.Loc.196.1>:
    e056:	0c 43       	clr	r12		;

0000e058 <.Loc.197.1>:
    e058:	b0 12 6c e2 	call	#57964		;#0xe26c

0000e05c <_msp430_run_init_array>:
    e05c:	34 40 20 e0 	mov	#57376,	r4	;#0xe020

0000e060 <.Loc.224.1>:
    e060:	35 40 20 e0 	mov	#57376,	r5	;#0xe020

0000e064 <.Loc.225.1>:
    e064:	26 43       	mov	#2,	r6	;r3 As==10

0000e066 <.Loc.226.1>:
    e066:	30 40 88 e0 	br	#0xe088		;

0000e06a <_msp430_run_preinit_array>:
    e06a:	34 40 20 e0 	mov	#57376,	r4	;#0xe020

0000e06e <.Loc.232.1>:
    e06e:	35 40 20 e0 	mov	#57376,	r5	;#0xe020

0000e072 <.Loc.233.1>:
    e072:	26 43       	mov	#2,	r6	;r3 As==10

0000e074 <.Loc.234.1>:
    e074:	30 40 88 e0 	br	#0xe088		;

0000e078 <_msp430_run_fini_array>:
    e078:	34 40 20 e0 	mov	#57376,	r4	;#0xe020

0000e07c <.Loc.240.1>:
    e07c:	35 40 20 e0 	mov	#57376,	r5	;#0xe020

0000e080 <.Loc.241.1>:
    e080:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e084 <.Loc.242.1>:
    e084:	30 40 88 e0 	br	#0xe088		;

0000e088 <_msp430_run_array>:
    e088:	05 94       	cmp	r4,	r5	;

0000e08a <.Loc.246.1>:
    e08a:	05 24       	jz	$+12     	;abs 0xe096

0000e08c <.Loc.247.1>:
    e08c:	27 44       	mov	@r4,	r7	;

0000e08e <.Loc.248.1>:
    e08e:	04 56       	add	r6,	r4	;

0000e090 <.Loc.249.1>:
    e090:	a7 12       	call	@r7		;

0000e092 <.Loc.250.1>:
    e092:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe088

0000e096 <_msp430_run_done>:
    e096:	30 41       	ret			

0000e098 <L0>:
    e098:	30 41       	ret			
    e09a:	30 41       	ret			

0000e09c <deregister_tm_clones>:
    e09c:	3c 40 d8 ea 	mov	#60120,	r12	;#0xead8
    e0a0:	3c 90 d8 ea 	cmp	#60120,	r12	;#0xead8
    e0a4:	07 24       	jz	$+16     	;abs 0xe0b4
    e0a6:	3d 40 00 00 	mov	#0,	r13	;
    e0aa:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0ac:	03 24       	jz	$+8      	;abs 0xe0b4
    e0ae:	3c 40 d8 ea 	mov	#60120,	r12	;#0xead8
    e0b2:	8d 12       	call	r13		;

0000e0b4 <.L1>:
    e0b4:	30 41       	ret			

0000e0b6 <register_tm_clones>:
    e0b6:	0a 12       	push	r10		;
    e0b8:	3a 40 d8 ea 	mov	#60120,	r10	;#0xead8
    e0bc:	3a 80 d8 ea 	sub	#60120,	r10	;#0xead8
    e0c0:	0a 11       	rra	r10		;
    e0c2:	0c 4a       	mov	r10,	r12	;
    e0c4:	b0 12 a0 e9 	call	#59808		;#0xe9a0
    e0c8:	0c 5a       	add	r10,	r12	;
    e0ca:	0d 4c       	mov	r12,	r13	;
    e0cc:	0d 11       	rra	r13		;
    e0ce:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0d0:	07 24       	jz	$+16     	;abs 0xe0e0
    e0d2:	3e 40 00 00 	mov	#0,	r14	;
    e0d6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0d8:	03 24       	jz	$+8      	;abs 0xe0e0
    e0da:	3c 40 d8 ea 	mov	#60120,	r12	;#0xead8
    e0de:	8e 12       	call	r14		;

0000e0e0 <.L9>:
    e0e0:	3a 41       	pop	r10		;
    e0e2:	30 41       	ret			

0000e0e4 <__do_global_dtors_aux>:
    e0e4:	0a 12       	push	r10		;
    e0e6:	09 12       	push	r9		;
    e0e8:	c2 93 02 02 	cmp.b	#0,	&0x0202	;r3 As==00
    e0ec:	17 20       	jnz	$+48     	;abs 0xe11c
    e0ee:	3a 40 2a e0 	mov	#57386,	r10	;#0xe02a
    e0f2:	3a 80 28 e0 	sub	#57384,	r10	;#0xe028
    e0f6:	0a 11       	rra	r10		;
    e0f8:	3a 53       	add	#-1,	r10	;r3 As==11
    e0fa:	39 40 28 e0 	mov	#57384,	r9	;#0xe028

0000e0fe <.L19>:
    e0fe:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    e102:	0c 9a       	cmp	r10,	r12	;
    e104:	0d 28       	jnc	$+28     	;abs 0xe120
    e106:	b0 12 9c e0 	call	#57500		;#0xe09c
    e10a:	3d 40 00 00 	mov	#0,	r13	;
    e10e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e110:	03 24       	jz	$+8      	;abs 0xe118
    e112:	3c 40 1c e0 	mov	#57372,	r12	;#0xe01c
    e116:	8d 12       	call	r13		;

0000e118 <.L21>:
    e118:	d2 43 02 02 	mov.b	#1,	&0x0202	;r3 As==01

0000e11c <.L17>:
    e11c:	30 40 26 e9 	br	#0xe926		;

0000e120 <.L20>:
    e120:	1c 53       	inc	r12		;
    e122:	82 4c 04 02 	mov	r12,	&0x0204	;
    e126:	0c 5c       	rla	r12		;
    e128:	0c 59       	add	r9,	r12	;
    e12a:	2c 4c       	mov	@r12,	r12	;
    e12c:	8c 12       	call	r12		;
    e12e:	30 40 fe e0 	br	#0xe0fe		;

0000e132 <call___do_global_dtors_aux>:
    e132:	3e 40 00 00 	mov	#0,	r14	;
    e136:	0e 93       	cmp	#0,	r14	;r3 As==00
    e138:	05 24       	jz	$+12     	;abs 0xe144
    e13a:	3d 40 06 02 	mov	#518,	r13	;#0x0206
    e13e:	3c 40 1c e0 	mov	#57372,	r12	;#0xe01c
    e142:	8e 12       	call	r14		;

0000e144 <.L27>:
    e144:	b0 12 b6 e0 	call	#57526		;#0xe0b6
    e148:	30 41       	ret			

0000e14a <copykey>:
}; 


// #define SMART  __attribute__((__section__(".keyfunction"), noinline))

void copykey (unsigned long *tmp) {
    e14a:	0a 12       	push	r10		;

0000e14c <.LCFI0>:
    e14c:	09 12       	push	r9		;

0000e14e <.LCFI1>:
    e14e:	08 12       	push	r8		;

0000e150 <.LCFI2>:
    e150:	07 12       	push	r7		;

0000e152 <.LCFI3>:
    e152:	04 12       	push	r4		;

0000e154 <.LCFI4>:
    e154:	31 80 46 00 	sub	#70,	r1	;#0x0046

0000e158 <.LCFI5>:
    unsigned long result[16];
    unsigned long *tt;
    tt = (unsigned long *) t;

    // [is_last, in_ready, size[2], reset]
    SHA_CONFIG = 0b00001;
    e158:	92 43 00 01 	mov	#1,	&0x0100	;r3 As==01
    e15c:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e160 <.Loc.36.1>:
    SHA_CONFIG = 0b00000;
    e160:	82 43 00 01 	mov	#0,	&0x0100	;r3 As==00
    e164:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e168 <.Loc.43.1>:
    // for (int i = 0; i < 11; ++i) {
    //     SHA_IN = tt[i];
    //     SHA_CONFIG = 0b01110;
    //     SHA_CONFIG = 0b00110;
    // }
    SHA_CONFIG = 0b10000;
    e168:	b2 40 10 00 	mov	#16,	&0x0100	;#0x0010
    e16c:	00 01 
    e16e:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e172 <.Loc.45.1>:

    while (~(SHA_STATUS >> 1) & 0b1);
    e172:	3e 40 01 01 	mov	#257,	r14	;#0x0101

0000e176 <.L2>:
    e176:	6d 4e       	mov.b	@r14,	r13	;
    e178:	5c 42 02 01 	mov.b	&0x0102,r12	;0x0102
    e17c:	0c 5c       	rla	r12		;
    e17e:	0c 5c       	rla	r12		;
    e180:	0c 5c       	rla	r12		;
    e182:	0c 5c       	rla	r12		;
    e184:	0c 5c       	rla	r12		;
    e186:	0c 5c       	rla	r12		;
    e188:	0c 5c       	rla	r12		;
    e18a:	0c 5c       	rla	r12		;
    e18c:	0c dd       	bis	r13,	r12	;
    e18e:	5d 42 03 01 	mov.b	&0x0103,r13	;0x0103
    e192:	5d 42 04 01 	mov.b	&0x0104,r13	;0x0104
    e196:	2c b3       	bit	#2,	r12	;r3 As==10
    e198:	ee 27       	jz	$-34     	;abs 0xe176
    e19a:	09 41       	mov	r1,	r9	;
    e19c:	39 50 06 00 	add	#6,	r9	;
    e1a0:	04 41       	mov	r1,	r4	;
    e1a2:	34 50 46 00 	add	#70,	r4	;#0x0046
    e1a6:	0a 49       	mov	r9,	r10	;

0000e1a8 <.LBB2>:

    // cprintf("%d ", SHA_OUT);
    // t = SHA_OUT;
    for (int i = 0; i < 16; ++i) {
        result[i] = ((unsigned long *)SHA_OUT)[i];
    e1a8:	3e 40 06 01 	mov	#262,	r14	;#0x0106

0000e1ac <.L4>:
    e1ac:	6d 4e       	mov.b	@r14,	r13	;
    e1ae:	0c 4a       	mov	r10,	r12	;
    e1b0:	0c 89       	sub	r9,	r12	;
    e1b2:	0c 5d       	add	r13,	r12	;
    e1b4:	aa 4c 00 00 	mov	@r12,	0(r10)	;
    e1b8:	9a 4c 02 00 	mov	2(r12),	2(r10)	;
    e1bc:	02 00 
    e1be:	2a 52       	add	#4,	r10	;r2 As==10

0000e1c0 <.Loc.49.1>:

    while (~(SHA_STATUS >> 1) & 0b1);

    // cprintf("%d ", SHA_OUT);
    // t = SHA_OUT;
    for (int i = 0; i < 16; ++i) {
    e1c0:	0a 94       	cmp	r4,	r10	;
    e1c2:	f4 23       	jnz	$-22     	;abs 0xe1ac
    e1c4:	37 40 5a e6 	mov	#58970,	r7	;#0xe65a

0000e1c8 <.LBB3>:
        result[i] = ((unsigned long *)SHA_OUT)[i];
    }

    for (int i = 0; i < 16; ++i) {
        cprintf("%w ", result[i]);
    e1c8:	38 40 00 e0 	mov	#57344,	r8	;#0xe000

0000e1cc <.L5>:
    e1cc:	a1 49 02 00 	mov	@r9,	2(r1)	;
    e1d0:	91 49 02 00 	mov	2(r9),	4(r1)	;
    e1d4:	04 00 
    e1d6:	81 48 00 00 	mov	r8,	0(r1)	;
    e1da:	87 12       	call	r7		;

0000e1dc <.LVL4>:
    e1dc:	29 52       	add	#4,	r9	;r2 As==10

0000e1de <.Loc.53.1>:
    // t = SHA_OUT;
    for (int i = 0; i < 16; ++i) {
        result[i] = ((unsigned long *)SHA_OUT)[i];
    }

    for (int i = 0; i < 16; ++i) {
    e1de:	09 9a       	cmp	r10,	r9	;
    e1e0:	f5 23       	jnz	$-20     	;abs 0xe1cc

0000e1e2 <.LBE3>:
        cprintf("%w ", result[i]);
    }
}
    e1e2:	31 50 46 00 	add	#70,	r1	;#0x0046
    e1e6:	34 41       	pop	r4		;
    e1e8:	37 41       	pop	r7		;
    e1ea:	38 41       	pop	r8		;
    e1ec:	39 41       	pop	r9		;
    e1ee:	3a 41       	pop	r10		;
    e1f0:	30 41       	ret			

0000e1f2 <delay>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e1f2:	0d 4c       	mov	r12,	r13	;
    e1f4:	3d 53       	add	#-1,	r13	;r3 As==11

0000e1f6 <.LVL6>:
    e1f6:	0c 93       	cmp	#0,	r12	;r3 As==00
    e1f8:	05 24       	jz	$+12     	;abs 0xe204

0000e1fa <.L13>:
      __nop();
    e1fa:	03 43       	nop			

0000e1fc <.Loc.65.1>:
      __nop();
    e1fc:	03 43       	nop			

0000e1fe <.Loc.63.1>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e1fe:	3d 53       	add	#-1,	r13	;r3 As==11
    e200:	3d 93       	cmp	#-1,	r13	;r3 As==11
    e202:	fb 23       	jnz	$-8      	;abs 0xe1fa

0000e204 <.L11>:
      __nop();
      __nop();
   }
}
    e204:	30 41       	ret			

0000e206 <tty_putc>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e206:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

0000e20a <.L19>:
    e20a:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    e20e:	fd 23       	jnz	$-4      	;abs 0xe20a

0000e210 <.Loc.79.1>:

  // Write the output character
  UART_TXD = txdata;
    e210:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e214 <.Loc.82.1>:

  return 0;
}
    e214:	4c 43       	clr.b	r12		;

0000e216 <.LVL9>:
    e216:	30 41       	ret			

0000e218 <INT_uart_rx>:
//         (receive a byte from the UART)           //
//--------------------------------------------------//
volatile char rxdata;

// wakeup interrupt (8) INT_uart_rx(void) {
interrupt (8) INT_uart_rx(void) {
    e218:	0f 12       	push	r15		;

0000e21a <.LCFI6>:
    e21a:	0e 12       	push	r14		;

0000e21c <.LCFI7>:
    e21c:	0d 12       	push	r13		;

0000e21e <.LCFI8>:
    e21e:	0c 12       	push	r12		;

0000e220 <.LCFI9>:
    e220:	0b 12       	push	r11		;

0000e222 <.LCFI10>:
    e222:	0a 12       	push	r10		;

0000e224 <.LCFI11>:
    e224:	09 12       	push	r9		;

0000e226 <.LCFI12>:
    e226:	08 12       	push	r8		;

0000e228 <.LCFI13>:
    e228:	07 12       	push	r7		;

0000e22a <.LCFI14>:
    e22a:	06 12       	push	r6		;

0000e22c <.LCFI15>:
    e22c:	05 12       	push	r5		;

0000e22e <.LCFI16>:
    e22e:	04 12       	push	r4		;

0000e230 <.LCFI17>:
    e230:	21 82       	sub	#4,	r1	;r2 As==10

0000e232 <.LCFI18>:
  // Read the received data
  rxdata = UART_RXD;
    e232:	d2 42 85 00 	mov.b	&0x0085,&0x0214	;0x0085
    e236:	14 02 

0000e238 <.Loc.96.1>:

  // Clear the receive pending flag
  UART_STAT = UART_RX_PND;
    e238:	f2 40 10 00 	mov.b	#16,	&0x0081	;#0x0010
    e23c:	81 00 

0000e23e <.Loc.98.1>:

  cprintf("%c", rxdata);
    e23e:	5c 42 14 02 	mov.b	&0x0214,r12	;0x0214
    e242:	81 4c 02 00 	mov	r12,	2(r1)	;
    e246:	b1 40 04 e0 	mov	#57348,	0(r1)	;#0xe004
    e24a:	00 00 
    e24c:	b0 12 5a e6 	call	#58970		;#0xe65a

0000e250 <.LVL10>:
  // // Exit the low power mode
  // LPM0_EXIT;
}
    e250:	21 52       	add	#4,	r1	;r2 As==10
    e252:	34 41       	pop	r4		;
    e254:	35 41       	pop	r5		;
    e256:	36 41       	pop	r6		;
    e258:	37 41       	pop	r7		;
    e25a:	38 41       	pop	r8		;
    e25c:	39 41       	pop	r9		;
    e25e:	3a 41       	pop	r10		;
    e260:	3b 41       	pop	r11		;
    e262:	3c 41       	pop	r12		;
    e264:	3d 41       	pop	r13		;
    e266:	3e 41       	pop	r14		;
    e268:	3f 41       	pop	r15		;
    e26a:	00 13       	reti			

0000e26c <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e26c:	0a 12       	push	r10		;

0000e26e <.LCFI19>:
    e26e:	09 12       	push	r9		;

0000e270 <.LCFI20>:
    e270:	31 80 22 00 	sub	#34,	r1	;#0x0022

0000e274 <.LCFI21>:
    // int led = 0;
     // int *key;
     // key = (void *)0xfee0; 
    unsigned long calc[8];

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e274:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    e278:	20 01 

0000e27a <.Loc.125.1>:

    P3DIR  = 0xff;
    e27a:	f2 43 1a 00 	mov.b	#-1,	&0x001a	;r3 As==11

0000e27e <.Loc.126.1>:
    P3OUT  = 0xff;                      // Light LED during init
    e27e:	f2 43 19 00 	mov.b	#-1,	&0x0019	;r3 As==11

0000e282 <.Loc.128.1>:

    UART_BAUD = BAUD;                   // Init UART
    e282:	b2 40 ae 00 	mov	#174,	&0x0082	;#0x00ae
    e286:	82 00 

0000e288 <.Loc.129.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e288:	f2 40 11 00 	mov.b	#17,	&0x0080	;#0x0011
    e28c:	80 00 

0000e28e <.Loc.134.1>:


    // delay(65535);

    P3OUT  = 0x00;                      // Switch off LED
    e28e:	c2 43 19 00 	mov.b	#0,	&0x0019	;r3 As==00

0000e292 <.Loc.137.1>:

    // cprintf("\r\n====== openMSP430 in action ======\r\n");   //say hello
    copykey(calc);
    e292:	0c 41       	mov	r1,	r12	;
    e294:	2c 53       	incd	r12		;
    e296:	b0 12 4a e1 	call	#57674		;#0xe14a

0000e29a <.LVL11>:
    e29a:	39 40 5a e6 	mov	#58970,	r9	;#0xe65a

0000e29e <.Loc.142.1>:

    // for (int i = 0; i < 8; ++i) {
    //  cprintf("%l ", calc[i]);
    // }
    while (1) cprintf(".");
    e29e:	3a 40 07 e0 	mov	#57351,	r10	;#0xe007

0000e2a2 <.L23>:
    e2a2:	81 4a 00 00 	mov	r10,	0(r1)	;
    e2a6:	89 12       	call	r9		;

0000e2a8 <.LVL12>:
    e2a8:	30 40 a2 e2 	br	#0xe2a2		;

0000e2ac <cput_nibble>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2ac:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f

0000e2b0 <.LVL1>:
    e2b0:	5d 4c 09 e0 	mov.b	-8183(r12),r13	;0xffffe009

0000e2b4 <.LBB120>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2b4:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2b8 <.L2>:
    e2b8:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2bc:	fd 23       	jnz	$-4      	;abs 0xe2b8

0000e2be <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2be:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2c2 <.LBE120>:

void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
}
    e2c2:	30 41       	ret			

0000e2c4 <cput_hex_byte>:

void
cput_hex_byte (int n)
{
    e2c4:	0a 12       	push	r10		;

0000e2c6 <.LCFI0>:
    e2c6:	09 12       	push	r9		;

0000e2c8 <.LCFI1>:
    e2c8:	09 4c       	mov	r12,	r9	;

0000e2ca <.LBB122>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2ca:	3a 40 09 e0 	mov	#57353,	r10	;#0xe009

0000e2ce <.LBE122>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e2ce:	b0 12 42 e9 	call	#59714		;#0xe942

0000e2d2 <.LBB127>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2d2:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2d6:	0c 5a       	add	r10,	r12	;
    e2d8:	6d 4c       	mov.b	@r12,	r13	;

0000e2da <.LBB124>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2da:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2de <.L6>:
    e2de:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2e2:	fd 23       	jnz	$-4      	;abs 0xe2de

0000e2e4 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2e4:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2e8 <.LBB128>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2e8:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e2ec <.LVL9>:
    e2ec:	0a 59       	add	r9,	r10	;
    e2ee:	6d 4a       	mov.b	@r10,	r13	;

0000e2f0 <.LBB130>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2f0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2f4 <.L7>:
    e2f4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2f8:	fd 23       	jnz	$-4      	;abs 0xe2f4

0000e2fa <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2fa:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2fe <.LBE128>:
void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
  cput_nibble (n);
}
    e2fe:	30 40 26 e9 	br	#0xe926		;

0000e302 <cput_binary_byte>:

void
cput_binary_byte (int n)
{
    e302:	0a 12       	push	r10		;

0000e304 <.LCFI2>:
    e304:	09 12       	push	r9		;

0000e306 <.LCFI3>:
    e306:	08 12       	push	r8		;

0000e308 <.LCFI4>:
    e308:	07 12       	push	r7		;

0000e30a <.LCFI5>:
    e30a:	06 12       	push	r6		;

0000e30c <.LCFI6>:
    e30c:	05 12       	push	r5		;

0000e30e <.LCFI7>:
    e30e:	07 4c       	mov	r12,	r7	;

0000e310 <.LVL13>:
  int i;
  for (i=7; i>=0; i--)
    e310:	79 40 07 00 	mov.b	#7,	r9	;
    e314:	75 40 30 00 	mov.b	#48,	r5	;#0x0030

0000e318 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e318:	76 40 31 00 	mov.b	#49,	r6	;#0x0031

0000e31c <.LBB132>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e31c:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e320 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e320:	78 40 84 00 	mov.b	#132,	r8	;#0x0084

0000e324 <.L13>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e324:	0c 47       	mov	r7,	r12	;
    e326:	0d 49       	mov	r9,	r13	;
    e328:	b0 12 50 e9 	call	#59728		;#0xe950
    e32c:	1c b3       	bit	#1,	r12	;r3 As==01
    e32e:	0b 24       	jz	$+24     	;abs 0xe346
    e330:	0c 46       	mov	r6,	r12	;

0000e332 <.L12>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e332:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e336:	fd 23       	jnz	$-4      	;abs 0xe332

0000e338 <.L17>:

  // Write the output character
  UART_TXD = txdata;
    e338:	c8 4c 00 00 	mov.b	r12,	0(r8)	;

0000e33c <.LBE136>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e33c:	39 53       	add	#-1,	r9	;r3 As==11
    e33e:	39 93       	cmp	#-1,	r9	;r3 As==11
    e340:	f1 23       	jnz	$-28     	;abs 0xe324

0000e342 <.Loc.45.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e342:	30 40 1e e9 	br	#0xe91e		;

0000e346 <.L14>:
    e346:	0c 45       	mov	r5,	r12	;

0000e348 <.LBB137>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e348:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e34c:	f2 23       	jnz	$-26     	;abs 0xe332
    e34e:	30 40 38 e3 	br	#0xe338		;

0000e352 <cput_hex_word>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}

void
cput_hex_word (int n)
{
    e352:	0a 12       	push	r10		;

0000e354 <.LCFI8>:
    e354:	09 12       	push	r9		;

0000e356 <.LCFI9>:
    e356:	08 12       	push	r8		;

0000e358 <.LCFI10>:
    e358:	09 4c       	mov	r12,	r9	;

0000e35a <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e35a:	b0 12 3a e9 	call	#59706		;#0xe93a

0000e35e <.LVL18>:
    e35e:	08 4c       	mov	r12,	r8	;

0000e360 <.LBB138>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e360:	3a 40 09 e0 	mov	#57353,	r10	;#0xe009
    e364:	0c 49       	mov	r9,	r12	;
    e366:	b0 12 ac e9 	call	#59820		;#0xe9ac
    e36a:	0c 5a       	add	r10,	r12	;
    e36c:	6d 4c       	mov.b	@r12,	r13	;

0000e36e <.LBB141>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e36e:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e372 <.L19>:
    e372:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e376:	fd 23       	jnz	$-4      	;abs 0xe372

0000e378 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e378:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e37c <.LBB143>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e37c:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e380 <.LVL23>:
    e380:	08 5a       	add	r10,	r8	;
    e382:	6d 48       	mov.b	@r8,	r13	;

0000e384 <.LBB145>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e384:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e388 <.L20>:
    e388:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e38c:	fd 23       	jnz	$-4      	;abs 0xe388

0000e38e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e38e:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e392 <.LBB147>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e392:	0c 49       	mov	r9,	r12	;
    e394:	b0 12 42 e9 	call	#59714		;#0xe942

0000e398 <.LBB149>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e398:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e39c:	0c 5a       	add	r10,	r12	;
    e39e:	6d 4c       	mov.b	@r12,	r13	;

0000e3a0 <.LBB151>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3a0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3a4 <.L21>:
    e3a4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3a8:	fd 23       	jnz	$-4      	;abs 0xe3a4

0000e3aa <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3aa:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3ae <.LBB153>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3ae:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e3b2 <.LVL29>:
    e3b2:	0a 59       	add	r9,	r10	;
    e3b4:	6d 4a       	mov.b	@r10,	r13	;

0000e3b6 <.LBB155>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3b6:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3ba <.L22>:
    e3ba:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3be:	fd 23       	jnz	$-4      	;abs 0xe3ba

0000e3c0 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3c0:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3c4 <.LBE147>:
void
cput_hex_word (int n)
{
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e3c4:	30 40 24 e9 	br	#0xe924		;

0000e3c8 <cput_hex_long>:

void
cput_hex_long (long int n)
{
    e3c8:	0a 12       	push	r10		;

0000e3ca <.LCFI11>:
    e3ca:	09 12       	push	r9		;

0000e3cc <.LCFI12>:
    e3cc:	08 12       	push	r8		;

0000e3ce <.LCFI13>:
    e3ce:	07 12       	push	r7		;

0000e3d0 <.LCFI14>:
    e3d0:	09 4c       	mov	r12,	r9	;
    e3d2:	08 4d       	mov	r13,	r8	;

0000e3d4 <.Loc.57.1>:
  cput_hex_byte (n >> 24);
    e3d4:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e3d8:	b0 12 9a e9 	call	#59802		;#0xe99a

0000e3dc <.LVL33>:
    e3dc:	07 4c       	mov	r12,	r7	;

0000e3de <.LBB157>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3de:	3a 40 09 e0 	mov	#57353,	r10	;#0xe009

0000e3e2 <.LBE159>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e3e2:	b0 12 42 e9 	call	#59714		;#0xe942

0000e3e6 <.LBB164>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3e6:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e3ea:	0c 5a       	add	r10,	r12	;
    e3ec:	6d 4c       	mov.b	@r12,	r13	;

0000e3ee <.LBB161>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3ee:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3f2 <.L28>:
    e3f2:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3f6:	fd 23       	jnz	$-4      	;abs 0xe3f2

0000e3f8 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3f8:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3fc <.LBB165>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3fc:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e400 <.LVL38>:
    e400:	07 5a       	add	r10,	r7	;
    e402:	6d 47       	mov.b	@r7,	r13	;

0000e404 <.LBB167>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e404:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e408 <.L29>:
    e408:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e40c:	fd 23       	jnz	$-4      	;abs 0xe408

0000e40e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e40e:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e412 <.LBE157>:

void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
    e412:	0c 49       	mov	r9,	r12	;
    e414:	0d 48       	mov	r8,	r13	;
    e416:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e41a:	b0 12 9a e9 	call	#59802		;#0xe99a
    e41e:	07 4c       	mov	r12,	r7	;

0000e420 <.LBB169>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e420:	b0 12 42 e9 	call	#59714		;#0xe942

0000e424 <.LBB171>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e424:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e428:	0c 5a       	add	r10,	r12	;
    e42a:	6d 4c       	mov.b	@r12,	r13	;

0000e42c <.LBB173>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e42c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e430 <.L30>:
    e430:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e434:	fd 23       	jnz	$-4      	;abs 0xe430

0000e436 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e436:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e43a <.LBB175>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e43a:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e43e <.LVL46>:
    e43e:	07 5a       	add	r10,	r7	;
    e440:	6d 47       	mov.b	@r7,	r13	;

0000e442 <.LBB177>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e442:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e446 <.L31>:
    e446:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e44a:	fd 23       	jnz	$-4      	;abs 0xe446

0000e44c <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e44c:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e450 <.LBE169>:
void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
    e450:	0c 49       	mov	r9,	r12	;
    e452:	0d 48       	mov	r8,	r13	;
    e454:	b0 12 72 e9 	call	#59762		;#0xe972
    e458:	08 4c       	mov	r12,	r8	;

0000e45a <.LBB179>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e45a:	b0 12 42 e9 	call	#59714		;#0xe942

0000e45e <.LBB181>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e45e:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e462:	0c 5a       	add	r10,	r12	;
    e464:	6d 4c       	mov.b	@r12,	r13	;

0000e466 <.LBB183>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e466:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e46a <.L32>:
    e46a:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e46e:	fd 23       	jnz	$-4      	;abs 0xe46a

0000e470 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e470:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e474 <.LBB185>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e474:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e478 <.LVL54>:
    e478:	08 5a       	add	r10,	r8	;
    e47a:	6d 48       	mov.b	@r8,	r13	;

0000e47c <.LBB187>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e47c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e480 <.L33>:
    e480:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e484:	fd 23       	jnz	$-4      	;abs 0xe480

0000e486 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e486:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e48a <.LBB189>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e48a:	0c 49       	mov	r9,	r12	;
    e48c:	b0 12 42 e9 	call	#59714		;#0xe942

0000e490 <.LBB191>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e490:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e494:	0c 5a       	add	r10,	r12	;
    e496:	6d 4c       	mov.b	@r12,	r13	;

0000e498 <.LBB193>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e498:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e49c <.L34>:
    e49c:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e4a0:	fd 23       	jnz	$-4      	;abs 0xe49c

0000e4a2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4a2:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e4a6 <.LBB195>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e4a6:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e4aa <.LVL60>:
    e4aa:	0a 59       	add	r9,	r10	;
    e4ac:	6d 4a       	mov.b	@r10,	r13	;

0000e4ae <.LBB197>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4ae:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e4b2 <.L35>:
    e4b2:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e4b6:	fd 23       	jnz	$-4      	;abs 0xe4b2

0000e4b8 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4b8:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e4bc <.LBE189>:
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e4bc:	30 40 22 e9 	br	#0xe922		;

0000e4c0 <cput_hex_block>:

void
cput_hex_block (char *block, int n)
{
    e4c0:	0a 12       	push	r10		;

0000e4c2 <.LCFI15>:
    e4c2:	09 12       	push	r9		;

0000e4c4 <.LCFI16>:
    e4c4:	08 12       	push	r8		;

0000e4c6 <.LCFI17>:
    e4c6:	07 12       	push	r7		;

0000e4c8 <.LCFI18>:
    e4c8:	06 12       	push	r6		;

0000e4ca <.LCFI19>:
    e4ca:	05 12       	push	r5		;

0000e4cc <.LCFI20>:
    e4cc:	04 12       	push	r4		;

0000e4ce <.LCFI21>:
  int i = 0;
  while (n)
    e4ce:	0d 93       	cmp	#0,	r13	;r3 As==00
    e4d0:	39 24       	jz	$+116    	;abs 0xe544
    e4d2:	3d 53       	add	#-1,	r13	;r3 As==11

0000e4d4 <.LVL65>:
    e4d4:	07 4c       	mov	r12,	r7	;
    e4d6:	07 5d       	add	r13,	r7	;
    e4d8:	05 4c       	mov	r12,	r5	;
    e4da:	38 40 09 e0 	mov	#57353,	r8	;#0xe009

0000e4de <.LBB199>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4de:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e4e2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4e2:	74 40 84 00 	mov.b	#132,	r4	;#0x0084

0000e4e6 <.LBE199>:
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
      i++;
      if ((i & 7) == 0)
    e4e6:	16 43       	mov	#1,	r6	;r3 As==01
    e4e8:	06 8c       	sub	r12,	r6	;

0000e4ea <.L51>:
cput_hex_block (char *block, int n)
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
    e4ea:	69 45       	mov.b	@r5,	r9	;

0000e4ec <.LBB214>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e4ec:	0c 49       	mov	r9,	r12	;
    e4ee:	b0 12 42 e9 	call	#59714		;#0xe942

0000e4f2 <.LBB208>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e4f2:	0c 58       	add	r8,	r12	;
    e4f4:	6c 4c       	mov.b	@r12,	r12	;

0000e4f6 <.L46>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4f6:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e4fa:	fd 23       	jnz	$-4      	;abs 0xe4f6

0000e4fc <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4fc:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e500 <.LBB209>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e500:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e504 <.LVL71>:
    e504:	09 58       	add	r8,	r9	;
    e506:	6c 49       	mov.b	@r9,	r12	;

0000e508 <.L47>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e508:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e50c:	fd 23       	jnz	$-4      	;abs 0xe508

0000e50e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e50e:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e512 <.LBE209>:
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
    e512:	05 97       	cmp	r7,	r5	;
    e514:	17 24       	jz	$+48     	;abs 0xe544

0000e516 <.LVL74>:
	break;
      i++;
      if ((i & 7) == 0)
    e516:	0c 46       	mov	r6,	r12	;
    e518:	0c 55       	add	r5,	r12	;
    e51a:	3c b0 07 00 	bit	#7,	r12	;
    e51e:	09 20       	jnz	$+20     	;abs 0xe532

0000e520 <.L49>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e520:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e524:	fd 23       	jnz	$-4      	;abs 0xe520

0000e526 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e526:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e52a:	84 00 
    e52c:	15 53       	inc	r5		;

0000e52e <.LVL75>:
    e52e:	30 40 ea e4 	br	#0xe4ea		;

0000e532 <.L48>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e532:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e536:	fd 23       	jnz	$-4      	;abs 0xe532

0000e538 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e538:	f2 40 3a 00 	mov.b	#58,	&0x0084	;#0x003a
    e53c:	84 00 
    e53e:	15 53       	inc	r5		;

0000e540 <.LVL77>:
    e540:	30 40 ea e4 	br	#0xe4ea		;

0000e544 <.L44>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e544:	30 40 1c e9 	br	#0xe91c		;

0000e548 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n)
{
    e548:	0a 12       	push	r10		;

0000e54a <.LCFI22>:
    e54a:	09 12       	push	r9		;

0000e54c <.LCFI23>:
  int i = 0;
  while (n)
    e54c:	0d 93       	cmp	#0,	r13	;r3 As==00
    e54e:	20 24       	jz	$+66     	;abs 0xe590
    e550:	3d 53       	add	#-1,	r13	;r3 As==11

0000e552 <.LVL81>:
}

void
cput_nibble_block (char *block, int n)
{
  int i = 0;
    e552:	4b 43       	clr.b	r11		;
    e554:	39 40 09 e0 	mov	#57353,	r9	;#0xe009

0000e558 <.LBB219>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e558:	7e 40 81 00 	mov.b	#129,	r14	;#0x0081

0000e55c <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e55c:	7a 40 84 00 	mov.b	#132,	r10	;#0x0084

0000e560 <.L65>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e560:	6f 4c       	mov.b	@r12,	r15	;

0000e562 <.LVL83>:
    e562:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f

0000e566 <.LVL84>:
    e566:	0f 59       	add	r9,	r15	;
    e568:	6f 4f       	mov.b	@r15,	r15	;

0000e56a <.L62>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e56a:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e56e:	fd 23       	jnz	$-4      	;abs 0xe56a

0000e570 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e570:	ca 4f 00 00 	mov.b	r15,	0(r10)	;

0000e574 <.LBE219>:
{
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
    e574:	0b 9d       	cmp	r13,	r11	;
    e576:	0c 24       	jz	$+26     	;abs 0xe590

0000e578 <.Loc.89.1>:
	break;
      i++;
    e578:	1b 53       	inc	r11		;

0000e57a <.LVL87>:
      if ((i & 7) == 0)
    e57a:	3b b0 07 00 	bit	#7,	r11	;
    e57e:	f0 23       	jnz	$-30     	;abs 0xe560

0000e580 <.L64>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e580:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e584:	fd 23       	jnz	$-4      	;abs 0xe580

0000e586 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e586:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e58a:	84 00 
    e58c:	30 40 60 e5 	br	#0xe560		;

0000e590 <.L60>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e590:	30 40 26 e9 	br	#0xe926		;

0000e594 <cput_number>:

void
cput_number (int n)
{
    e594:	0a 12       	push	r10		;

0000e596 <.LCFI24>:
    e596:	09 12       	push	r9		;

0000e598 <.LCFI25>:
    e598:	08 12       	push	r8		;

0000e59a <.LCFI26>:
    e59a:	07 12       	push	r7		;

0000e59c <.LCFI27>:
    e59c:	06 12       	push	r6		;

0000e59e <.LCFI28>:
    e59e:	05 12       	push	r5		;

0000e5a0 <.LCFI29>:
    e5a0:	04 12       	push	r4		;

0000e5a2 <.LCFI30>:
    e5a2:	31 80 16 00 	sub	#22,	r1	;#0x0016

0000e5a6 <.LCFI31>:
    e5a6:	0a 4c       	mov	r12,	r10	;

0000e5a8 <.LVL90>:
  char buf[20];
  int i = 0;
  if (n < 0)
    e5a8:	0c 93       	cmp	#0,	r12	;r3 As==00
    e5aa:	40 38       	jl	$+130    	;abs 0xe62c

0000e5ac <.Loc.105.1>:
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e5ac:	7c 40 09 00 	mov.b	#9,	r12	;

0000e5b0 <.LVL91>:
    e5b0:	0c 9a       	cmp	r10,	r12	;
    e5b2:	4b 34       	jge	$+152    	;abs 0xe64a

0000e5b4 <.L84>:
    e5b4:	0c 41       	mov	r1,	r12	;
    e5b6:	2c 53       	incd	r12		;
    e5b8:	81 4c 00 00 	mov	r12,	0(r1)	;
    e5bc:	09 4c       	mov	r12,	r9	;
    e5be:	5c 43       	mov.b	#1,	r12	;r3 As==01
    e5c0:	0c 89       	sub	r9,	r12	;
    e5c2:	04 4c       	mov	r12,	r4	;
    e5c4:	35 40 da e8 	mov	#59610,	r5	;#0xe8da
    e5c8:	36 40 8e e8 	mov	#59534,	r6	;#0xe88e

0000e5cc <.Loc.107.1>:
    {
      buf[i++] = (n%10) + '0';
    e5cc:	78 40 0a 00 	mov.b	#10,	r8	;#0x000a

0000e5d0 <.L75>:
    e5d0:	07 44       	mov	r4,	r7	;
    e5d2:	07 59       	add	r9,	r7	;

0000e5d4 <.LVL93>:
    e5d4:	0d 48       	mov	r8,	r13	;
    e5d6:	0c 4a       	mov	r10,	r12	;
    e5d8:	85 12       	call	r5		;
    e5da:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    e5de:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

0000e5e2 <.Loc.108.1>:
      n /= 10;
    e5e2:	0d 48       	mov	r8,	r13	;
    e5e4:	0c 4a       	mov	r10,	r12	;
    e5e6:	86 12       	call	r6		;
    e5e8:	0a 4c       	mov	r12,	r10	;
    e5ea:	19 53       	inc	r9		;

0000e5ec <.Loc.105.1>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e5ec:	7c 40 09 00 	mov.b	#9,	r12	;
    e5f0:	0c 9a       	cmp	r10,	r12	;
    e5f2:	ee 3b       	jl	$-34     	;abs 0xe5d0
    e5f4:	0d 47       	mov	r7,	r13	;
    e5f6:	1d 53       	inc	r13		;

0000e5f8 <.L74>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e5f8:	27 51       	add	@r1,	r7	;

0000e5fa <.LVL98>:
    e5fa:	7a 50 30 00 	add.b	#48,	r10	;#0x0030

0000e5fe <.LVL99>:
    e5fe:	c7 4a 00 00 	mov.b	r10,	0(r7)	;
    e602:	3d 53       	add	#-1,	r13	;r3 As==11
    e604:	2d 51       	add	@r1,	r13	;
    e606:	0a 41       	mov	r1,	r10	;
    e608:	1a 53       	inc	r10		;

0000e60a <.LBB227>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e60a:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e60e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e60e:	7f 40 84 00 	mov.b	#132,	r15	;#0x0084

0000e612 <.L77>:
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    tty_putc (buf[--i]);
    e612:	6e 4d       	mov.b	@r13,	r14	;

0000e614 <.L76>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e614:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e618:	fd 23       	jnz	$-4      	;abs 0xe614

0000e61a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e61a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;
    e61e:	3d 53       	add	#-1,	r13	;r3 As==11

0000e620 <.LBE230>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e620:	0a 9d       	cmp	r13,	r10	;
    e622:	f7 23       	jnz	$-16     	;abs 0xe612

0000e624 <.Loc.113.1>:
    tty_putc (buf[--i]);
}
    e624:	31 50 16 00 	add	#22,	r1	;#0x0016
    e628:	30 40 1c e9 	br	#0xe91c		;

0000e62c <.L83>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e62c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e630 <.L73>:
    e630:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e634:	fd 23       	jnz	$-4      	;abs 0xe630

0000e636 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e636:	f2 40 2d 00 	mov.b	#45,	&0x0084	;#0x002d
    e63a:	84 00 

0000e63c <.LBE231>:
  char buf[20];
  int i = 0;
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    e63c:	4c 43       	clr.b	r12		;
    e63e:	0c 8a       	sub	r10,	r12	;
    e640:	0a 4c       	mov	r12,	r10	;

0000e642 <.Loc.105.1>:
    }
  while (n > 9)
    e642:	7c 40 09 00 	mov.b	#9,	r12	;
    e646:	0c 9a       	cmp	r10,	r12	;
    e648:	b5 3b       	jl	$-148    	;abs 0xe5b4

0000e64a <.L78>:
    e64a:	5d 43       	mov.b	#1,	r13	;r3 As==01
    e64c:	47 43       	clr.b	r7		;
    e64e:	0c 41       	mov	r1,	r12	;
    e650:	2c 53       	incd	r12		;
    e652:	81 4c 00 00 	mov	r12,	0(r1)	;
    e656:	30 40 f8 e5 	br	#0xe5f8		;

0000e65a <cprintf>:
    tty_putc (buf[--i]);
}

void
cprintf (const char *fmt, ...)
{
    e65a:	0a 12       	push	r10		;

0000e65c <.LCFI32>:
    e65c:	09 12       	push	r9		;

0000e65e <.LCFI33>:
    e65e:	08 12       	push	r8		;

0000e660 <.LCFI34>:
    e660:	07 12       	push	r7		;

0000e662 <.LCFI35>:
    e662:	06 12       	push	r6		;

0000e664 <.LCFI36>:
    e664:	05 12       	push	r5		;

0000e666 <.LCFI37>:
    e666:	04 12       	push	r4		;

0000e668 <.LCFI38>:
    e668:	19 41 10 00 	mov	16(r1),	r9	;0x00010

0000e66c <.Loc.122.1>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e66c:	08 41       	mov	r1,	r8	;
    e66e:	38 50 12 00 	add	#18,	r8	;#0x0012

0000e672 <.LVL106>:

  while (*fmt)
    e672:	6c 49       	mov.b	@r9,	r12	;
    e674:	0c 93       	cmp	#0,	r12	;r3 As==00
    e676:	2c 24       	jz	$+90     	;abs 0xe6d0

0000e678 <.LBB233>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e678:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e67c <.L110>:
    e67c:	04 49       	mov	r9,	r4	;
    e67e:	14 53       	inc	r4		;

0000e680 <.LBE233>:

  va_start (v, fmt);

  while (*fmt)
    {
      if (*fmt != '%')
    e680:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e684:	29 20       	jnz	$+84     	;abs 0xe6d8

0000e686 <.LVL108>:
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e686:	5d 49 01 00 	mov.b	1(r9),	r13	;
    e68a:	29 53       	incd	r9		;
    e68c:	7d 90 64 00 	cmp.b	#100,	r13	;#0x0064
    e690:	d4 24       	jz	$+426    	;abs 0xe83a
    e692:	7e 40 64 00 	mov.b	#100,	r14	;#0x0064
    e696:	4e 9d       	cmp.b	r13,	r14	;
    e698:	2f 2c       	jc	$+96     	;abs 0xe6f8
    e69a:	7d 90 73 00 	cmp.b	#115,	r13	;#0x0073
    e69e:	c2 24       	jz	$+390    	;abs 0xe824
    e6a0:	7e 40 73 00 	mov.b	#115,	r14	;#0x0073
    e6a4:	4e 9d       	cmp.b	r13,	r14	;
    e6a6:	42 28       	jnc	$+134    	;abs 0xe72c
    e6a8:	7d 90 6c 00 	cmp.b	#108,	r13	;#0x006c
    e6ac:	51 24       	jz	$+164    	;abs 0xe750
    e6ae:	7d 90 6e 00 	cmp.b	#110,	r13	;#0x006e
    e6b2:	1a 20       	jnz	$+54     	;abs 0xe6e8

0000e6b4 <.Loc.164.1>:
	    s = va_arg (v, char *);
	    i = va_arg (v, int);
	    cput_hex_block (s, i);
	    break;
	  case 'n':
	    s = va_arg (v, char *);
    e6b4:	2c 48       	mov	@r8,	r12	;

0000e6b6 <.Loc.165.1>:
	    i = va_arg (v, int);
    e6b6:	38 50 03 00 	add	#3,	r8	;

0000e6ba <.LVL109>:
    e6ba:	0d 48       	mov	r8,	r13	;
    e6bc:	1d c3       	bic	#1,	r13	;r3 As==01
    e6be:	08 4d       	mov	r13,	r8	;

0000e6c0 <.LVL110>:
    e6c0:	28 53       	incd	r8		;

0000e6c2 <.LVL111>:
	    cput_nibble_block (s, i);
    e6c2:	2d 4d       	mov	@r13,	r13	;
    e6c4:	b0 12 48 e5 	call	#58696		;#0xe548

0000e6c8 <.LVL112>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e6c8:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e6cc:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6ce:	d6 23       	jnz	$-82     	;abs 0xe67c

0000e6d0 <.L85>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e6d0:	30 40 1c e9 	br	#0xe91c		;
    e6d4:	30 40 4e e8 	br	#0xe84e		;

0000e6d8 <.L88>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e6d8:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e6dc:	fd 23       	jnz	$-4      	;abs 0xe6d8

0000e6de <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e6de:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e6e2:	0c 44       	mov	r4,	r12	;
    e6e4:	04 49       	mov	r9,	r4	;
    e6e6:	09 4c       	mov	r12,	r9	;

0000e6e8 <.L89>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e6e8:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e6ec:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6ee:	c6 23       	jnz	$-114    	;abs 0xe67c

0000e6f0 <.Loc.175.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e6f0:	30 40 1c e9 	br	#0xe91c		;
    e6f4:	30 40 4e e8 	br	#0xe84e		;

0000e6f8 <.L130>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e6f8:	7d 90 42 00 	cmp.b	#66,	r13	;#0x0042
    e6fc:	6c 24       	jz	$+218    	;abs 0xe7d6
    e6fe:	7e 40 42 00 	mov.b	#66,	r14	;#0x0042
    e702:	4e 9d       	cmp.b	r13,	r14	;
    e704:	5d 2c       	jc	$+188    	;abs 0xe7c0
    e706:	7d 90 62 00 	cmp.b	#98,	r13	;#0x0062
    e70a:	3a 24       	jz	$+118    	;abs 0xe780
    e70c:	7d 90 63 00 	cmp.b	#99,	r13	;#0x0063
    e710:	eb 23       	jnz	$-40     	;abs 0xe6e8

0000e712 <.Loc.135.1>:
	  {
	  case '%':
	    tty_putc ('%');
	    break;
	  case 'c':
	    i = va_arg (v, int);
    e712:	18 53       	inc	r8		;

0000e714 <.LVL117>:
    e714:	0c 48       	mov	r8,	r12	;
    e716:	1c c3       	bic	#1,	r12	;r3 As==01
    e718:	08 4c       	mov	r12,	r8	;

0000e71a <.LVL118>:
    e71a:	28 53       	incd	r8		;

0000e71c <.LVL119>:
    e71c:	2c 4c       	mov	@r12,	r12	;

0000e71e <.L103>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e71e:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e722:	fd 23       	jnz	$-4      	;abs 0xe71e

0000e724 <.L126>:

  // Write the output character
  UART_TXD = txdata;
    e724:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e728:	30 40 e8 e6 	br	#0xe6e8		;

0000e72c <.L98>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e72c:	7d 90 77 00 	cmp.b	#119,	r13	;#0x0077
    e730:	1d 24       	jz	$+60     	;abs 0xe76c
    e732:	7d 90 78 00 	cmp.b	#120,	r13	;#0x0078
    e736:	d8 23       	jnz	$-78     	;abs 0xe6e8

0000e738 <.Loc.159.1>:
	  case 'l':
	    i = va_arg (v, int);
	    cput_hex_long (i);
	    break;
	  case 'x':
	    s = va_arg (v, char *);
    e738:	2c 48       	mov	@r8,	r12	;

0000e73a <.Loc.160.1>:
	    i = va_arg (v, int);
    e73a:	38 50 03 00 	add	#3,	r8	;

0000e73e <.LVL122>:
    e73e:	0d 48       	mov	r8,	r13	;
    e740:	1d c3       	bic	#1,	r13	;r3 As==01
    e742:	08 4d       	mov	r13,	r8	;

0000e744 <.LVL123>:
    e744:	28 53       	incd	r8		;

0000e746 <.LVL124>:
	    cput_hex_block (s, i);
    e746:	2d 4d       	mov	@r13,	r13	;
    e748:	b0 12 c0 e4 	call	#58560		;#0xe4c0

0000e74c <.LVL125>:
	    break;
    e74c:	30 40 e8 e6 	br	#0xe6e8		;

0000e750 <.L99>:
	  case 'w':
	    i = va_arg (v, int);
	    cput_hex_word (i);
	    break;
	  case 'l':
	    i = va_arg (v, int);
    e750:	18 53       	inc	r8		;

0000e752 <.LVL126>:
    e752:	0c 48       	mov	r8,	r12	;
    e754:	1c c3       	bic	#1,	r12	;r3 As==01
    e756:	08 4c       	mov	r12,	r8	;

0000e758 <.LVL127>:
    e758:	28 53       	incd	r8		;

0000e75a <.LVL128>:
	    cput_hex_long (i);
    e75a:	2c 4c       	mov	@r12,	r12	;
    e75c:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e760:	0d 7d       	subc	r13,	r13	;
    e762:	3d e3       	inv	r13		;
    e764:	b0 12 c8 e3 	call	#58312		;#0xe3c8

0000e768 <.LVL129>:
	    break;
    e768:	30 40 e8 e6 	br	#0xe6e8		;

0000e76c <.L101>:
	  case 'B':
	    i = va_arg (v, int);
	    cput_binary_byte (i);
	    break;
	  case 'w':
	    i = va_arg (v, int);
    e76c:	18 53       	inc	r8		;

0000e76e <.LVL130>:
    e76e:	0c 48       	mov	r8,	r12	;
    e770:	1c c3       	bic	#1,	r12	;r3 As==01
    e772:	08 4c       	mov	r12,	r8	;

0000e774 <.LVL131>:
    e774:	28 53       	incd	r8		;

0000e776 <.LVL132>:
	    cput_hex_word (i);
    e776:	2c 4c       	mov	@r12,	r12	;
    e778:	b0 12 52 e3 	call	#58194		;#0xe352

0000e77c <.LVL133>:
	    break;
    e77c:	30 40 e8 e6 	br	#0xe6e8		;

0000e780 <.L95>:
	  case 'd':
	    i = va_arg (v, int);
	    cput_number(i);
	    break;
	  case 'b':
	    i = va_arg (v, int);
    e780:	18 53       	inc	r8		;

0000e782 <.LVL134>:
    e782:	0c 48       	mov	r8,	r12	;
    e784:	1c c3       	bic	#1,	r12	;r3 As==01
    e786:	08 4c       	mov	r12,	r8	;

0000e788 <.LVL135>:
    e788:	28 53       	incd	r8		;

0000e78a <.LVL136>:
    e78a:	26 4c       	mov	@r12,	r6	;

0000e78c <.LBB242>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e78c:	37 40 09 e0 	mov	#57353,	r7	;#0xe009

0000e790 <.LBE244>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e790:	0c 46       	mov	r6,	r12	;
    e792:	b0 12 42 e9 	call	#59714		;#0xe942

0000e796 <.LBB249>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e796:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e79a:	0c 57       	add	r7,	r12	;
    e79c:	6c 4c       	mov.b	@r12,	r12	;

0000e79e <.L104>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e79e:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7a2:	fd 23       	jnz	$-4      	;abs 0xe79e

0000e7a4 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e7a4:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e7a8 <.LBB250>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e7a8:	76 f0 0f 00 	and.b	#15,	r6	;#0x000f
    e7ac:	07 56       	add	r6,	r7	;
    e7ae:	6c 47       	mov.b	@r7,	r12	;

0000e7b0 <.L105>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e7b0:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7b4:	b7 27       	jz	$-144    	;abs 0xe724
    e7b6:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7ba:	fa 23       	jnz	$-10     	;abs 0xe7b0
    e7bc:	30 40 24 e7 	br	#0xe724		;

0000e7c0 <.L132>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e7c0:	7d 90 25 00 	cmp.b	#37,	r13	;#0x0025
    e7c4:	91 23       	jnz	$-220    	;abs 0xe6e8

0000e7c6 <.L94>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e7c6:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7ca:	fd 23       	jnz	$-4      	;abs 0xe7c6

0000e7cc <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e7cc:	f2 40 25 00 	mov.b	#37,	&0x0084	;#0x0025
    e7d0:	84 00 
    e7d2:	30 40 e8 e6 	br	#0xe6e8		;

0000e7d6 <.L92>:
	  case 'b':
	    i = va_arg (v, int);
	    cput_hex_byte (i);
	    break;
	  case 'B':
	    i = va_arg (v, int);
    e7d6:	18 53       	inc	r8		;

0000e7d8 <.LVL143>:
    e7d8:	0c 48       	mov	r8,	r12	;
    e7da:	1c c3       	bic	#1,	r12	;r3 As==01
    e7dc:	08 4c       	mov	r12,	r8	;

0000e7de <.LVL144>:
    e7de:	28 53       	incd	r8		;

0000e7e0 <.LVL145>:
    e7e0:	26 4c       	mov	@r12,	r6	;

0000e7e2 <.LBB256>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e7e2:	75 40 07 00 	mov.b	#7,	r5	;

0000e7e6 <.LBB258>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);

  // Write the output character
  UART_TXD = txdata;
    e7e6:	77 40 84 00 	mov.b	#132,	r7	;#0x0084

0000e7ea <.LBE258>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e7ea:	0c 46       	mov	r6,	r12	;
    e7ec:	0d 45       	mov	r5,	r13	;
    e7ee:	b0 12 50 e9 	call	#59728		;#0xe950
    e7f2:	1c b3       	bit	#1,	r12	;r3 As==01
    e7f4:	10 24       	jz	$+34     	;abs 0xe816

0000e7f6 <.L133>:
    e7f6:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031

0000e7fa <.L107>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e7fa:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7fe:	fd 23       	jnz	$-4      	;abs 0xe7fa

0000e800 <.L134>:

  // Write the output character
  UART_TXD = txdata;
    e800:	c7 4c 00 00 	mov.b	r12,	0(r7)	;

0000e804 <.LBE262>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e804:	35 53       	add	#-1,	r5	;r3 As==11
    e806:	35 93       	cmp	#-1,	r5	;r3 As==11
    e808:	6f 27       	jz	$-288    	;abs 0xe6e8

0000e80a <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e80a:	0c 46       	mov	r6,	r12	;
    e80c:	0d 45       	mov	r5,	r13	;
    e80e:	b0 12 50 e9 	call	#59728		;#0xe950
    e812:	1c b3       	bit	#1,	r12	;r3 As==01
    e814:	f0 23       	jnz	$-30     	;abs 0xe7f6

0000e816 <.L111>:
    e816:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e81a <.LBB263>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e81a:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e81e:	ed 23       	jnz	$-36     	;abs 0xe7fa
    e820:	30 40 00 e8 	br	#0xe800		;

0000e824 <.L97>:
	    i = va_arg (v, int);
	    cput_nibble_block (s, i);
	    break;
	  case 's':
	    s = va_arg (v, char *);
	    tty_putc (s[0]);
    e824:	2c 48       	mov	@r8,	r12	;
    e826:	28 53       	incd	r8		;

0000e828 <.LVL152>:
    e828:	6c 4c       	mov.b	@r12,	r12	;

0000e82a <.L109>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e82a:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e82e:	7a 27       	jz	$-266    	;abs 0xe724
    e830:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e834:	fa 23       	jnz	$-10     	;abs 0xe82a
    e836:	30 40 24 e7 	br	#0xe724		;

0000e83a <.L90>:
	  case 'c':
	    i = va_arg (v, int);
	    tty_putc(i);
	    break;
	  case 'd':
	    i = va_arg (v, int);
    e83a:	18 53       	inc	r8		;

0000e83c <.LVL155>:
    e83c:	0c 48       	mov	r8,	r12	;
    e83e:	1c c3       	bic	#1,	r12	;r3 As==01
    e840:	08 4c       	mov	r12,	r8	;

0000e842 <.LVL156>:
    e842:	28 53       	incd	r8		;

0000e844 <.LVL157>:
	    cput_number(i);
    e844:	2c 4c       	mov	@r12,	r12	;
    e846:	b0 12 94 e5 	call	#58772		;#0xe594

0000e84a <.LVL158>:
	    break;
    e84a:	30 40 e8 e6 	br	#0xe6e8		;

0000e84e <udivmodhi4>:
    e84e:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e852 <.Loc.35.1>:
    e852:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e854 <.L2>:
    e854:	0d 9c       	cmp	r12,	r13	;
    e856:	08 28       	jnc	$+18     	;abs 0xe868

0000e858 <.L15>:
    e858:	4f 43       	clr.b	r15		;

0000e85a <.L4>:
    e85a:	0b 93       	cmp	#0,	r11	;r3 As==00
    e85c:	0e 20       	jnz	$+30     	;abs 0xe87a

0000e85e <.L5>:
    e85e:	0e 93       	cmp	#0,	r14	;r3 As==00
    e860:	01 24       	jz	$+4      	;abs 0xe864
    e862:	0f 4c       	mov	r12,	r15	;

0000e864 <.L1>:
    e864:	0c 4f       	mov	r15,	r12	;
    e866:	30 41       	ret			

0000e868 <.L3>:
    e868:	3f 53       	add	#-1,	r15	;r3 As==11

0000e86a <.Loc.38.1>:
    e86a:	0f 93       	cmp	#0,	r15	;r3 As==00
    e86c:	f8 27       	jz	$-14     	;abs 0xe85e

0000e86e <.Loc.38.1>:
    e86e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e870:	f3 3b       	jl	$-24     	;abs 0xe858

0000e872 <.Loc.40.1>:
    e872:	0d 5d       	rla	r13		;

0000e874 <.Loc.41.1>:
    e874:	0b 5b       	rla	r11		;
    e876:	30 40 54 e8 	br	#0xe854		;

0000e87a <.L9>:
    e87a:	0c 9d       	cmp	r13,	r12	;
    e87c:	02 28       	jnc	$+6      	;abs 0xe882

0000e87e <.Loc.47.1>:
    e87e:	0c 8d       	sub	r13,	r12	;

0000e880 <.Loc.48.1>:
    e880:	0f db       	bis	r11,	r15	;

0000e882 <.L8>:
    e882:	12 c3       	clrc			
    e884:	0b 10       	rrc	r11		;

0000e886 <.Loc.51.1>:
    e886:	12 c3       	clrc			
    e888:	0d 10       	rrc	r13		;
    e88a:	30 40 5a e8 	br	#0xe85a		;

0000e88e <__mspabi_divi>:
    e88e:	0a 12       	push	r10		;

0000e890 <.LCFI0>:
    e890:	0f 4c       	mov	r12,	r15	;
    e892:	0e 4d       	mov	r13,	r14	;

0000e894 <.LVL14>:
    e894:	3b 40 4e e8 	mov	#59470,	r11	;#0xe84e

0000e898 <.Loc.64.1>:
    e898:	0c 93       	cmp	#0,	r12	;r3 As==00
    e89a:	1a 34       	jge	$+54     	;abs 0xe8d0

0000e89c <.Loc.66.1>:
    e89c:	4c 43       	clr.b	r12		;

0000e89e <.LVL15>:
    e89e:	0c 8f       	sub	r15,	r12	;
    e8a0:	0f 4c       	mov	r12,	r15	;

0000e8a2 <.LVL16>:
    e8a2:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8a4:	0d 34       	jge	$+28     	;abs 0xe8c0

0000e8a6 <.Loc.67.1>:
    e8a6:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e8a8 <.L21>:
    e8a8:	0d 43       	clr	r13		;
    e8aa:	0d 8e       	sub	r14,	r13	;

0000e8ac <.LVL18>:
    e8ac:	4e 43       	clr.b	r14		;

0000e8ae <.LVL19>:
    e8ae:	0c 4f       	mov	r15,	r12	;

0000e8b0 <.LVL20>:
    e8b0:	8b 12       	call	r11		;

0000e8b2 <.LVL21>:
    e8b2:	1a 93       	cmp	#1,	r10	;r3 As==01
    e8b4:	03 24       	jz	$+8      	;abs 0xe8bc

0000e8b6 <.L20>:
    e8b6:	4d 43       	clr.b	r13		;
    e8b8:	0d 8c       	sub	r12,	r13	;
    e8ba:	0c 4d       	mov	r13,	r12	;

0000e8bc <.L16>:
    e8bc:	3a 41       	pop	r10		;
    e8be:	30 41       	ret			

0000e8c0 <.L18>:
    e8c0:	4e 43       	clr.b	r14		;
    e8c2:	8b 12       	call	r11		;

0000e8c4 <.LVL25>:
    e8c4:	30 40 b6 e8 	br	#0xe8b6		;

0000e8c8 <.L27>:
    e8c8:	4e 43       	clr.b	r14		;
    e8ca:	8b 12       	call	r11		;

0000e8cc <.LVL27>:
    e8cc:	30 40 bc e8 	br	#0xe8bc		;

0000e8d0 <.L17>:
    e8d0:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8d2:	fa 37       	jge	$-10     	;abs 0xe8c8

0000e8d4 <.Loc.61.1>:
    e8d4:	4a 43       	clr.b	r10		;
    e8d6:	30 40 a8 e8 	br	#0xe8a8		;

0000e8da <__mspabi_remi>:
    e8da:	0a 12       	push	r10		;

0000e8dc <.LCFI1>:
    e8dc:	0c 93       	cmp	#0,	r12	;r3 As==00
    e8de:	13 34       	jge	$+40     	;abs 0xe906

0000e8e0 <.Loc.92.1>:
    e8e0:	4e 43       	clr.b	r14		;
    e8e2:	0e 8c       	sub	r12,	r14	;
    e8e4:	0c 4e       	mov	r14,	r12	;

0000e8e6 <.LVL31>:
    e8e6:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e8e8 <.L29>:
    e8e8:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8ea:	03 34       	jge	$+8      	;abs 0xe8f2
    e8ec:	4e 43       	clr.b	r14		;
    e8ee:	0e 8d       	sub	r13,	r14	;
    e8f0:	0d 4e       	mov	r14,	r13	;

0000e8f2 <.L30>:
    e8f2:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e8f4:	b0 12 4e e8 	call	#59470		;#0xe84e

0000e8f8 <.LVL34>:
    e8f8:	0a 93       	cmp	#0,	r10	;r3 As==00
    e8fa:	03 24       	jz	$+8      	;abs 0xe902

0000e8fc <.LVL35>:
    e8fc:	4d 43       	clr.b	r13		;
    e8fe:	0d 8c       	sub	r12,	r13	;
    e900:	0c 4d       	mov	r13,	r12	;

0000e902 <.L28>:
    e902:	3a 41       	pop	r10		;
    e904:	30 41       	ret			

0000e906 <.L32>:
    e906:	4a 43       	clr.b	r10		;
    e908:	30 40 e8 e8 	br	#0xe8e8		;

0000e90c <__mspabi_divu>:
    e90c:	4e 43       	clr.b	r14		;
    e90e:	b0 12 4e e8 	call	#59470		;#0xe84e

0000e912 <.LVL39>:
    e912:	30 41       	ret			

0000e914 <__mspabi_remu>:
    e914:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e916:	b0 12 4e e8 	call	#59470		;#0xe84e

0000e91a <.LVL41>:
    e91a:	30 41       	ret			

0000e91c <__mspabi_func_epilog_7>:
    e91c:	34 41       	pop	r4		;

0000e91e <__mspabi_func_epilog_6>:
    e91e:	35 41       	pop	r5		;

0000e920 <__mspabi_func_epilog_5>:
    e920:	36 41       	pop	r6		;

0000e922 <__mspabi_func_epilog_4>:
    e922:	37 41       	pop	r7		;

0000e924 <__mspabi_func_epilog_3>:
    e924:	38 41       	pop	r8		;

0000e926 <__mspabi_func_epilog_2>:
    e926:	39 41       	pop	r9		;

0000e928 <__mspabi_func_epilog_1>:
    e928:	3a 41       	pop	r10		;
    e92a:	30 41       	ret			

0000e92c <__mspabi_srai_15>:
    e92c:	0c 11       	rra	r12		;

0000e92e <__mspabi_srai_14>:
    e92e:	0c 11       	rra	r12		;

0000e930 <__mspabi_srai_13>:
    e930:	0c 11       	rra	r12		;

0000e932 <__mspabi_srai_12>:
    e932:	0c 11       	rra	r12		;

0000e934 <__mspabi_srai_11>:
    e934:	0c 11       	rra	r12		;

0000e936 <__mspabi_srai_10>:
    e936:	0c 11       	rra	r12		;

0000e938 <__mspabi_srai_9>:
    e938:	0c 11       	rra	r12		;

0000e93a <__mspabi_srai_8>:
    e93a:	0c 11       	rra	r12		;

0000e93c <__mspabi_srai_7>:
    e93c:	0c 11       	rra	r12		;

0000e93e <__mspabi_srai_6>:
    e93e:	0c 11       	rra	r12		;

0000e940 <__mspabi_srai_5>:
    e940:	0c 11       	rra	r12		;

0000e942 <__mspabi_srai_4>:
    e942:	0c 11       	rra	r12		;

0000e944 <__mspabi_srai_3>:
    e944:	0c 11       	rra	r12		;

0000e946 <__mspabi_srai_2>:
    e946:	0c 11       	rra	r12		;

0000e948 <__mspabi_srai_1>:
    e948:	0c 11       	rra	r12		;
    e94a:	30 41       	ret			

0000e94c <.L11>:
    e94c:	3d 53       	add	#-1,	r13	;r3 As==11
    e94e:	0c 11       	rra	r12		;

0000e950 <__mspabi_srai>:
    e950:	0d 93       	cmp	#0,	r13	;r3 As==00
    e952:	fc 23       	jnz	$-6      	;abs 0xe94c
    e954:	30 41       	ret			

0000e956 <__mspabi_sral_15>:
    e956:	0d 11       	rra	r13		;
    e958:	0c 10       	rrc	r12		;

0000e95a <__mspabi_sral_14>:
    e95a:	0d 11       	rra	r13		;
    e95c:	0c 10       	rrc	r12		;

0000e95e <__mspabi_sral_13>:
    e95e:	0d 11       	rra	r13		;
    e960:	0c 10       	rrc	r12		;

0000e962 <__mspabi_sral_12>:
    e962:	0d 11       	rra	r13		;
    e964:	0c 10       	rrc	r12		;

0000e966 <__mspabi_sral_11>:
    e966:	0d 11       	rra	r13		;
    e968:	0c 10       	rrc	r12		;

0000e96a <__mspabi_sral_10>:
    e96a:	0d 11       	rra	r13		;
    e96c:	0c 10       	rrc	r12		;

0000e96e <__mspabi_sral_9>:
    e96e:	0d 11       	rra	r13		;
    e970:	0c 10       	rrc	r12		;

0000e972 <__mspabi_sral_8>:
    e972:	0d 11       	rra	r13		;
    e974:	0c 10       	rrc	r12		;

0000e976 <__mspabi_sral_7>:
    e976:	0d 11       	rra	r13		;
    e978:	0c 10       	rrc	r12		;

0000e97a <__mspabi_sral_6>:
    e97a:	0d 11       	rra	r13		;
    e97c:	0c 10       	rrc	r12		;

0000e97e <__mspabi_sral_5>:
    e97e:	0d 11       	rra	r13		;
    e980:	0c 10       	rrc	r12		;

0000e982 <__mspabi_sral_4>:
    e982:	0d 11       	rra	r13		;
    e984:	0c 10       	rrc	r12		;

0000e986 <__mspabi_sral_3>:
    e986:	0d 11       	rra	r13		;
    e988:	0c 10       	rrc	r12		;

0000e98a <__mspabi_sral_2>:
    e98a:	0d 11       	rra	r13		;
    e98c:	0c 10       	rrc	r12		;

0000e98e <__mspabi_sral_1>:
    e98e:	0d 11       	rra	r13		;
    e990:	0c 10       	rrc	r12		;
    e992:	30 41       	ret			

0000e994 <.L12>:
    e994:	3e 53       	add	#-1,	r14	;r3 As==11
    e996:	0d 11       	rra	r13		;
    e998:	0c 10       	rrc	r12		;

0000e99a <__mspabi_sral>:
    e99a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e99c:	fb 23       	jnz	$-8      	;abs 0xe994
    e99e:	30 41       	ret			

0000e9a0 <__mspabi_srli_15>:
    e9a0:	12 c3       	clrc			
    e9a2:	0c 10       	rrc	r12		;

0000e9a4 <__mspabi_srli_14>:
    e9a4:	12 c3       	clrc			
    e9a6:	0c 10       	rrc	r12		;

0000e9a8 <__mspabi_srli_13>:
    e9a8:	12 c3       	clrc			
    e9aa:	0c 10       	rrc	r12		;

0000e9ac <__mspabi_srli_12>:
    e9ac:	12 c3       	clrc			
    e9ae:	0c 10       	rrc	r12		;

0000e9b0 <__mspabi_srli_11>:
    e9b0:	12 c3       	clrc			
    e9b2:	0c 10       	rrc	r12		;

0000e9b4 <__mspabi_srli_10>:
    e9b4:	12 c3       	clrc			
    e9b6:	0c 10       	rrc	r12		;

0000e9b8 <__mspabi_srli_9>:
    e9b8:	12 c3       	clrc			
    e9ba:	0c 10       	rrc	r12		;

0000e9bc <__mspabi_srli_8>:
    e9bc:	12 c3       	clrc			
    e9be:	0c 10       	rrc	r12		;

0000e9c0 <__mspabi_srli_7>:
    e9c0:	12 c3       	clrc			
    e9c2:	0c 10       	rrc	r12		;

0000e9c4 <__mspabi_srli_6>:
    e9c4:	12 c3       	clrc			
    e9c6:	0c 10       	rrc	r12		;

0000e9c8 <__mspabi_srli_5>:
    e9c8:	12 c3       	clrc			
    e9ca:	0c 10       	rrc	r12		;

0000e9cc <__mspabi_srli_4>:
    e9cc:	12 c3       	clrc			
    e9ce:	0c 10       	rrc	r12		;

0000e9d0 <__mspabi_srli_3>:
    e9d0:	12 c3       	clrc			
    e9d2:	0c 10       	rrc	r12		;

0000e9d4 <__mspabi_srli_2>:
    e9d4:	12 c3       	clrc			
    e9d6:	0c 10       	rrc	r12		;

0000e9d8 <__mspabi_srli_1>:
    e9d8:	12 c3       	clrc			
    e9da:	0c 10       	rrc	r12		;
    e9dc:	30 41       	ret			

0000e9de <.L11>:
    e9de:	3d 53       	add	#-1,	r13	;r3 As==11
    e9e0:	12 c3       	clrc			
    e9e2:	0c 10       	rrc	r12		;

0000e9e4 <__mspabi_srli>:
    e9e4:	0d 93       	cmp	#0,	r13	;r3 As==00
    e9e6:	fb 23       	jnz	$-8      	;abs 0xe9de
    e9e8:	30 41       	ret			

0000e9ea <__mspabi_srll_15>:
    e9ea:	12 c3       	clrc			
    e9ec:	0d 10       	rrc	r13		;
    e9ee:	0c 10       	rrc	r12		;

0000e9f0 <__mspabi_srll_14>:
    e9f0:	12 c3       	clrc			
    e9f2:	0d 10       	rrc	r13		;
    e9f4:	0c 10       	rrc	r12		;

0000e9f6 <__mspabi_srll_13>:
    e9f6:	12 c3       	clrc			
    e9f8:	0d 10       	rrc	r13		;
    e9fa:	0c 10       	rrc	r12		;

0000e9fc <__mspabi_srll_12>:
    e9fc:	12 c3       	clrc			
    e9fe:	0d 10       	rrc	r13		;
    ea00:	0c 10       	rrc	r12		;

0000ea02 <__mspabi_srll_11>:
    ea02:	12 c3       	clrc			
    ea04:	0d 10       	rrc	r13		;
    ea06:	0c 10       	rrc	r12		;

0000ea08 <__mspabi_srll_10>:
    ea08:	12 c3       	clrc			
    ea0a:	0d 10       	rrc	r13		;
    ea0c:	0c 10       	rrc	r12		;

0000ea0e <__mspabi_srll_9>:
    ea0e:	12 c3       	clrc			
    ea10:	0d 10       	rrc	r13		;
    ea12:	0c 10       	rrc	r12		;

0000ea14 <__mspabi_srll_8>:
    ea14:	12 c3       	clrc			
    ea16:	0d 10       	rrc	r13		;
    ea18:	0c 10       	rrc	r12		;

0000ea1a <__mspabi_srll_7>:
    ea1a:	12 c3       	clrc			
    ea1c:	0d 10       	rrc	r13		;
    ea1e:	0c 10       	rrc	r12		;

0000ea20 <__mspabi_srll_6>:
    ea20:	12 c3       	clrc			
    ea22:	0d 10       	rrc	r13		;
    ea24:	0c 10       	rrc	r12		;

0000ea26 <__mspabi_srll_5>:
    ea26:	12 c3       	clrc			
    ea28:	0d 10       	rrc	r13		;
    ea2a:	0c 10       	rrc	r12		;

0000ea2c <__mspabi_srll_4>:
    ea2c:	12 c3       	clrc			
    ea2e:	0d 10       	rrc	r13		;
    ea30:	0c 10       	rrc	r12		;

0000ea32 <__mspabi_srll_3>:
    ea32:	12 c3       	clrc			
    ea34:	0d 10       	rrc	r13		;
    ea36:	0c 10       	rrc	r12		;

0000ea38 <__mspabi_srll_2>:
    ea38:	12 c3       	clrc			
    ea3a:	0d 10       	rrc	r13		;
    ea3c:	0c 10       	rrc	r12		;

0000ea3e <__mspabi_srll_1>:
    ea3e:	12 c3       	clrc			
    ea40:	0d 10       	rrc	r13		;
    ea42:	0c 10       	rrc	r12		;
    ea44:	30 41       	ret			

0000ea46 <.L12>:
    ea46:	3e 53       	add	#-1,	r14	;r3 As==11
    ea48:	12 c3       	clrc			
    ea4a:	0d 10       	rrc	r13		;
    ea4c:	0c 10       	rrc	r12		;

0000ea4e <__mspabi_srll>:
    ea4e:	0e 93       	cmp	#0,	r14	;r3 As==00
    ea50:	fa 23       	jnz	$-10     	;abs 0xea46
    ea52:	30 41       	ret			

0000ea54 <memmove>:
    ea54:	0d 9c       	cmp	r12,	r13	;
    ea56:	0a 28       	jnc	$+22     	;abs 0xea6c

0000ea58 <.L5>:
    ea58:	0f 4c       	mov	r12,	r15	;
    ea5a:	0e 5c       	add	r12,	r14	;

0000ea5c <.L3>:
    ea5c:	0e 9f       	cmp	r15,	r14	;
    ea5e:	0d 24       	jz	$+28     	;abs 0xea7a

0000ea60 <.LVL3>:
    ea60:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    ea64:	1f 53       	inc	r15		;

0000ea66 <.LVL4>:
    ea66:	1d 53       	inc	r13		;
    ea68:	30 40 5c ea 	br	#0xea5c		;

0000ea6c <.L2>:
    ea6c:	0f 4d       	mov	r13,	r15	;
    ea6e:	0f 5e       	add	r14,	r15	;
    ea70:	0c 9f       	cmp	r15,	r12	;
    ea72:	f2 2f       	jc	$-26     	;abs 0xea58

0000ea74 <.L4>:
    ea74:	3e 53       	add	#-1,	r14	;r3 As==11

0000ea76 <.LVL7>:
    ea76:	3e 93       	cmp	#-1,	r14	;r3 As==11
    ea78:	01 20       	jnz	$+4      	;abs 0xea7c

0000ea7a <.L10>:
    ea7a:	30 41       	ret			

0000ea7c <.L6>:
    ea7c:	0b 4c       	mov	r12,	r11	;
    ea7e:	0b 5e       	add	r14,	r11	;
    ea80:	0f 4d       	mov	r13,	r15	;
    ea82:	0f 5e       	add	r14,	r15	;
    ea84:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    ea88:	30 40 74 ea 	br	#0xea74		;

0000ea8c <memset>:
    ea8c:	0f 4c       	mov	r12,	r15	;
    ea8e:	0e 5c       	add	r12,	r14	;

0000ea90 <.L2>:
    ea90:	0f 9e       	cmp	r14,	r15	;
    ea92:	01 20       	jnz	$+4      	;abs 0xea96

0000ea94 <.Loc.104.1>:
    ea94:	30 41       	ret			

0000ea96 <.L3>:
    ea96:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    ea9a:	1f 53       	inc	r15		;

0000ea9c <.LVL4>:
    ea9c:	30 40 90 ea 	br	#0xea90		;

0000eaa0 <L0>:
    eaa0:	30 41       	ret			

0000eaa2 <__do_global_ctors_aux>:
    eaa2:	0a 12       	push	r10		;
    eaa4:	3a 40 24 e0 	mov	#57380,	r10	;#0xe024

0000eaa8 <.L2>:
    eaa8:	2c 4a       	mov	@r10,	r12	;
    eaaa:	3c 93       	cmp	#-1,	r12	;r3 As==11
    eaac:	02 20       	jnz	$+6      	;abs 0xeab2
    eaae:	3a 41       	pop	r10		;
    eab0:	30 41       	ret			

0000eab2 <.L3>:
    eab2:	8c 12       	call	r12		;
    eab4:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    eab8:	30 40 a8 ea 	br	#0xeaa8		;

0000eabc <call___do_global_ctors_aux>:
    eabc:	b0 12 32 e1 	call	#57650		;#0xe132
    eac0:	b0 12 a2 ea 	call	#60066		;#0xeaa2

0000eac4 <L0>:
    eac4:	b0 12 6a e0 	call	#57450		;#0xe06a

0000eac8 <.Loc.19.1>:
    eac8:	b0 12 5c e0 	call	#57436		;#0xe05c

0000eacc <.Loc.20.1>:
    eacc:	30 41       	ret			

0000eace <__msp430_fini>:
    eace:	b0 12 78 e0 	call	#57464		;#0xe078

0000ead2 <L0>:
    ead2:	b0 12 e4 e0 	call	#57572		;#0xe0e4

0000ead6 <L0>:
    ead6:	30 41       	ret			
