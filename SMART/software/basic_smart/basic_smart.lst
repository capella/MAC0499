
basic_smart.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fee0 l    d  .key	00000000 .key
0000fae0 l    d  .keyfunction	00000000 .keyfunction
0000ffee l    d  __interrupt_vector_8	00000000 __interrupt_vector_8
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e058 l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000202 l    d  .bss	00000000 .bss
00000215 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e0b4 l       .text	00000000 _msp430_run_array
0000e0c2 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 cprintf.c
0000e036 l     O .rodata	00000011 hex
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e050 l     O .rodata	00000000 __CTOR_LIST__
0000e054 l     O .rodata	00000000 __DTOR_LIST__
0000e048 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000eb12 l     O .text	00000000 __TMC_LIST__
0000e0c8 l     F .text	00000000 deregister_tm_clones
0000e0e2 l     F .text	00000000 register_tm_clones
0000e110 l     F .text	00000000 __do_global_dtors_aux
00000202 l     O .bss	00000000 completed.3056
00000204 l     O .bss	00000000 dtor_idx.3058
0000e15e l     F .text	00000000 call___do_global_dtors_aux
0000e15e l     F .text	00000000 frame_dummy
00000206 l     O .bss	00000000 object.3071
0000e176 l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e052 l     O .rodata	00000000 __CTOR_END__
0000e048 l     O .rodata	00000000 __FRAME_END__
0000eadc l     F .text	00000000 __do_global_ctors_aux
0000eaf6 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e9f2 g       .text	00000000 .hidden __mspabi_srli_9
0000e978 g       .text	00000000 .hidden __mspabi_srai_6
0000e982 g       .text	00000000 .hidden __mspabi_srai_1
0000ea42 g       .text	00000000 .hidden __mspabi_srll_10
0000e9ee g       .text	00000000 .hidden __mspabi_srli_10
0000e9a4 g       .text	00000000 .hidden __mspabi_sral_10
0000e994 g       .text	00000000 .hidden __mspabi_sral_14
0000e252 g     F .text	00000054 INT_uart_rx
0000e9da g       .text	00000000 .hidden __mspabi_srli_15
0000ea8e g     F .text	00000038 memmove
0000ea06 g       .text	00000000 .hidden __mspabi_srli_4
0000e888 g     F .text	00000040 .hidden udivmodhi4
0000e9a8 g       .text	00000000 .hidden __mspabi_sral_9
0000e9fa g       .text	00000000 .hidden __mspabi_srli_7
0000ea54 g       .text	00000000 .hidden __mspabi_srll_7
0000ea6c g       .text	00000000 .hidden __mspabi_srll_3
0000e694 g     F .text	000001f4 cprintf
0000e9b4 g       .text	00000000 .hidden __mspabi_sral_6
0000e9c8 g       .text	00000000 .hidden __mspabi_sral_1
0000e958 g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e966 g       .text	00000000 .hidden __mspabi_srai_15
0000e2e6 g     F .text	00000018 cput_nibble
0000eb12 g     O .text	00000000 .hidden __TMC_END__
0000ea30 g       .text	00000000 .hidden __mspabi_srll_13
0000e056 g     O .rodata	00000000 .hidden __DTOR_END__
0000e04c g       .rodata	00000000 __fini_array_end
0000e9e6 g       .text	00000000 .hidden __mspabi_srli_12
0000e980 g       .text	00000000 .hidden __mspabi_srai_2
0000e97e g       .text	00000000 .hidden __mspabi_srai_3
0000e058 g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e05c g     F .text	0000000e __crt0_init_bss
00000013 g       *ABS*	00000000 __bsssize
0000e970 g       .text	00000000 .hidden __mspabi_srai_10
0000e914 g     F .text	00000032 .hidden __mspabi_remi
0000e07e g     F .text	0000000a __crt0_call_init_then_main
0000e962 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e33c g     F .text	00000050 cput_binary_byte
0000e95e g       .text	00000000 .hidden __mspabi_func_epilog_3
0000ea60 g       .text	00000000 .hidden __mspabi_srll_5
0000ea1e g       .text	00000000 .hidden __mspabi_srli
0000e402 g     F .text	000000f8 cput_hex_long
0000ea3c g       .text	00000000 .hidden __mspabi_srll_11
0000ea02 g       .text	00000000 .hidden __mspabi_srli_5
00000214 g     O .bss	00000001 rxdata
00000000  w      *UND*	00000000 __deregister_frame_info
00000216 g       .noinit	00000000 end
0000e9a0 g       .text	00000000 .hidden __mspabi_sral_11
0000e990 g       .text	00000000 .hidden __mspabi_sral_15
0000e976 g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e2fe g     F .text	0000003e cput_hex_byte
0000e94e g     F .text	00000008 .hidden __mspabi_remu
0000ea5a g       .text	00000000 .hidden __mspabi_srll_6
0000e9bc g       .text	00000000 .hidden __mspabi_sral_4
0000e058 g       .text	00000000 _start
0000e38c g     F .text	00000076 cput_hex_word
0000e0a4 g     F .text	00000000 _msp430_run_fini_array
0000ea12 g       .text	00000000 .hidden __mspabi_srli_1
0000ea2a g       .text	00000000 .hidden __mspabi_srll_14
0000e98a g       .text	00000000 .hidden __mspabi_srai
0000e96c g       .text	00000000 .hidden __mspabi_srai_12
0000e9de g       .text	00000000 .hidden __mspabi_srli_14
00000002 g       *ABS*	00000000 __romdatacopysize
0000e9b0 g       .text	00000000 .hidden __mspabi_sral_7
0000e974 g       .text	00000000 .hidden __mspabi_srai_8
0000e9ea g       .text	00000000 .hidden __mspabi_srli_11
0000e5ce g     F .text	000000c6 cput_number
0000e9c4 g       .text	00000000 .hidden __mspabi_sral_2
0000e4fa g     F .text	00000088 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e04c g       .rodata	00000000 __fini_array_start
0000e8c8 g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000eaf6 g       .text	00000000 __msp430_init
0000eac6 g     F .text	00000014 memset
0000e2a6 g     F .text	00000040 main
0000e972 g       .text	00000000 .hidden __mspabi_srai_9
0000e96e g       .text	00000000 .hidden __mspabi_srai_11
0000ea66 g       .text	00000000 .hidden __mspabi_srll_4
0000e04c g       .rodata	00000000 __init_array_end
0000ea0e g       .text	00000000 .hidden __mspabi_srli_2
0000e9d4 g       .text	00000000 .hidden __mspabi_sral
0000e946 g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
0000fee0 g     O .key	00000100 key
00000000  w      *ABS*	00000000 __rom_highdatastart
0000eb12 g       .text	00000000 __msp430_fini_end
0000e9ac g       .text	00000000 .hidden __mspabi_sral_8
0000e998 g       .text	00000000 .hidden __mspabi_sral_13
0000e22c g     F .text	00000014 delay
0000ea36 g       .text	00000000 .hidden __mspabi_srll_12
0000eb12 g       *ABS*	00000000 __romdatastart
0000e97c g       .text	00000000 .hidden __mspabi_srai_4
0000e088 g     F .text	00000000 _msp430_run_init_array
0000e9fe g       .text	00000000 .hidden __mspabi_srli_6
0000e04c g       .rodata	00000000 __preinit_array_end
0000ea0a g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
0000e176 g     F .text	000000b6 copykey
00000202 g       .bss	00000000 __bssstart
0000e95a g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e968 g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .MP430.attributes	00000000 __stack
0000ea48 g       .text	00000000 .hidden __mspabi_srll_9
0000e9c0 g       .text	00000000 .hidden __mspabi_sral_3
00000202 g       .data	00000000 _edata
0000e99c g       .text	00000000 .hidden __mspabi_sral_12
0000eb08 g       .text	00000000 __msp430_init_end
0000e240 g     F .text	00000012 tty_putc
0000ea88 g       .text	00000000 .hidden __mspabi_srll
0000e582 g     F .text	0000004c cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000ea24 g       .text	00000000 .hidden __mspabi_srll_15
0000e04c g       .rodata	00000000 __init_array_start
0000e97a g       .text	00000000 .hidden __mspabi_srai_5
0000e96a g       .text	00000000 .hidden __mspabi_srai_13
0000e9e2 g       .text	00000000 .hidden __mspabi_srli_13
00000200 g       .data	00000000 __datastart
0000ea4e g       .text	00000000 .hidden __mspabi_srll_8
0000ea78 g       .text	00000000 .hidden __mspabi_srll_1
0000e04c g       .rodata	00000000 __preinit_array_start
0000e06a g     F .text	00000014 __crt0_movedata
0000e960 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e9b8 g       .text	00000000 .hidden __mspabi_sral_5
0000e096 g     F .text	00000000 _msp430_run_preinit_array
0000e956 g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e95c g       .text	00000000 .hidden __mspabi_func_epilog_4
0000ea72 g       .text	00000000 .hidden __mspabi_srll_2
0000eb08 g       .text	00000000 __msp430_fini
0000e9f6 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_8:

0000ffee <__interrupt_vector_8>:
    ffee:	52 e2       	interrupt service routine at 0xe252

Disassembly of section .text:

0000e058 <__crt0_start>:
    e058:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e05c <__crt0_init_bss>:
    e05c:	3c 40 02 02 	mov	#514,	r12	;#0x0202

0000e060 <.Loc.74.1>:
    e060:	0d 43       	clr	r13		;

0000e062 <.Loc.75.1>:
    e062:	3e 40 13 00 	mov	#19,	r14	;#0x0013

0000e066 <.Loc.79.1>:
    e066:	b0 12 c6 ea 	call	#60102		;#0xeac6

0000e06a <__crt0_movedata>:
    e06a:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e06e <.Loc.116.1>:
    e06e:	3d 40 12 eb 	mov	#60178,	r13	;#0xeb12

0000e072 <.Loc.119.1>:
    e072:	0d 9c       	cmp	r12,	r13	;

0000e074 <.Loc.120.1>:
    e074:	04 24       	jz	$+10     	;abs 0xe07e

0000e076 <.Loc.122.1>:
    e076:	3e 40 02 00 	mov	#2,	r14	;

0000e07a <.Loc.124.1>:
    e07a:	b0 12 8e ea 	call	#60046		;#0xea8e

0000e07e <__crt0_call_init_then_main>:
    e07e:	b0 12 f6 ea 	call	#60150		;#0xeaf6

0000e082 <.Loc.196.1>:
    e082:	0c 43       	clr	r12		;

0000e084 <.Loc.197.1>:
    e084:	b0 12 a6 e2 	call	#58022		;#0xe2a6

0000e088 <_msp430_run_init_array>:
    e088:	34 40 4c e0 	mov	#57420,	r4	;#0xe04c

0000e08c <.Loc.224.1>:
    e08c:	35 40 4c e0 	mov	#57420,	r5	;#0xe04c

0000e090 <.Loc.225.1>:
    e090:	26 43       	mov	#2,	r6	;r3 As==10

0000e092 <.Loc.226.1>:
    e092:	30 40 b4 e0 	br	#0xe0b4		;

0000e096 <_msp430_run_preinit_array>:
    e096:	34 40 4c e0 	mov	#57420,	r4	;#0xe04c

0000e09a <.Loc.232.1>:
    e09a:	35 40 4c e0 	mov	#57420,	r5	;#0xe04c

0000e09e <.Loc.233.1>:
    e09e:	26 43       	mov	#2,	r6	;r3 As==10

0000e0a0 <.Loc.234.1>:
    e0a0:	30 40 b4 e0 	br	#0xe0b4		;

0000e0a4 <_msp430_run_fini_array>:
    e0a4:	34 40 4c e0 	mov	#57420,	r4	;#0xe04c

0000e0a8 <.Loc.240.1>:
    e0a8:	35 40 4c e0 	mov	#57420,	r5	;#0xe04c

0000e0ac <.Loc.241.1>:
    e0ac:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e0b0 <.Loc.242.1>:
    e0b0:	30 40 b4 e0 	br	#0xe0b4		;

0000e0b4 <_msp430_run_array>:
    e0b4:	05 94       	cmp	r4,	r5	;

0000e0b6 <.Loc.246.1>:
    e0b6:	05 24       	jz	$+12     	;abs 0xe0c2

0000e0b8 <.Loc.247.1>:
    e0b8:	27 44       	mov	@r4,	r7	;

0000e0ba <.Loc.248.1>:
    e0ba:	04 56       	add	r6,	r4	;

0000e0bc <.Loc.249.1>:
    e0bc:	a7 12       	call	@r7		;

0000e0be <.Loc.250.1>:
    e0be:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe0b4

0000e0c2 <_msp430_run_done>:
    e0c2:	30 41       	ret			

0000e0c4 <L0>:
    e0c4:	30 41       	ret			
    e0c6:	30 41       	ret			

0000e0c8 <deregister_tm_clones>:
    e0c8:	3c 40 12 eb 	mov	#60178,	r12	;#0xeb12
    e0cc:	3c 90 12 eb 	cmp	#60178,	r12	;#0xeb12
    e0d0:	07 24       	jz	$+16     	;abs 0xe0e0
    e0d2:	3d 40 00 00 	mov	#0,	r13	;
    e0d6:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0d8:	03 24       	jz	$+8      	;abs 0xe0e0
    e0da:	3c 40 12 eb 	mov	#60178,	r12	;#0xeb12
    e0de:	8d 12       	call	r13		;

0000e0e0 <.L1>:
    e0e0:	30 41       	ret			

0000e0e2 <register_tm_clones>:
    e0e2:	0a 12       	push	r10		;
    e0e4:	3a 40 12 eb 	mov	#60178,	r10	;#0xeb12
    e0e8:	3a 80 12 eb 	sub	#60178,	r10	;#0xeb12
    e0ec:	0a 11       	rra	r10		;
    e0ee:	0c 4a       	mov	r10,	r12	;
    e0f0:	b0 12 da e9 	call	#59866		;#0xe9da
    e0f4:	0c 5a       	add	r10,	r12	;
    e0f6:	0d 4c       	mov	r12,	r13	;
    e0f8:	0d 11       	rra	r13		;
    e0fa:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0fc:	07 24       	jz	$+16     	;abs 0xe10c
    e0fe:	3e 40 00 00 	mov	#0,	r14	;
    e102:	0e 93       	cmp	#0,	r14	;r3 As==00
    e104:	03 24       	jz	$+8      	;abs 0xe10c
    e106:	3c 40 12 eb 	mov	#60178,	r12	;#0xeb12
    e10a:	8e 12       	call	r14		;

0000e10c <.L9>:
    e10c:	3a 41       	pop	r10		;
    e10e:	30 41       	ret			

0000e110 <__do_global_dtors_aux>:
    e110:	0a 12       	push	r10		;
    e112:	09 12       	push	r9		;
    e114:	c2 93 02 02 	cmp.b	#0,	&0x0202	;r3 As==00
    e118:	17 20       	jnz	$+48     	;abs 0xe148
    e11a:	3a 40 56 e0 	mov	#57430,	r10	;#0xe056
    e11e:	3a 80 54 e0 	sub	#57428,	r10	;#0xe054
    e122:	0a 11       	rra	r10		;
    e124:	3a 53       	add	#-1,	r10	;r3 As==11
    e126:	39 40 54 e0 	mov	#57428,	r9	;#0xe054

0000e12a <.L19>:
    e12a:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    e12e:	0c 9a       	cmp	r10,	r12	;
    e130:	0d 28       	jnc	$+28     	;abs 0xe14c
    e132:	b0 12 c8 e0 	call	#57544		;#0xe0c8
    e136:	3d 40 00 00 	mov	#0,	r13	;
    e13a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e13c:	03 24       	jz	$+8      	;abs 0xe144
    e13e:	3c 40 48 e0 	mov	#57416,	r12	;#0xe048
    e142:	8d 12       	call	r13		;

0000e144 <.L21>:
    e144:	d2 43 02 02 	mov.b	#1,	&0x0202	;r3 As==01

0000e148 <.L17>:
    e148:	30 40 60 e9 	br	#0xe960		;

0000e14c <.L20>:
    e14c:	1c 53       	inc	r12		;
    e14e:	82 4c 04 02 	mov	r12,	&0x0204	;
    e152:	0c 5c       	rla	r12		;
    e154:	0c 59       	add	r9,	r12	;
    e156:	2c 4c       	mov	@r12,	r12	;
    e158:	8c 12       	call	r12		;
    e15a:	30 40 2a e1 	br	#0xe12a		;

0000e15e <call___do_global_dtors_aux>:
    e15e:	3e 40 00 00 	mov	#0,	r14	;
    e162:	0e 93       	cmp	#0,	r14	;r3 As==00
    e164:	05 24       	jz	$+12     	;abs 0xe170
    e166:	3d 40 06 02 	mov	#518,	r13	;#0x0206
    e16a:	3c 40 48 e0 	mov	#57416,	r12	;#0xe048
    e16e:	8e 12       	call	r14		;

0000e170 <.L27>:
    e170:	b0 12 e2 e0 	call	#57570		;#0xe0e2
    e174:	30 41       	ret			

0000e176 <copykey>:
}; 


// #define SMART  __attribute__((__section__(".keyfunction"), noinline))

void copykey (unsigned long *tmp) {
    e176:	0a 12       	push	r10		;

0000e178 <.LCFI0>:
    e178:	09 12       	push	r9		;

0000e17a <.LCFI1>:
    e17a:	08 12       	push	r8		;

0000e17c <.LCFI2>:
    e17c:	21 82       	sub	#4,	r1	;r2 As==10

0000e17e <.LCFI3>:
    unsigned long result[16];
    unsigned long *tt;
    tt = (unsigned long *) t;

    // [is_last, in_ready, size[2], reset]
    SHA_CONFIG = 0b00001;
    e17e:	92 43 00 01 	mov	#1,	&0x0100	;r3 As==01
    e182:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e186 <.Loc.36.1>:
    SHA_CONFIG = 0b00000;
    e186:	82 43 00 01 	mov	#0,	&0x0100	;r3 As==00
    e18a:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e18e <.LVL2>:
    e18e:	3c 40 00 e0 	mov	#57344,	r12	;#0xe000

0000e192 <.LVL3>:
    e192:	09 4c       	mov	r12,	r9	;
    e194:	39 50 2c 00 	add	#44,	r9	;#0x002c

0000e198 <.LBB2>:

    for (int i = 0; i < 11; ++i) {
        SHA_IN = tt[i];
    e198:	3d 40 02 01 	mov	#258,	r13	;#0x0102

0000e19c <.Loc.40.1>:
        SHA_CONFIG = 0b01000;
    e19c:	7a 42       	mov.b	#8,	r10	;r2 As==11
    e19e:	4b 43       	clr.b	r11		;

0000e1a0 <.Loc.41.1>:
        SHA_CONFIG = 0b00000;
    e1a0:	4e 43       	clr.b	r14		;
    e1a2:	4f 43       	clr.b	r15		;

0000e1a4 <.L2>:
    // [is_last, in_ready, size[2], reset]
    SHA_CONFIG = 0b00001;
    SHA_CONFIG = 0b00000;

    for (int i = 0; i < 11; ++i) {
        SHA_IN = tt[i];
    e1a4:	ad 4c 00 00 	mov	@r12,	0(r13)	;
    e1a8:	9d 4c 02 00 	mov	2(r12),	2(r13)	;
    e1ac:	02 00 

0000e1ae <.Loc.40.1>:
        SHA_CONFIG = 0b01000;
    e1ae:	82 4a 00 01 	mov	r10,	&0x0100	;
    e1b2:	82 4b 02 01 	mov	r11,	&0x0102	;

0000e1b6 <.Loc.41.1>:
        SHA_CONFIG = 0b00000;
    e1b6:	82 4e 00 01 	mov	r14,	&0x0100	;
    e1ba:	82 4f 02 01 	mov	r15,	&0x0102	;
    e1be:	2c 52       	add	#4,	r12	;r2 As==10

0000e1c0 <.Loc.38.1>:

    // [is_last, in_ready, size[2], reset]
    SHA_CONFIG = 0b00001;
    SHA_CONFIG = 0b00000;

    for (int i = 0; i < 11; ++i) {
    e1c0:	09 9c       	cmp	r12,	r9	;
    e1c2:	f0 23       	jnz	$-30     	;abs 0xe1a4

0000e1c4 <.LBE2>:
        SHA_IN = tt[i];
        SHA_CONFIG = 0b01000;
        SHA_CONFIG = 0b00000;
    }
    
    SHA_IN = 0;
    e1c4:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00
    e1c8:	82 43 04 01 	mov	#0,	&0x0104	;r3 As==00

0000e1cc <.Loc.45.1>:
    SHA_CONFIG = 0b11000;
    e1cc:	b2 40 18 00 	mov	#24,	&0x0100	;#0x0018
    e1d0:	00 01 
    e1d2:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e1d6 <.Loc.46.1>:
    SHA_CONFIG = 0b00000;
    e1d6:	82 43 00 01 	mov	#0,	&0x0100	;r3 As==00
    e1da:	82 43 02 01 	mov	#0,	&0x0102	;r3 As==00

0000e1de <.Loc.48.1>:

    while (~(SHA_STATUS >> 1) & 0b1) { };
    e1de:	3e 40 01 01 	mov	#257,	r14	;#0x0101

0000e1e2 <.L3>:
    e1e2:	6d 4e       	mov.b	@r14,	r13	;
    e1e4:	5c 42 02 01 	mov.b	&0x0102,r12	;0x0102
    e1e8:	0c 5c       	rla	r12		;
    e1ea:	0c 5c       	rla	r12		;
    e1ec:	0c 5c       	rla	r12		;
    e1ee:	0c 5c       	rla	r12		;
    e1f0:	0c 5c       	rla	r12		;
    e1f2:	0c 5c       	rla	r12		;
    e1f4:	0c 5c       	rla	r12		;
    e1f6:	0c 5c       	rla	r12		;
    e1f8:	0c dd       	bis	r13,	r12	;
    e1fa:	5d 42 03 01 	mov.b	&0x0103,r13	;0x0103
    e1fe:	5d 42 04 01 	mov.b	&0x0104,r13	;0x0104
    e202:	2c b3       	bit	#2,	r12	;r3 As==10
    e204:	ee 27       	jz	$-34     	;abs 0xe1e2
    e206:	3a 40 44 01 	mov	#324,	r10	;#0x0144
    e20a:	38 40 94 e6 	mov	#59028,	r8	;#0xe694

0000e20e <.LBB3>:
    // for (int i = 0; i < 16; ++i) {
    //     result[i] = ((unsigned long *)SHA_OUT)[i];
    // }

    for (int i = 31; i >= 0; --i) {
        cprintf("%w ", ((unsigned int *)&SHA_OUT)[i]);
    e20e:	39 40 2d e0 	mov	#57389,	r9	;#0xe02d

0000e212 <.L5>:
    e212:	a1 4a 02 00 	mov	@r10,	2(r1)	;
    e216:	81 49 00 00 	mov	r9,	0(r1)	;
    e21a:	88 12       	call	r8		;

0000e21c <.LVL5>:
    e21c:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe

0000e220 <.Loc.56.1>:
    // t = SHA_OUT;
    // for (int i = 0; i < 16; ++i) {
    //     result[i] = ((unsigned long *)SHA_OUT)[i];
    // }

    for (int i = 31; i >= 0; --i) {
    e220:	3a 90 04 01 	cmp	#260,	r10	;#0x0104
    e224:	f6 23       	jnz	$-18     	;abs 0xe212

0000e226 <.LBE3>:
        cprintf("%w ", ((unsigned int *)&SHA_OUT)[i]);
    }
}
    e226:	21 52       	add	#4,	r1	;r2 As==10
    e228:	30 40 5e e9 	br	#0xe95e		;

0000e22c <delay>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e22c:	0d 4c       	mov	r12,	r13	;
    e22e:	3d 53       	add	#-1,	r13	;r3 As==11

0000e230 <.LVL7>:
    e230:	0c 93       	cmp	#0,	r12	;r3 As==00
    e232:	05 24       	jz	$+12     	;abs 0xe23e

0000e234 <.L13>:
      __nop();
    e234:	03 43       	nop			

0000e236 <.Loc.68.1>:
      __nop();
    e236:	03 43       	nop			

0000e238 <.Loc.66.1>:

//--------------------------------------------------//
//                   Delay function                 //
//--------------------------------------------------//
void delay(unsigned int d) {
   while(d--) {
    e238:	3d 53       	add	#-1,	r13	;r3 As==11
    e23a:	3d 93       	cmp	#-1,	r13	;r3 As==11
    e23c:	fb 23       	jnz	$-8      	;abs 0xe234

0000e23e <.L11>:
      __nop();
      __nop();
   }
}
    e23e:	30 41       	ret			

0000e240 <tty_putc>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e240:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

0000e244 <.L19>:
    e244:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    e248:	fd 23       	jnz	$-4      	;abs 0xe244

0000e24a <.Loc.82.1>:

  // Write the output character
  UART_TXD = txdata;
    e24a:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e24e <.Loc.85.1>:

  return 0;
}
    e24e:	4c 43       	clr.b	r12		;

0000e250 <.LVL10>:
    e250:	30 41       	ret			

0000e252 <INT_uart_rx>:
//         (receive a byte from the UART)           //
//--------------------------------------------------//
volatile char rxdata;

// wakeup interrupt (8) INT_uart_rx(void) {
interrupt (8) INT_uart_rx(void) {
    e252:	0f 12       	push	r15		;

0000e254 <.LCFI4>:
    e254:	0e 12       	push	r14		;

0000e256 <.LCFI5>:
    e256:	0d 12       	push	r13		;

0000e258 <.LCFI6>:
    e258:	0c 12       	push	r12		;

0000e25a <.LCFI7>:
    e25a:	0b 12       	push	r11		;

0000e25c <.LCFI8>:
    e25c:	0a 12       	push	r10		;

0000e25e <.LCFI9>:
    e25e:	09 12       	push	r9		;

0000e260 <.LCFI10>:
    e260:	08 12       	push	r8		;

0000e262 <.LCFI11>:
    e262:	07 12       	push	r7		;

0000e264 <.LCFI12>:
    e264:	06 12       	push	r6		;

0000e266 <.LCFI13>:
    e266:	05 12       	push	r5		;

0000e268 <.LCFI14>:
    e268:	04 12       	push	r4		;

0000e26a <.LCFI15>:
    e26a:	21 82       	sub	#4,	r1	;r2 As==10

0000e26c <.LCFI16>:
  // Read the received data
  rxdata = UART_RXD;
    e26c:	d2 42 85 00 	mov.b	&0x0085,&0x0214	;0x0085
    e270:	14 02 

0000e272 <.Loc.99.1>:

  // Clear the receive pending flag
  UART_STAT = UART_RX_PND;
    e272:	f2 40 10 00 	mov.b	#16,	&0x0081	;#0x0010
    e276:	81 00 

0000e278 <.Loc.101.1>:

  cprintf("%c", rxdata);
    e278:	5c 42 14 02 	mov.b	&0x0214,r12	;0x0214
    e27c:	81 4c 02 00 	mov	r12,	2(r1)	;
    e280:	b1 40 31 e0 	mov	#57393,	0(r1)	;#0xe031
    e284:	00 00 
    e286:	b0 12 94 e6 	call	#59028		;#0xe694

0000e28a <.LVL11>:
  // // Exit the low power mode
  // LPM0_EXIT;
}
    e28a:	21 52       	add	#4,	r1	;r2 As==10
    e28c:	34 41       	pop	r4		;
    e28e:	35 41       	pop	r5		;
    e290:	36 41       	pop	r6		;
    e292:	37 41       	pop	r7		;
    e294:	38 41       	pop	r8		;
    e296:	39 41       	pop	r9		;
    e298:	3a 41       	pop	r10		;
    e29a:	3b 41       	pop	r11		;
    e29c:	3c 41       	pop	r12		;
    e29e:	3d 41       	pop	r13		;
    e2a0:	3e 41       	pop	r14		;
    e2a2:	3f 41       	pop	r15		;
    e2a4:	00 13       	reti			

0000e2a6 <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e2a6:	0a 12       	push	r10		;

0000e2a8 <.LCFI17>:
    e2a8:	09 12       	push	r9		;

0000e2aa <.LCFI18>:
    e2aa:	31 80 22 00 	sub	#34,	r1	;#0x0022

0000e2ae <.LCFI19>:
    // int led = 0;
     // int *key;
     // key = (void *)0xfee0; 
    unsigned long calc[8];

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e2ae:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    e2b2:	20 01 

0000e2b4 <.Loc.128.1>:

    P3DIR  = 0xff;
    e2b4:	f2 43 1a 00 	mov.b	#-1,	&0x001a	;r3 As==11

0000e2b8 <.Loc.129.1>:
    P3OUT  = 0xff;                      // Light LED during init
    e2b8:	f2 43 19 00 	mov.b	#-1,	&0x0019	;r3 As==11

0000e2bc <.Loc.131.1>:

    UART_BAUD = BAUD;                   // Init UART
    e2bc:	b2 40 ae 00 	mov	#174,	&0x0082	;#0x00ae
    e2c0:	82 00 

0000e2c2 <.Loc.132.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e2c2:	f2 40 11 00 	mov.b	#17,	&0x0080	;#0x0011
    e2c6:	80 00 

0000e2c8 <.Loc.137.1>:


    // delay(65535);

    P3OUT  = 0x00;                      // Switch off LED
    e2c8:	c2 43 19 00 	mov.b	#0,	&0x0019	;r3 As==00

0000e2cc <.Loc.140.1>:

    // cprintf("\r\n====== openMSP430 in action ======\r\n");   //say hello
    copykey(calc);
    e2cc:	0c 41       	mov	r1,	r12	;
    e2ce:	2c 53       	incd	r12		;
    e2d0:	b0 12 76 e1 	call	#57718		;#0xe176

0000e2d4 <.LVL12>:
    e2d4:	39 40 94 e6 	mov	#59028,	r9	;#0xe694

0000e2d8 <.Loc.145.1>:

    // for (int i = 0; i < 8; ++i) {
    //  cprintf("%l ", calc[i]);
    // }
    while (1) cprintf(".");
    e2d8:	3a 40 34 e0 	mov	#57396,	r10	;#0xe034

0000e2dc <.L23>:
    e2dc:	81 4a 00 00 	mov	r10,	0(r1)	;
    e2e0:	89 12       	call	r9		;

0000e2e2 <.LVL13>:
    e2e2:	30 40 dc e2 	br	#0xe2dc		;

0000e2e6 <cput_nibble>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e2e6:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f

0000e2ea <.LVL1>:
    e2ea:	5d 4c 36 e0 	mov.b	-8138(r12),r13	;0xffffe036

0000e2ee <.LBB120>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e2ee:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e2f2 <.L2>:
    e2f2:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e2f6:	fd 23       	jnz	$-4      	;abs 0xe2f2

0000e2f8 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e2f8:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e2fc <.LBE120>:

void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
}
    e2fc:	30 41       	ret			

0000e2fe <cput_hex_byte>:

void
cput_hex_byte (int n)
{
    e2fe:	0a 12       	push	r10		;

0000e300 <.LCFI0>:
    e300:	09 12       	push	r9		;

0000e302 <.LCFI1>:
    e302:	09 4c       	mov	r12,	r9	;

0000e304 <.LBB122>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e304:	3a 40 36 e0 	mov	#57398,	r10	;#0xe036

0000e308 <.LBE122>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e308:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e30c <.LBB127>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e30c:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e310:	0c 5a       	add	r10,	r12	;
    e312:	6d 4c       	mov.b	@r12,	r13	;

0000e314 <.LBB124>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e314:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e318 <.L6>:
    e318:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e31c:	fd 23       	jnz	$-4      	;abs 0xe318

0000e31e <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e31e:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e322 <.LBB128>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e322:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e326 <.LVL9>:
    e326:	0a 59       	add	r9,	r10	;
    e328:	6d 4a       	mov.b	@r10,	r13	;

0000e32a <.LBB130>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e32a:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e32e <.L7>:
    e32e:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e332:	fd 23       	jnz	$-4      	;abs 0xe32e

0000e334 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e334:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e338 <.LBE128>:
void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
  cput_nibble (n);
}
    e338:	30 40 60 e9 	br	#0xe960		;

0000e33c <cput_binary_byte>:

void
cput_binary_byte (int n)
{
    e33c:	0a 12       	push	r10		;

0000e33e <.LCFI2>:
    e33e:	09 12       	push	r9		;

0000e340 <.LCFI3>:
    e340:	08 12       	push	r8		;

0000e342 <.LCFI4>:
    e342:	07 12       	push	r7		;

0000e344 <.LCFI5>:
    e344:	06 12       	push	r6		;

0000e346 <.LCFI6>:
    e346:	05 12       	push	r5		;

0000e348 <.LCFI7>:
    e348:	07 4c       	mov	r12,	r7	;

0000e34a <.LVL13>:
  int i;
  for (i=7; i>=0; i--)
    e34a:	79 40 07 00 	mov.b	#7,	r9	;
    e34e:	75 40 30 00 	mov.b	#48,	r5	;#0x0030

0000e352 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e352:	76 40 31 00 	mov.b	#49,	r6	;#0x0031

0000e356 <.LBB132>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e356:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e35a <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e35a:	78 40 84 00 	mov.b	#132,	r8	;#0x0084

0000e35e <.L13>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e35e:	0c 47       	mov	r7,	r12	;
    e360:	0d 49       	mov	r9,	r13	;
    e362:	b0 12 8a e9 	call	#59786		;#0xe98a
    e366:	1c b3       	bit	#1,	r12	;r3 As==01
    e368:	0b 24       	jz	$+24     	;abs 0xe380
    e36a:	0c 46       	mov	r6,	r12	;

0000e36c <.L12>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e36c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e370:	fd 23       	jnz	$-4      	;abs 0xe36c

0000e372 <.L17>:

  // Write the output character
  UART_TXD = txdata;
    e372:	c8 4c 00 00 	mov.b	r12,	0(r8)	;

0000e376 <.LBE136>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e376:	39 53       	add	#-1,	r9	;r3 As==11
    e378:	39 93       	cmp	#-1,	r9	;r3 As==11
    e37a:	f1 23       	jnz	$-28     	;abs 0xe35e

0000e37c <.Loc.45.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e37c:	30 40 58 e9 	br	#0xe958		;

0000e380 <.L14>:
    e380:	0c 45       	mov	r5,	r12	;

0000e382 <.LBB137>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e382:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e386:	f2 23       	jnz	$-26     	;abs 0xe36c
    e388:	30 40 72 e3 	br	#0xe372		;

0000e38c <cput_hex_word>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}

void
cput_hex_word (int n)
{
    e38c:	0a 12       	push	r10		;

0000e38e <.LCFI8>:
    e38e:	09 12       	push	r9		;

0000e390 <.LCFI9>:
    e390:	08 12       	push	r8		;

0000e392 <.LCFI10>:
    e392:	09 4c       	mov	r12,	r9	;

0000e394 <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e394:	b0 12 74 e9 	call	#59764		;#0xe974

0000e398 <.LVL18>:
    e398:	08 4c       	mov	r12,	r8	;

0000e39a <.LBB138>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e39a:	3a 40 36 e0 	mov	#57398,	r10	;#0xe036
    e39e:	0c 49       	mov	r9,	r12	;
    e3a0:	b0 12 e6 e9 	call	#59878		;#0xe9e6
    e3a4:	0c 5a       	add	r10,	r12	;
    e3a6:	6d 4c       	mov.b	@r12,	r13	;

0000e3a8 <.LBB141>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3a8:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3ac <.L19>:
    e3ac:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3b0:	fd 23       	jnz	$-4      	;abs 0xe3ac

0000e3b2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3b2:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3b6 <.LBB143>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3b6:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e3ba <.LVL23>:
    e3ba:	08 5a       	add	r10,	r8	;
    e3bc:	6d 48       	mov.b	@r8,	r13	;

0000e3be <.LBB145>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3be:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3c2 <.L20>:
    e3c2:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3c6:	fd 23       	jnz	$-4      	;abs 0xe3c2

0000e3c8 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3c8:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3cc <.LBB147>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e3cc:	0c 49       	mov	r9,	r12	;
    e3ce:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e3d2 <.LBB149>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3d2:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e3d6:	0c 5a       	add	r10,	r12	;
    e3d8:	6d 4c       	mov.b	@r12,	r13	;

0000e3da <.LBB151>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3da:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3de <.L21>:
    e3de:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3e2:	fd 23       	jnz	$-4      	;abs 0xe3de

0000e3e4 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3e4:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3e8 <.LBB153>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e3e8:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e3ec <.LVL29>:
    e3ec:	0a 59       	add	r9,	r10	;
    e3ee:	6d 4a       	mov.b	@r10,	r13	;

0000e3f0 <.LBB155>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3f0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e3f4 <.L22>:
    e3f4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e3f8:	fd 23       	jnz	$-4      	;abs 0xe3f4

0000e3fa <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3fa:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e3fe <.LBE147>:
void
cput_hex_word (int n)
{
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e3fe:	30 40 5e e9 	br	#0xe95e		;

0000e402 <cput_hex_long>:

void
cput_hex_long (long int n)
{
    e402:	0a 12       	push	r10		;

0000e404 <.LCFI11>:
    e404:	09 12       	push	r9		;

0000e406 <.LCFI12>:
    e406:	08 12       	push	r8		;

0000e408 <.LCFI13>:
    e408:	07 12       	push	r7		;

0000e40a <.LCFI14>:
    e40a:	09 4c       	mov	r12,	r9	;
    e40c:	08 4d       	mov	r13,	r8	;

0000e40e <.Loc.57.1>:
  cput_hex_byte (n >> 24);
    e40e:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e412:	b0 12 d4 e9 	call	#59860		;#0xe9d4

0000e416 <.LVL33>:
    e416:	07 4c       	mov	r12,	r7	;

0000e418 <.LBB157>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e418:	3a 40 36 e0 	mov	#57398,	r10	;#0xe036

0000e41c <.LBE159>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e41c:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e420 <.LBB164>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e420:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e424:	0c 5a       	add	r10,	r12	;
    e426:	6d 4c       	mov.b	@r12,	r13	;

0000e428 <.LBB161>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e428:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e42c <.L28>:
    e42c:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e430:	fd 23       	jnz	$-4      	;abs 0xe42c

0000e432 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e432:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e436 <.LBB165>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e436:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e43a <.LVL38>:
    e43a:	07 5a       	add	r10,	r7	;
    e43c:	6d 47       	mov.b	@r7,	r13	;

0000e43e <.LBB167>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e43e:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e442 <.L29>:
    e442:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e446:	fd 23       	jnz	$-4      	;abs 0xe442

0000e448 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e448:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e44c <.LBE157>:

void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
    e44c:	0c 49       	mov	r9,	r12	;
    e44e:	0d 48       	mov	r8,	r13	;
    e450:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e454:	b0 12 d4 e9 	call	#59860		;#0xe9d4
    e458:	07 4c       	mov	r12,	r7	;

0000e45a <.LBB169>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e45a:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e45e <.LBB171>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e45e:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e462:	0c 5a       	add	r10,	r12	;
    e464:	6d 4c       	mov.b	@r12,	r13	;

0000e466 <.LBB173>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e466:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e46a <.L30>:
    e46a:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e46e:	fd 23       	jnz	$-4      	;abs 0xe46a

0000e470 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e470:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e474 <.LBB175>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e474:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

0000e478 <.LVL46>:
    e478:	07 5a       	add	r10,	r7	;
    e47a:	6d 47       	mov.b	@r7,	r13	;

0000e47c <.LBB177>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e47c:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e480 <.L31>:
    e480:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e484:	fd 23       	jnz	$-4      	;abs 0xe480

0000e486 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e486:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e48a <.LBE169>:
void
cput_hex_long (long int n)
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
    e48a:	0c 49       	mov	r9,	r12	;
    e48c:	0d 48       	mov	r8,	r13	;
    e48e:	b0 12 ac e9 	call	#59820		;#0xe9ac
    e492:	08 4c       	mov	r12,	r8	;

0000e494 <.LBB179>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e494:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e498 <.LBB181>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e498:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e49c:	0c 5a       	add	r10,	r12	;
    e49e:	6d 4c       	mov.b	@r12,	r13	;

0000e4a0 <.LBB183>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4a0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e4a4 <.L32>:
    e4a4:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e4a8:	fd 23       	jnz	$-4      	;abs 0xe4a4

0000e4aa <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4aa:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e4ae <.LBB185>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e4ae:	78 f0 0f 00 	and.b	#15,	r8	;#0x000f

0000e4b2 <.LVL54>:
    e4b2:	08 5a       	add	r10,	r8	;
    e4b4:	6d 48       	mov.b	@r8,	r13	;

0000e4b6 <.LBB187>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4b6:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e4ba <.L33>:
    e4ba:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e4be:	fd 23       	jnz	$-4      	;abs 0xe4ba

0000e4c0 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4c0:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e4c4 <.LBB189>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e4c4:	0c 49       	mov	r9,	r12	;
    e4c6:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e4ca <.LBB191>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e4ca:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e4ce:	0c 5a       	add	r10,	r12	;
    e4d0:	6d 4c       	mov.b	@r12,	r13	;

0000e4d2 <.LBB193>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4d2:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e4d6 <.L34>:
    e4d6:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e4da:	fd 23       	jnz	$-4      	;abs 0xe4d6

0000e4dc <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4dc:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e4e0 <.LBB195>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e4e0:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e4e4 <.LVL60>:
    e4e4:	0a 59       	add	r9,	r10	;
    e4e6:	6d 4a       	mov.b	@r10,	r13	;

0000e4e8 <.LBB197>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e4e8:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e4ec <.L35>:
    e4ec:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e4f0:	fd 23       	jnz	$-4      	;abs 0xe4ec

0000e4f2 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e4f2:	c2 4d 84 00 	mov.b	r13,	&0x0084	;

0000e4f6 <.LBE189>:
{
  cput_hex_byte (n >> 24);
  cput_hex_byte (n >> 16);
  cput_hex_byte (n >> 8);
  cput_hex_byte (n);
}
    e4f6:	30 40 5c e9 	br	#0xe95c		;

0000e4fa <cput_hex_block>:

void
cput_hex_block (char *block, int n)
{
    e4fa:	0a 12       	push	r10		;

0000e4fc <.LCFI15>:
    e4fc:	09 12       	push	r9		;

0000e4fe <.LCFI16>:
    e4fe:	08 12       	push	r8		;

0000e500 <.LCFI17>:
    e500:	07 12       	push	r7		;

0000e502 <.LCFI18>:
    e502:	06 12       	push	r6		;

0000e504 <.LCFI19>:
    e504:	05 12       	push	r5		;

0000e506 <.LCFI20>:
    e506:	04 12       	push	r4		;

0000e508 <.LCFI21>:
  int i = 0;
  while (n)
    e508:	0d 93       	cmp	#0,	r13	;r3 As==00
    e50a:	39 24       	jz	$+116    	;abs 0xe57e
    e50c:	3d 53       	add	#-1,	r13	;r3 As==11

0000e50e <.LVL65>:
    e50e:	07 4c       	mov	r12,	r7	;
    e510:	07 5d       	add	r13,	r7	;
    e512:	05 4c       	mov	r12,	r5	;
    e514:	38 40 36 e0 	mov	#57398,	r8	;#0xe036

0000e518 <.LBB199>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e518:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e51c <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e51c:	74 40 84 00 	mov.b	#132,	r4	;#0x0084

0000e520 <.LBE199>:
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
      i++;
      if ((i & 7) == 0)
    e520:	16 43       	mov	#1,	r6	;r3 As==01
    e522:	06 8c       	sub	r12,	r6	;

0000e524 <.L51>:
cput_hex_block (char *block, int n)
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
    e524:	69 45       	mov.b	@r5,	r9	;

0000e526 <.LBB214>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e526:	0c 49       	mov	r9,	r12	;
    e528:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e52c <.LBB208>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e52c:	0c 58       	add	r8,	r12	;
    e52e:	6c 4c       	mov.b	@r12,	r12	;

0000e530 <.L46>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e530:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e534:	fd 23       	jnz	$-4      	;abs 0xe530

0000e536 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e536:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e53a <.LBB209>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e53a:	79 f0 0f 00 	and.b	#15,	r9	;#0x000f

0000e53e <.LVL71>:
    e53e:	09 58       	add	r8,	r9	;
    e540:	6c 49       	mov.b	@r9,	r12	;

0000e542 <.L47>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e542:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e546:	fd 23       	jnz	$-4      	;abs 0xe542

0000e548 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e548:	c4 4c 00 00 	mov.b	r12,	0(r4)	;

0000e54c <.LBE209>:
{
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
    e54c:	05 97       	cmp	r7,	r5	;
    e54e:	17 24       	jz	$+48     	;abs 0xe57e

0000e550 <.LVL74>:
	break;
      i++;
      if ((i & 7) == 0)
    e550:	0c 46       	mov	r6,	r12	;
    e552:	0c 55       	add	r5,	r12	;
    e554:	3c b0 07 00 	bit	#7,	r12	;
    e558:	09 20       	jnz	$+20     	;abs 0xe56c

0000e55a <.L49>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e55a:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e55e:	fd 23       	jnz	$-4      	;abs 0xe55a

0000e560 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e560:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e564:	84 00 
    e566:	15 53       	inc	r5		;

0000e568 <.LVL75>:
    e568:	30 40 24 e5 	br	#0xe524		;

0000e56c <.L48>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e56c:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e570:	fd 23       	jnz	$-4      	;abs 0xe56c

0000e572 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e572:	f2 40 3a 00 	mov.b	#58,	&0x0084	;#0x003a
    e576:	84 00 
    e578:	15 53       	inc	r5		;

0000e57a <.LVL77>:
    e57a:	30 40 24 e5 	br	#0xe524		;

0000e57e <.L44>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e57e:	30 40 56 e9 	br	#0xe956		;

0000e582 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n)
{
    e582:	0a 12       	push	r10		;

0000e584 <.LCFI22>:
    e584:	09 12       	push	r9		;

0000e586 <.LCFI23>:
  int i = 0;
  while (n)
    e586:	0d 93       	cmp	#0,	r13	;r3 As==00
    e588:	20 24       	jz	$+66     	;abs 0xe5ca
    e58a:	3d 53       	add	#-1,	r13	;r3 As==11

0000e58c <.LVL81>:
}

void
cput_nibble_block (char *block, int n)
{
  int i = 0;
    e58c:	4b 43       	clr.b	r11		;
    e58e:	39 40 36 e0 	mov	#57398,	r9	;#0xe036

0000e592 <.LBB219>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e592:	7e 40 81 00 	mov.b	#129,	r14	;#0x0081

0000e596 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e596:	7a 40 84 00 	mov.b	#132,	r10	;#0x0084

0000e59a <.L65>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e59a:	6f 4c       	mov.b	@r12,	r15	;

0000e59c <.LVL83>:
    e59c:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f

0000e5a0 <.LVL84>:
    e5a0:	0f 59       	add	r9,	r15	;
    e5a2:	6f 4f       	mov.b	@r15,	r15	;

0000e5a4 <.L62>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e5a4:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e5a8:	fd 23       	jnz	$-4      	;abs 0xe5a4

0000e5aa <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e5aa:	ca 4f 00 00 	mov.b	r15,	0(r10)	;

0000e5ae <.LBE219>:
{
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
    e5ae:	0b 9d       	cmp	r13,	r11	;
    e5b0:	0c 24       	jz	$+26     	;abs 0xe5ca

0000e5b2 <.Loc.89.1>:
	break;
      i++;
    e5b2:	1b 53       	inc	r11		;

0000e5b4 <.LVL87>:
      if ((i & 7) == 0)
    e5b4:	3b b0 07 00 	bit	#7,	r11	;
    e5b8:	f0 23       	jnz	$-30     	;abs 0xe59a

0000e5ba <.L64>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e5ba:	fe b2 00 00 	bit.b	#8,	0(r14)	;r2 As==11
    e5be:	fd 23       	jnz	$-4      	;abs 0xe5ba

0000e5c0 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e5c0:	f2 40 20 00 	mov.b	#32,	&0x0084	;#0x0020
    e5c4:	84 00 
    e5c6:	30 40 9a e5 	br	#0xe59a		;

0000e5ca <.L60>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e5ca:	30 40 60 e9 	br	#0xe960		;

0000e5ce <cput_number>:

void
cput_number (int n)
{
    e5ce:	0a 12       	push	r10		;

0000e5d0 <.LCFI24>:
    e5d0:	09 12       	push	r9		;

0000e5d2 <.LCFI25>:
    e5d2:	08 12       	push	r8		;

0000e5d4 <.LCFI26>:
    e5d4:	07 12       	push	r7		;

0000e5d6 <.LCFI27>:
    e5d6:	06 12       	push	r6		;

0000e5d8 <.LCFI28>:
    e5d8:	05 12       	push	r5		;

0000e5da <.LCFI29>:
    e5da:	04 12       	push	r4		;

0000e5dc <.LCFI30>:
    e5dc:	31 80 16 00 	sub	#22,	r1	;#0x0016

0000e5e0 <.LCFI31>:
    e5e0:	0a 4c       	mov	r12,	r10	;

0000e5e2 <.LVL90>:
  char buf[20];
  int i = 0;
  if (n < 0)
    e5e2:	0c 93       	cmp	#0,	r12	;r3 As==00
    e5e4:	40 38       	jl	$+130    	;abs 0xe666

0000e5e6 <.Loc.105.1>:
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e5e6:	7c 40 09 00 	mov.b	#9,	r12	;

0000e5ea <.LVL91>:
    e5ea:	0c 9a       	cmp	r10,	r12	;
    e5ec:	4b 34       	jge	$+152    	;abs 0xe684

0000e5ee <.L84>:
    e5ee:	0c 41       	mov	r1,	r12	;
    e5f0:	2c 53       	incd	r12		;
    e5f2:	81 4c 00 00 	mov	r12,	0(r1)	;
    e5f6:	09 4c       	mov	r12,	r9	;
    e5f8:	5c 43       	mov.b	#1,	r12	;r3 As==01
    e5fa:	0c 89       	sub	r9,	r12	;
    e5fc:	04 4c       	mov	r12,	r4	;
    e5fe:	35 40 14 e9 	mov	#59668,	r5	;#0xe914
    e602:	36 40 c8 e8 	mov	#59592,	r6	;#0xe8c8

0000e606 <.Loc.107.1>:
    {
      buf[i++] = (n%10) + '0';
    e606:	78 40 0a 00 	mov.b	#10,	r8	;#0x000a

0000e60a <.L75>:
    e60a:	07 44       	mov	r4,	r7	;
    e60c:	07 59       	add	r9,	r7	;

0000e60e <.LVL93>:
    e60e:	0d 48       	mov	r8,	r13	;
    e610:	0c 4a       	mov	r10,	r12	;
    e612:	85 12       	call	r5		;
    e614:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    e618:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

0000e61c <.Loc.108.1>:
      n /= 10;
    e61c:	0d 48       	mov	r8,	r13	;
    e61e:	0c 4a       	mov	r10,	r12	;
    e620:	86 12       	call	r6		;
    e622:	0a 4c       	mov	r12,	r10	;
    e624:	19 53       	inc	r9		;

0000e626 <.Loc.105.1>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e626:	7c 40 09 00 	mov.b	#9,	r12	;
    e62a:	0c 9a       	cmp	r10,	r12	;
    e62c:	ee 3b       	jl	$-34     	;abs 0xe60a
    e62e:	0d 47       	mov	r7,	r13	;
    e630:	1d 53       	inc	r13		;

0000e632 <.L74>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e632:	27 51       	add	@r1,	r7	;

0000e634 <.LVL98>:
    e634:	7a 50 30 00 	add.b	#48,	r10	;#0x0030

0000e638 <.LVL99>:
    e638:	c7 4a 00 00 	mov.b	r10,	0(r7)	;
    e63c:	3d 53       	add	#-1,	r13	;r3 As==11
    e63e:	2d 51       	add	@r1,	r13	;
    e640:	0a 41       	mov	r1,	r10	;
    e642:	1a 53       	inc	r10		;

0000e644 <.LBB227>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e644:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e648 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e648:	7f 40 84 00 	mov.b	#132,	r15	;#0x0084

0000e64c <.L77>:
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    tty_putc (buf[--i]);
    e64c:	6e 4d       	mov.b	@r13,	r14	;

0000e64e <.L76>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e64e:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e652:	fd 23       	jnz	$-4      	;abs 0xe64e

0000e654 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e654:	cf 4e 00 00 	mov.b	r14,	0(r15)	;
    e658:	3d 53       	add	#-1,	r13	;r3 As==11

0000e65a <.LBE230>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e65a:	0a 9d       	cmp	r13,	r10	;
    e65c:	f7 23       	jnz	$-16     	;abs 0xe64c

0000e65e <.Loc.113.1>:
    tty_putc (buf[--i]);
}
    e65e:	31 50 16 00 	add	#22,	r1	;#0x0016
    e662:	30 40 56 e9 	br	#0xe956		;

0000e666 <.L83>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e666:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

0000e66a <.L73>:
    e66a:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    e66e:	fd 23       	jnz	$-4      	;abs 0xe66a

0000e670 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e670:	f2 40 2d 00 	mov.b	#45,	&0x0084	;#0x002d
    e674:	84 00 

0000e676 <.LBE231>:
  char buf[20];
  int i = 0;
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    e676:	4c 43       	clr.b	r12		;
    e678:	0c 8a       	sub	r10,	r12	;
    e67a:	0a 4c       	mov	r12,	r10	;

0000e67c <.Loc.105.1>:
    }
  while (n > 9)
    e67c:	7c 40 09 00 	mov.b	#9,	r12	;
    e680:	0c 9a       	cmp	r10,	r12	;
    e682:	b5 3b       	jl	$-148    	;abs 0xe5ee

0000e684 <.L78>:
    e684:	5d 43       	mov.b	#1,	r13	;r3 As==01
    e686:	47 43       	clr.b	r7		;
    e688:	0c 41       	mov	r1,	r12	;
    e68a:	2c 53       	incd	r12		;
    e68c:	81 4c 00 00 	mov	r12,	0(r1)	;
    e690:	30 40 32 e6 	br	#0xe632		;

0000e694 <cprintf>:
    tty_putc (buf[--i]);
}

void
cprintf (const char *fmt, ...)
{
    e694:	0a 12       	push	r10		;

0000e696 <.LCFI32>:
    e696:	09 12       	push	r9		;

0000e698 <.LCFI33>:
    e698:	08 12       	push	r8		;

0000e69a <.LCFI34>:
    e69a:	07 12       	push	r7		;

0000e69c <.LCFI35>:
    e69c:	06 12       	push	r6		;

0000e69e <.LCFI36>:
    e69e:	05 12       	push	r5		;

0000e6a0 <.LCFI37>:
    e6a0:	04 12       	push	r4		;

0000e6a2 <.LCFI38>:
    e6a2:	19 41 10 00 	mov	16(r1),	r9	;0x00010

0000e6a6 <.Loc.122.1>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e6a6:	08 41       	mov	r1,	r8	;
    e6a8:	38 50 12 00 	add	#18,	r8	;#0x0012

0000e6ac <.LVL106>:

  while (*fmt)
    e6ac:	6c 49       	mov.b	@r9,	r12	;
    e6ae:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6b0:	2c 24       	jz	$+90     	;abs 0xe70a

0000e6b2 <.LBB233>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e6b2:	7a 40 81 00 	mov.b	#129,	r10	;#0x0081

0000e6b6 <.L110>:
    e6b6:	04 49       	mov	r9,	r4	;
    e6b8:	14 53       	inc	r4		;

0000e6ba <.LBE233>:

  va_start (v, fmt);

  while (*fmt)
    {
      if (*fmt != '%')
    e6ba:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e6be:	29 20       	jnz	$+84     	;abs 0xe712

0000e6c0 <.LVL108>:
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e6c0:	5d 49 01 00 	mov.b	1(r9),	r13	;
    e6c4:	29 53       	incd	r9		;
    e6c6:	7d 90 64 00 	cmp.b	#100,	r13	;#0x0064
    e6ca:	d4 24       	jz	$+426    	;abs 0xe874
    e6cc:	7e 40 64 00 	mov.b	#100,	r14	;#0x0064
    e6d0:	4e 9d       	cmp.b	r13,	r14	;
    e6d2:	2f 2c       	jc	$+96     	;abs 0xe732
    e6d4:	7d 90 73 00 	cmp.b	#115,	r13	;#0x0073
    e6d8:	c2 24       	jz	$+390    	;abs 0xe85e
    e6da:	7e 40 73 00 	mov.b	#115,	r14	;#0x0073
    e6de:	4e 9d       	cmp.b	r13,	r14	;
    e6e0:	42 28       	jnc	$+134    	;abs 0xe766
    e6e2:	7d 90 6c 00 	cmp.b	#108,	r13	;#0x006c
    e6e6:	51 24       	jz	$+164    	;abs 0xe78a
    e6e8:	7d 90 6e 00 	cmp.b	#110,	r13	;#0x006e
    e6ec:	1a 20       	jnz	$+54     	;abs 0xe722

0000e6ee <.Loc.164.1>:
	    s = va_arg (v, char *);
	    i = va_arg (v, int);
	    cput_hex_block (s, i);
	    break;
	  case 'n':
	    s = va_arg (v, char *);
    e6ee:	2c 48       	mov	@r8,	r12	;

0000e6f0 <.Loc.165.1>:
	    i = va_arg (v, int);
    e6f0:	38 50 03 00 	add	#3,	r8	;

0000e6f4 <.LVL109>:
    e6f4:	0d 48       	mov	r8,	r13	;
    e6f6:	1d c3       	bic	#1,	r13	;r3 As==01
    e6f8:	08 4d       	mov	r13,	r8	;

0000e6fa <.LVL110>:
    e6fa:	28 53       	incd	r8		;

0000e6fc <.LVL111>:
	    cput_nibble_block (s, i);
    e6fc:	2d 4d       	mov	@r13,	r13	;
    e6fe:	b0 12 82 e5 	call	#58754		;#0xe582

0000e702 <.LVL112>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e702:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e706:	0c 93       	cmp	#0,	r12	;r3 As==00
    e708:	d6 23       	jnz	$-82     	;abs 0xe6b6

0000e70a <.L85>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e70a:	30 40 56 e9 	br	#0xe956		;
    e70e:	30 40 88 e8 	br	#0xe888		;

0000e712 <.L88>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e712:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e716:	fd 23       	jnz	$-4      	;abs 0xe712

0000e718 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e718:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e71c:	0c 44       	mov	r4,	r12	;
    e71e:	04 49       	mov	r9,	r4	;
    e720:	09 4c       	mov	r12,	r9	;

0000e722 <.L89>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e722:	5c 44 01 00 	mov.b	1(r4),	r12	;
    e726:	0c 93       	cmp	#0,	r12	;r3 As==00
    e728:	c6 23       	jnz	$-114    	;abs 0xe6b6

0000e72a <.Loc.175.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e72a:	30 40 56 e9 	br	#0xe956		;
    e72e:	30 40 88 e8 	br	#0xe888		;

0000e732 <.L130>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e732:	7d 90 42 00 	cmp.b	#66,	r13	;#0x0042
    e736:	6c 24       	jz	$+218    	;abs 0xe810
    e738:	7e 40 42 00 	mov.b	#66,	r14	;#0x0042
    e73c:	4e 9d       	cmp.b	r13,	r14	;
    e73e:	5d 2c       	jc	$+188    	;abs 0xe7fa
    e740:	7d 90 62 00 	cmp.b	#98,	r13	;#0x0062
    e744:	3a 24       	jz	$+118    	;abs 0xe7ba
    e746:	7d 90 63 00 	cmp.b	#99,	r13	;#0x0063
    e74a:	eb 23       	jnz	$-40     	;abs 0xe722

0000e74c <.Loc.135.1>:
	  {
	  case '%':
	    tty_putc ('%');
	    break;
	  case 'c':
	    i = va_arg (v, int);
    e74c:	18 53       	inc	r8		;

0000e74e <.LVL117>:
    e74e:	0c 48       	mov	r8,	r12	;
    e750:	1c c3       	bic	#1,	r12	;r3 As==01
    e752:	08 4c       	mov	r12,	r8	;

0000e754 <.LVL118>:
    e754:	28 53       	incd	r8		;

0000e756 <.LVL119>:
    e756:	2c 4c       	mov	@r12,	r12	;

0000e758 <.L103>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e758:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e75c:	fd 23       	jnz	$-4      	;abs 0xe758

0000e75e <.L126>:

  // Write the output character
  UART_TXD = txdata;
    e75e:	c2 4c 84 00 	mov.b	r12,	&0x0084	;
    e762:	30 40 22 e7 	br	#0xe722		;

0000e766 <.L98>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e766:	7d 90 77 00 	cmp.b	#119,	r13	;#0x0077
    e76a:	1d 24       	jz	$+60     	;abs 0xe7a6
    e76c:	7d 90 78 00 	cmp.b	#120,	r13	;#0x0078
    e770:	d8 23       	jnz	$-78     	;abs 0xe722

0000e772 <.Loc.159.1>:
	  case 'l':
	    i = va_arg (v, int);
	    cput_hex_long (i);
	    break;
	  case 'x':
	    s = va_arg (v, char *);
    e772:	2c 48       	mov	@r8,	r12	;

0000e774 <.Loc.160.1>:
	    i = va_arg (v, int);
    e774:	38 50 03 00 	add	#3,	r8	;

0000e778 <.LVL122>:
    e778:	0d 48       	mov	r8,	r13	;
    e77a:	1d c3       	bic	#1,	r13	;r3 As==01
    e77c:	08 4d       	mov	r13,	r8	;

0000e77e <.LVL123>:
    e77e:	28 53       	incd	r8		;

0000e780 <.LVL124>:
	    cput_hex_block (s, i);
    e780:	2d 4d       	mov	@r13,	r13	;
    e782:	b0 12 fa e4 	call	#58618		;#0xe4fa

0000e786 <.LVL125>:
	    break;
    e786:	30 40 22 e7 	br	#0xe722		;

0000e78a <.L99>:
	  case 'w':
	    i = va_arg (v, int);
	    cput_hex_word (i);
	    break;
	  case 'l':
	    i = va_arg (v, int);
    e78a:	18 53       	inc	r8		;

0000e78c <.LVL126>:
    e78c:	0c 48       	mov	r8,	r12	;
    e78e:	1c c3       	bic	#1,	r12	;r3 As==01
    e790:	08 4c       	mov	r12,	r8	;

0000e792 <.LVL127>:
    e792:	28 53       	incd	r8		;

0000e794 <.LVL128>:
	    cput_hex_long (i);
    e794:	2c 4c       	mov	@r12,	r12	;
    e796:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e79a:	0d 7d       	subc	r13,	r13	;
    e79c:	3d e3       	inv	r13		;
    e79e:	b0 12 02 e4 	call	#58370		;#0xe402

0000e7a2 <.LVL129>:
	    break;
    e7a2:	30 40 22 e7 	br	#0xe722		;

0000e7a6 <.L101>:
	  case 'B':
	    i = va_arg (v, int);
	    cput_binary_byte (i);
	    break;
	  case 'w':
	    i = va_arg (v, int);
    e7a6:	18 53       	inc	r8		;

0000e7a8 <.LVL130>:
    e7a8:	0c 48       	mov	r8,	r12	;
    e7aa:	1c c3       	bic	#1,	r12	;r3 As==01
    e7ac:	08 4c       	mov	r12,	r8	;

0000e7ae <.LVL131>:
    e7ae:	28 53       	incd	r8		;

0000e7b0 <.LVL132>:
	    cput_hex_word (i);
    e7b0:	2c 4c       	mov	@r12,	r12	;
    e7b2:	b0 12 8c e3 	call	#58252		;#0xe38c

0000e7b6 <.LVL133>:
	    break;
    e7b6:	30 40 22 e7 	br	#0xe722		;

0000e7ba <.L95>:
	  case 'd':
	    i = va_arg (v, int);
	    cput_number(i);
	    break;
	  case 'b':
	    i = va_arg (v, int);
    e7ba:	18 53       	inc	r8		;

0000e7bc <.LVL134>:
    e7bc:	0c 48       	mov	r8,	r12	;
    e7be:	1c c3       	bic	#1,	r12	;r3 As==01
    e7c0:	08 4c       	mov	r12,	r8	;

0000e7c2 <.LVL135>:
    e7c2:	28 53       	incd	r8		;

0000e7c4 <.LVL136>:
    e7c4:	26 4c       	mov	@r12,	r6	;

0000e7c6 <.LBB242>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e7c6:	37 40 36 e0 	mov	#57398,	r7	;#0xe036

0000e7ca <.LBE244>:
}

void
cput_hex_byte (int n)
{
  cput_nibble (n >> 4);
    e7ca:	0c 46       	mov	r6,	r12	;
    e7cc:	b0 12 7c e9 	call	#59772		;#0xe97c

0000e7d0 <.LBB249>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e7d0:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e7d4:	0c 57       	add	r7,	r12	;
    e7d6:	6c 4c       	mov.b	@r12,	r12	;

0000e7d8 <.L104>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e7d8:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7dc:	fd 23       	jnz	$-4      	;abs 0xe7d8

0000e7de <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e7de:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

0000e7e2 <.LBB250>:


void
cput_nibble (int n)
{
  tty_putc (hex[n&0x0f]);
    e7e2:	76 f0 0f 00 	and.b	#15,	r6	;#0x000f
    e7e6:	07 56       	add	r6,	r7	;
    e7e8:	6c 47       	mov.b	@r7,	r12	;

0000e7ea <.L105>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e7ea:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7ee:	b7 27       	jz	$-144    	;abs 0xe75e
    e7f0:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e7f4:	fa 23       	jnz	$-10     	;abs 0xe7ea
    e7f6:	30 40 5e e7 	br	#0xe75e		;

0000e7fa <.L132>:
  while (*fmt)
    {
      if (*fmt != '%')
	tty_putc (*fmt);
      else
	switch (*++fmt)
    e7fa:	7d 90 25 00 	cmp.b	#37,	r13	;#0x0025
    e7fe:	91 23       	jnz	$-220    	;abs 0xe722

0000e800 <.L94>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e800:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e804:	fd 23       	jnz	$-4      	;abs 0xe800

0000e806 <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e806:	f2 40 25 00 	mov.b	#37,	&0x0084	;#0x0025
    e80a:	84 00 
    e80c:	30 40 22 e7 	br	#0xe722		;

0000e810 <.L92>:
	  case 'b':
	    i = va_arg (v, int);
	    cput_hex_byte (i);
	    break;
	  case 'B':
	    i = va_arg (v, int);
    e810:	18 53       	inc	r8		;

0000e812 <.LVL143>:
    e812:	0c 48       	mov	r8,	r12	;
    e814:	1c c3       	bic	#1,	r12	;r3 As==01
    e816:	08 4c       	mov	r12,	r8	;

0000e818 <.LVL144>:
    e818:	28 53       	incd	r8		;

0000e81a <.LVL145>:
    e81a:	26 4c       	mov	@r12,	r6	;

0000e81c <.LBB256>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e81c:	75 40 07 00 	mov.b	#7,	r5	;

0000e820 <.LBB258>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);

  // Write the output character
  UART_TXD = txdata;
    e820:	77 40 84 00 	mov.b	#132,	r7	;#0x0084

0000e824 <.LBE258>:
void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    tty_putc((n & (1<<i)) ? '1' : '0');
    e824:	0c 46       	mov	r6,	r12	;
    e826:	0d 45       	mov	r5,	r13	;
    e828:	b0 12 8a e9 	call	#59786		;#0xe98a
    e82c:	1c b3       	bit	#1,	r12	;r3 As==01
    e82e:	10 24       	jz	$+34     	;abs 0xe850

0000e830 <.L133>:
    e830:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031

0000e834 <.L107>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e834:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e838:	fd 23       	jnz	$-4      	;abs 0xe834

0000e83a <.L134>:

  // Write the output character
  UART_TXD = txdata;
    e83a:	c7 4c 00 00 	mov.b	r12,	0(r7)	;

0000e83e <.LBE262>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e83e:	35 53       	add	#-1,	r5	;r3 As==11
    e840:	35 93       	cmp	#-1,	r5	;r3 As==11
    e842:	6f 27       	jz	$-288    	;abs 0xe722

0000e844 <.Loc.44.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e844:	0c 46       	mov	r6,	r12	;
    e846:	0d 45       	mov	r5,	r13	;
    e848:	b0 12 8a e9 	call	#59786		;#0xe98a
    e84c:	1c b3       	bit	#1,	r12	;r3 As==01
    e84e:	f0 23       	jnz	$-30     	;abs 0xe830

0000e850 <.L111>:
    e850:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e854 <.LBB263>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e854:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e858:	ed 23       	jnz	$-36     	;abs 0xe834
    e85a:	30 40 3a e8 	br	#0xe83a		;

0000e85e <.L97>:
	    i = va_arg (v, int);
	    cput_nibble_block (s, i);
	    break;
	  case 's':
	    s = va_arg (v, char *);
	    tty_putc (s[0]);
    e85e:	2c 48       	mov	@r8,	r12	;
    e860:	28 53       	incd	r8		;

0000e862 <.LVL152>:
    e862:	6c 4c       	mov.b	@r12,	r12	;

0000e864 <.L109>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e864:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e868:	7a 27       	jz	$-266    	;abs 0xe75e
    e86a:	fa b2 00 00 	bit.b	#8,	0(r10)	;r2 As==11
    e86e:	fa 23       	jnz	$-10     	;abs 0xe864
    e870:	30 40 5e e7 	br	#0xe75e		;

0000e874 <.L90>:
	  case 'c':
	    i = va_arg (v, int);
	    tty_putc(i);
	    break;
	  case 'd':
	    i = va_arg (v, int);
    e874:	18 53       	inc	r8		;

0000e876 <.LVL155>:
    e876:	0c 48       	mov	r8,	r12	;
    e878:	1c c3       	bic	#1,	r12	;r3 As==01
    e87a:	08 4c       	mov	r12,	r8	;

0000e87c <.LVL156>:
    e87c:	28 53       	incd	r8		;

0000e87e <.LVL157>:
	    cput_number(i);
    e87e:	2c 4c       	mov	@r12,	r12	;
    e880:	b0 12 ce e5 	call	#58830		;#0xe5ce

0000e884 <.LVL158>:
	    break;
    e884:	30 40 22 e7 	br	#0xe722		;

0000e888 <udivmodhi4>:
    e888:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e88c <.Loc.35.1>:
    e88c:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e88e <.L2>:
    e88e:	0d 9c       	cmp	r12,	r13	;
    e890:	08 28       	jnc	$+18     	;abs 0xe8a2

0000e892 <.L15>:
    e892:	4f 43       	clr.b	r15		;

0000e894 <.L4>:
    e894:	0b 93       	cmp	#0,	r11	;r3 As==00
    e896:	0e 20       	jnz	$+30     	;abs 0xe8b4

0000e898 <.L5>:
    e898:	0e 93       	cmp	#0,	r14	;r3 As==00
    e89a:	01 24       	jz	$+4      	;abs 0xe89e
    e89c:	0f 4c       	mov	r12,	r15	;

0000e89e <.L1>:
    e89e:	0c 4f       	mov	r15,	r12	;
    e8a0:	30 41       	ret			

0000e8a2 <.L3>:
    e8a2:	3f 53       	add	#-1,	r15	;r3 As==11

0000e8a4 <.Loc.38.1>:
    e8a4:	0f 93       	cmp	#0,	r15	;r3 As==00
    e8a6:	f8 27       	jz	$-14     	;abs 0xe898

0000e8a8 <.Loc.38.1>:
    e8a8:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8aa:	f3 3b       	jl	$-24     	;abs 0xe892

0000e8ac <.Loc.40.1>:
    e8ac:	0d 5d       	rla	r13		;

0000e8ae <.Loc.41.1>:
    e8ae:	0b 5b       	rla	r11		;
    e8b0:	30 40 8e e8 	br	#0xe88e		;

0000e8b4 <.L9>:
    e8b4:	0c 9d       	cmp	r13,	r12	;
    e8b6:	02 28       	jnc	$+6      	;abs 0xe8bc

0000e8b8 <.Loc.47.1>:
    e8b8:	0c 8d       	sub	r13,	r12	;

0000e8ba <.Loc.48.1>:
    e8ba:	0f db       	bis	r11,	r15	;

0000e8bc <.L8>:
    e8bc:	12 c3       	clrc			
    e8be:	0b 10       	rrc	r11		;

0000e8c0 <.Loc.51.1>:
    e8c0:	12 c3       	clrc			
    e8c2:	0d 10       	rrc	r13		;
    e8c4:	30 40 94 e8 	br	#0xe894		;

0000e8c8 <__mspabi_divi>:
    e8c8:	0a 12       	push	r10		;

0000e8ca <.LCFI0>:
    e8ca:	0f 4c       	mov	r12,	r15	;
    e8cc:	0e 4d       	mov	r13,	r14	;

0000e8ce <.LVL14>:
    e8ce:	3b 40 88 e8 	mov	#59528,	r11	;#0xe888

0000e8d2 <.Loc.64.1>:
    e8d2:	0c 93       	cmp	#0,	r12	;r3 As==00
    e8d4:	1a 34       	jge	$+54     	;abs 0xe90a

0000e8d6 <.Loc.66.1>:
    e8d6:	4c 43       	clr.b	r12		;

0000e8d8 <.LVL15>:
    e8d8:	0c 8f       	sub	r15,	r12	;
    e8da:	0f 4c       	mov	r12,	r15	;

0000e8dc <.LVL16>:
    e8dc:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8de:	0d 34       	jge	$+28     	;abs 0xe8fa

0000e8e0 <.Loc.67.1>:
    e8e0:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e8e2 <.L21>:
    e8e2:	0d 43       	clr	r13		;
    e8e4:	0d 8e       	sub	r14,	r13	;

0000e8e6 <.LVL18>:
    e8e6:	4e 43       	clr.b	r14		;

0000e8e8 <.LVL19>:
    e8e8:	0c 4f       	mov	r15,	r12	;

0000e8ea <.LVL20>:
    e8ea:	8b 12       	call	r11		;

0000e8ec <.LVL21>:
    e8ec:	1a 93       	cmp	#1,	r10	;r3 As==01
    e8ee:	03 24       	jz	$+8      	;abs 0xe8f6

0000e8f0 <.L20>:
    e8f0:	4d 43       	clr.b	r13		;
    e8f2:	0d 8c       	sub	r12,	r13	;
    e8f4:	0c 4d       	mov	r13,	r12	;

0000e8f6 <.L16>:
    e8f6:	3a 41       	pop	r10		;
    e8f8:	30 41       	ret			

0000e8fa <.L18>:
    e8fa:	4e 43       	clr.b	r14		;
    e8fc:	8b 12       	call	r11		;

0000e8fe <.LVL25>:
    e8fe:	30 40 f0 e8 	br	#0xe8f0		;

0000e902 <.L27>:
    e902:	4e 43       	clr.b	r14		;
    e904:	8b 12       	call	r11		;

0000e906 <.LVL27>:
    e906:	30 40 f6 e8 	br	#0xe8f6		;

0000e90a <.L17>:
    e90a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e90c:	fa 37       	jge	$-10     	;abs 0xe902

0000e90e <.Loc.61.1>:
    e90e:	4a 43       	clr.b	r10		;
    e910:	30 40 e2 e8 	br	#0xe8e2		;

0000e914 <__mspabi_remi>:
    e914:	0a 12       	push	r10		;

0000e916 <.LCFI1>:
    e916:	0c 93       	cmp	#0,	r12	;r3 As==00
    e918:	13 34       	jge	$+40     	;abs 0xe940

0000e91a <.Loc.92.1>:
    e91a:	4e 43       	clr.b	r14		;
    e91c:	0e 8c       	sub	r12,	r14	;
    e91e:	0c 4e       	mov	r14,	r12	;

0000e920 <.LVL31>:
    e920:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e922 <.L29>:
    e922:	0d 93       	cmp	#0,	r13	;r3 As==00
    e924:	03 34       	jge	$+8      	;abs 0xe92c
    e926:	4e 43       	clr.b	r14		;
    e928:	0e 8d       	sub	r13,	r14	;
    e92a:	0d 4e       	mov	r14,	r13	;

0000e92c <.L30>:
    e92c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e92e:	b0 12 88 e8 	call	#59528		;#0xe888

0000e932 <.LVL34>:
    e932:	0a 93       	cmp	#0,	r10	;r3 As==00
    e934:	03 24       	jz	$+8      	;abs 0xe93c

0000e936 <.LVL35>:
    e936:	4d 43       	clr.b	r13		;
    e938:	0d 8c       	sub	r12,	r13	;
    e93a:	0c 4d       	mov	r13,	r12	;

0000e93c <.L28>:
    e93c:	3a 41       	pop	r10		;
    e93e:	30 41       	ret			

0000e940 <.L32>:
    e940:	4a 43       	clr.b	r10		;
    e942:	30 40 22 e9 	br	#0xe922		;

0000e946 <__mspabi_divu>:
    e946:	4e 43       	clr.b	r14		;
    e948:	b0 12 88 e8 	call	#59528		;#0xe888

0000e94c <.LVL39>:
    e94c:	30 41       	ret			

0000e94e <__mspabi_remu>:
    e94e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e950:	b0 12 88 e8 	call	#59528		;#0xe888

0000e954 <.LVL41>:
    e954:	30 41       	ret			

0000e956 <__mspabi_func_epilog_7>:
    e956:	34 41       	pop	r4		;

0000e958 <__mspabi_func_epilog_6>:
    e958:	35 41       	pop	r5		;

0000e95a <__mspabi_func_epilog_5>:
    e95a:	36 41       	pop	r6		;

0000e95c <__mspabi_func_epilog_4>:
    e95c:	37 41       	pop	r7		;

0000e95e <__mspabi_func_epilog_3>:
    e95e:	38 41       	pop	r8		;

0000e960 <__mspabi_func_epilog_2>:
    e960:	39 41       	pop	r9		;

0000e962 <__mspabi_func_epilog_1>:
    e962:	3a 41       	pop	r10		;
    e964:	30 41       	ret			

0000e966 <__mspabi_srai_15>:
    e966:	0c 11       	rra	r12		;

0000e968 <__mspabi_srai_14>:
    e968:	0c 11       	rra	r12		;

0000e96a <__mspabi_srai_13>:
    e96a:	0c 11       	rra	r12		;

0000e96c <__mspabi_srai_12>:
    e96c:	0c 11       	rra	r12		;

0000e96e <__mspabi_srai_11>:
    e96e:	0c 11       	rra	r12		;

0000e970 <__mspabi_srai_10>:
    e970:	0c 11       	rra	r12		;

0000e972 <__mspabi_srai_9>:
    e972:	0c 11       	rra	r12		;

0000e974 <__mspabi_srai_8>:
    e974:	0c 11       	rra	r12		;

0000e976 <__mspabi_srai_7>:
    e976:	0c 11       	rra	r12		;

0000e978 <__mspabi_srai_6>:
    e978:	0c 11       	rra	r12		;

0000e97a <__mspabi_srai_5>:
    e97a:	0c 11       	rra	r12		;

0000e97c <__mspabi_srai_4>:
    e97c:	0c 11       	rra	r12		;

0000e97e <__mspabi_srai_3>:
    e97e:	0c 11       	rra	r12		;

0000e980 <__mspabi_srai_2>:
    e980:	0c 11       	rra	r12		;

0000e982 <__mspabi_srai_1>:
    e982:	0c 11       	rra	r12		;
    e984:	30 41       	ret			

0000e986 <.L11>:
    e986:	3d 53       	add	#-1,	r13	;r3 As==11
    e988:	0c 11       	rra	r12		;

0000e98a <__mspabi_srai>:
    e98a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e98c:	fc 23       	jnz	$-6      	;abs 0xe986
    e98e:	30 41       	ret			

0000e990 <__mspabi_sral_15>:
    e990:	0d 11       	rra	r13		;
    e992:	0c 10       	rrc	r12		;

0000e994 <__mspabi_sral_14>:
    e994:	0d 11       	rra	r13		;
    e996:	0c 10       	rrc	r12		;

0000e998 <__mspabi_sral_13>:
    e998:	0d 11       	rra	r13		;
    e99a:	0c 10       	rrc	r12		;

0000e99c <__mspabi_sral_12>:
    e99c:	0d 11       	rra	r13		;
    e99e:	0c 10       	rrc	r12		;

0000e9a0 <__mspabi_sral_11>:
    e9a0:	0d 11       	rra	r13		;
    e9a2:	0c 10       	rrc	r12		;

0000e9a4 <__mspabi_sral_10>:
    e9a4:	0d 11       	rra	r13		;
    e9a6:	0c 10       	rrc	r12		;

0000e9a8 <__mspabi_sral_9>:
    e9a8:	0d 11       	rra	r13		;
    e9aa:	0c 10       	rrc	r12		;

0000e9ac <__mspabi_sral_8>:
    e9ac:	0d 11       	rra	r13		;
    e9ae:	0c 10       	rrc	r12		;

0000e9b0 <__mspabi_sral_7>:
    e9b0:	0d 11       	rra	r13		;
    e9b2:	0c 10       	rrc	r12		;

0000e9b4 <__mspabi_sral_6>:
    e9b4:	0d 11       	rra	r13		;
    e9b6:	0c 10       	rrc	r12		;

0000e9b8 <__mspabi_sral_5>:
    e9b8:	0d 11       	rra	r13		;
    e9ba:	0c 10       	rrc	r12		;

0000e9bc <__mspabi_sral_4>:
    e9bc:	0d 11       	rra	r13		;
    e9be:	0c 10       	rrc	r12		;

0000e9c0 <__mspabi_sral_3>:
    e9c0:	0d 11       	rra	r13		;
    e9c2:	0c 10       	rrc	r12		;

0000e9c4 <__mspabi_sral_2>:
    e9c4:	0d 11       	rra	r13		;
    e9c6:	0c 10       	rrc	r12		;

0000e9c8 <__mspabi_sral_1>:
    e9c8:	0d 11       	rra	r13		;
    e9ca:	0c 10       	rrc	r12		;
    e9cc:	30 41       	ret			

0000e9ce <.L12>:
    e9ce:	3e 53       	add	#-1,	r14	;r3 As==11
    e9d0:	0d 11       	rra	r13		;
    e9d2:	0c 10       	rrc	r12		;

0000e9d4 <__mspabi_sral>:
    e9d4:	0e 93       	cmp	#0,	r14	;r3 As==00
    e9d6:	fb 23       	jnz	$-8      	;abs 0xe9ce
    e9d8:	30 41       	ret			

0000e9da <__mspabi_srli_15>:
    e9da:	12 c3       	clrc			
    e9dc:	0c 10       	rrc	r12		;

0000e9de <__mspabi_srli_14>:
    e9de:	12 c3       	clrc			
    e9e0:	0c 10       	rrc	r12		;

0000e9e2 <__mspabi_srli_13>:
    e9e2:	12 c3       	clrc			
    e9e4:	0c 10       	rrc	r12		;

0000e9e6 <__mspabi_srli_12>:
    e9e6:	12 c3       	clrc			
    e9e8:	0c 10       	rrc	r12		;

0000e9ea <__mspabi_srli_11>:
    e9ea:	12 c3       	clrc			
    e9ec:	0c 10       	rrc	r12		;

0000e9ee <__mspabi_srli_10>:
    e9ee:	12 c3       	clrc			
    e9f0:	0c 10       	rrc	r12		;

0000e9f2 <__mspabi_srli_9>:
    e9f2:	12 c3       	clrc			
    e9f4:	0c 10       	rrc	r12		;

0000e9f6 <__mspabi_srli_8>:
    e9f6:	12 c3       	clrc			
    e9f8:	0c 10       	rrc	r12		;

0000e9fa <__mspabi_srli_7>:
    e9fa:	12 c3       	clrc			
    e9fc:	0c 10       	rrc	r12		;

0000e9fe <__mspabi_srli_6>:
    e9fe:	12 c3       	clrc			
    ea00:	0c 10       	rrc	r12		;

0000ea02 <__mspabi_srli_5>:
    ea02:	12 c3       	clrc			
    ea04:	0c 10       	rrc	r12		;

0000ea06 <__mspabi_srli_4>:
    ea06:	12 c3       	clrc			
    ea08:	0c 10       	rrc	r12		;

0000ea0a <__mspabi_srli_3>:
    ea0a:	12 c3       	clrc			
    ea0c:	0c 10       	rrc	r12		;

0000ea0e <__mspabi_srli_2>:
    ea0e:	12 c3       	clrc			
    ea10:	0c 10       	rrc	r12		;

0000ea12 <__mspabi_srli_1>:
    ea12:	12 c3       	clrc			
    ea14:	0c 10       	rrc	r12		;
    ea16:	30 41       	ret			

0000ea18 <.L11>:
    ea18:	3d 53       	add	#-1,	r13	;r3 As==11
    ea1a:	12 c3       	clrc			
    ea1c:	0c 10       	rrc	r12		;

0000ea1e <__mspabi_srli>:
    ea1e:	0d 93       	cmp	#0,	r13	;r3 As==00
    ea20:	fb 23       	jnz	$-8      	;abs 0xea18
    ea22:	30 41       	ret			

0000ea24 <__mspabi_srll_15>:
    ea24:	12 c3       	clrc			
    ea26:	0d 10       	rrc	r13		;
    ea28:	0c 10       	rrc	r12		;

0000ea2a <__mspabi_srll_14>:
    ea2a:	12 c3       	clrc			
    ea2c:	0d 10       	rrc	r13		;
    ea2e:	0c 10       	rrc	r12		;

0000ea30 <__mspabi_srll_13>:
    ea30:	12 c3       	clrc			
    ea32:	0d 10       	rrc	r13		;
    ea34:	0c 10       	rrc	r12		;

0000ea36 <__mspabi_srll_12>:
    ea36:	12 c3       	clrc			
    ea38:	0d 10       	rrc	r13		;
    ea3a:	0c 10       	rrc	r12		;

0000ea3c <__mspabi_srll_11>:
    ea3c:	12 c3       	clrc			
    ea3e:	0d 10       	rrc	r13		;
    ea40:	0c 10       	rrc	r12		;

0000ea42 <__mspabi_srll_10>:
    ea42:	12 c3       	clrc			
    ea44:	0d 10       	rrc	r13		;
    ea46:	0c 10       	rrc	r12		;

0000ea48 <__mspabi_srll_9>:
    ea48:	12 c3       	clrc			
    ea4a:	0d 10       	rrc	r13		;
    ea4c:	0c 10       	rrc	r12		;

0000ea4e <__mspabi_srll_8>:
    ea4e:	12 c3       	clrc			
    ea50:	0d 10       	rrc	r13		;
    ea52:	0c 10       	rrc	r12		;

0000ea54 <__mspabi_srll_7>:
    ea54:	12 c3       	clrc			
    ea56:	0d 10       	rrc	r13		;
    ea58:	0c 10       	rrc	r12		;

0000ea5a <__mspabi_srll_6>:
    ea5a:	12 c3       	clrc			
    ea5c:	0d 10       	rrc	r13		;
    ea5e:	0c 10       	rrc	r12		;

0000ea60 <__mspabi_srll_5>:
    ea60:	12 c3       	clrc			
    ea62:	0d 10       	rrc	r13		;
    ea64:	0c 10       	rrc	r12		;

0000ea66 <__mspabi_srll_4>:
    ea66:	12 c3       	clrc			
    ea68:	0d 10       	rrc	r13		;
    ea6a:	0c 10       	rrc	r12		;

0000ea6c <__mspabi_srll_3>:
    ea6c:	12 c3       	clrc			
    ea6e:	0d 10       	rrc	r13		;
    ea70:	0c 10       	rrc	r12		;

0000ea72 <__mspabi_srll_2>:
    ea72:	12 c3       	clrc			
    ea74:	0d 10       	rrc	r13		;
    ea76:	0c 10       	rrc	r12		;

0000ea78 <__mspabi_srll_1>:
    ea78:	12 c3       	clrc			
    ea7a:	0d 10       	rrc	r13		;
    ea7c:	0c 10       	rrc	r12		;
    ea7e:	30 41       	ret			

0000ea80 <.L12>:
    ea80:	3e 53       	add	#-1,	r14	;r3 As==11
    ea82:	12 c3       	clrc			
    ea84:	0d 10       	rrc	r13		;
    ea86:	0c 10       	rrc	r12		;

0000ea88 <__mspabi_srll>:
    ea88:	0e 93       	cmp	#0,	r14	;r3 As==00
    ea8a:	fa 23       	jnz	$-10     	;abs 0xea80
    ea8c:	30 41       	ret			

0000ea8e <memmove>:
    ea8e:	0d 9c       	cmp	r12,	r13	;
    ea90:	0a 28       	jnc	$+22     	;abs 0xeaa6

0000ea92 <.L5>:
    ea92:	0f 4c       	mov	r12,	r15	;
    ea94:	0e 5c       	add	r12,	r14	;

0000ea96 <.L3>:
    ea96:	0e 9f       	cmp	r15,	r14	;
    ea98:	0d 24       	jz	$+28     	;abs 0xeab4

0000ea9a <.LVL3>:
    ea9a:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    ea9e:	1f 53       	inc	r15		;

0000eaa0 <.LVL4>:
    eaa0:	1d 53       	inc	r13		;
    eaa2:	30 40 96 ea 	br	#0xea96		;

0000eaa6 <.L2>:
    eaa6:	0f 4d       	mov	r13,	r15	;
    eaa8:	0f 5e       	add	r14,	r15	;
    eaaa:	0c 9f       	cmp	r15,	r12	;
    eaac:	f2 2f       	jc	$-26     	;abs 0xea92

0000eaae <.L4>:
    eaae:	3e 53       	add	#-1,	r14	;r3 As==11

0000eab0 <.LVL7>:
    eab0:	3e 93       	cmp	#-1,	r14	;r3 As==11
    eab2:	01 20       	jnz	$+4      	;abs 0xeab6

0000eab4 <.L10>:
    eab4:	30 41       	ret			

0000eab6 <.L6>:
    eab6:	0b 4c       	mov	r12,	r11	;
    eab8:	0b 5e       	add	r14,	r11	;
    eaba:	0f 4d       	mov	r13,	r15	;
    eabc:	0f 5e       	add	r14,	r15	;
    eabe:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    eac2:	30 40 ae ea 	br	#0xeaae		;

0000eac6 <memset>:
    eac6:	0f 4c       	mov	r12,	r15	;
    eac8:	0e 5c       	add	r12,	r14	;

0000eaca <.L2>:
    eaca:	0f 9e       	cmp	r14,	r15	;
    eacc:	01 20       	jnz	$+4      	;abs 0xead0

0000eace <.Loc.104.1>:
    eace:	30 41       	ret			

0000ead0 <.L3>:
    ead0:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    ead4:	1f 53       	inc	r15		;

0000ead6 <.LVL4>:
    ead6:	30 40 ca ea 	br	#0xeaca		;

0000eada <L0>:
    eada:	30 41       	ret			

0000eadc <__do_global_ctors_aux>:
    eadc:	0a 12       	push	r10		;
    eade:	3a 40 50 e0 	mov	#57424,	r10	;#0xe050

0000eae2 <.L2>:
    eae2:	2c 4a       	mov	@r10,	r12	;
    eae4:	3c 93       	cmp	#-1,	r12	;r3 As==11
    eae6:	02 20       	jnz	$+6      	;abs 0xeaec
    eae8:	3a 41       	pop	r10		;
    eaea:	30 41       	ret			

0000eaec <.L3>:
    eaec:	8c 12       	call	r12		;
    eaee:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    eaf2:	30 40 e2 ea 	br	#0xeae2		;

0000eaf6 <call___do_global_ctors_aux>:
    eaf6:	b0 12 5e e1 	call	#57694		;#0xe15e
    eafa:	b0 12 dc ea 	call	#60124		;#0xeadc

0000eafe <L0>:
    eafe:	b0 12 96 e0 	call	#57494		;#0xe096

0000eb02 <.Loc.19.1>:
    eb02:	b0 12 88 e0 	call	#57480		;#0xe088

0000eb06 <.Loc.20.1>:
    eb06:	30 41       	ret			

0000eb08 <__msp430_fini>:
    eb08:	b0 12 a4 e0 	call	#57508		;#0xe0a4

0000eb0c <L0>:
    eb0c:	b0 12 10 e1 	call	#57616		;#0xe110

0000eb10 <L0>:
    eb10:	30 41       	ret			
