
write_flash.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fae0 l    d  .keyfunction	00000000 .keyfunction
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e010 l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
0000021a l    d  .bss	00000000 .bss
0000022c l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e06c l       .text	00000000 _msp430_run_array
0000e07a l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e008 l     O .rodata	00000000 __CTOR_LIST__
0000e00c l     O .rodata	00000000 __DTOR_LIST__
0000e000 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000e86e l     O .text	00000000 __TMC_LIST__
0000e080 l     F .text	00000000 deregister_tm_clones
0000e09a l     F .text	00000000 register_tm_clones
0000e0c8 l     F .text	00000000 __do_global_dtors_aux
0000021a l     O .bss	00000000 completed.3056
0000021c l     O .bss	00000000 dtor_idx.3058
0000e116 l     F .text	00000000 call___do_global_dtors_aux
0000e116 l     F .text	00000000 frame_dummy
0000021e l     O .bss	00000000 object.3071
0000e12e l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e00a l     O .rodata	00000000 __CTOR_END__
0000e000 l     O .rodata	00000000 __FRAME_END__
0000e838 l     F .text	00000000 __do_global_ctors_aux
0000e852 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 cprintf.c
00000208 l     O .data	00000011 hex
0000e17c l     F .text	00000028 tty_putc
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e74e g       .text	00000000 .hidden __mspabi_srli_9
0000e6d4 g       .text	00000000 .hidden __mspabi_srai_6
0000e6de g       .text	00000000 .hidden __mspabi_srai_1
0000e79e g       .text	00000000 .hidden __mspabi_srll_10
0000e74a g       .text	00000000 .hidden __mspabi_srli_10
0000e700 g       .text	00000000 .hidden __mspabi_sral_10
0000e6f0 g       .text	00000000 .hidden __mspabi_sral_14
0000e736 g       .text	00000000 .hidden __mspabi_srli_15
0000e7ea g     F .text	00000038 memmove
0000e762 g       .text	00000000 .hidden __mspabi_srli_4
0000e5e4 g     F .text	00000040 .hidden udivmodhi4
0000e704 g       .text	00000000 .hidden __mspabi_sral_9
0000e756 g       .text	00000000 .hidden __mspabi_srli_7
0000e7b0 g       .text	00000000 .hidden __mspabi_srll_7
0000e7c8 g       .text	00000000 .hidden __mspabi_srll_3
0000e3f0 g     F .text	000001f4 cprintf
0000e710 g       .text	00000000 .hidden __mspabi_sral_6
0000e724 g       .text	00000000 .hidden __mspabi_sral_1
0000e6b4 g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e6c2 g       .text	00000000 .hidden __mspabi_srai_15
0000e1a4 g     F .text	0000001a cput_nibble
0000e86e g     O .text	00000000 .hidden __TMC_END__
0000e78c g       .text	00000000 .hidden __mspabi_srll_13
0000e00e g     O .rodata	00000000 .hidden __DTOR_END__
0000e004 g       .rodata	00000000 __fini_array_end
0000e742 g       .text	00000000 .hidden __mspabi_srli_12
0000e6dc g       .text	00000000 .hidden __mspabi_srai_2
0000e6da g       .text	00000000 .hidden __mspabi_srai_3
0000e010 g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e014 g     F .text	0000000e __crt0_init_bss
00000012 g       *ABS*	00000000 __bsssize
0000e6cc g       .text	00000000 .hidden __mspabi_srai_10
0000e670 g     F .text	00000032 .hidden __mspabi_remi
0000e036 g     F .text	0000000a __crt0_call_init_then_main
0000e6be g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e1da g     F .text	00000040 cput_binary_byte
0000e6ba g       .text	00000000 .hidden __mspabi_func_epilog_3
0000e7bc g       .text	00000000 .hidden __mspabi_srll_5
0000e77a g       .text	00000000 .hidden __mspabi_srli
0000e236 g     F .text	0000004c cput_hex_long
0000e798 g       .text	00000000 .hidden __mspabi_srll_11
0000fae0 g     F .keyfunction	00000004 smart_read_key
0000e75e g       .text	00000000 .hidden __mspabi_srli_5
00000000  w      *UND*	00000000 __deregister_frame_info
0000022c g       .noinit	00000000 end
0000e6fc g       .text	00000000 .hidden __mspabi_sral_11
0000e6ec g       .text	00000000 .hidden __mspabi_sral_15
0000e6d2 g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e1be g     F .text	0000001c cput_hex_byte
0000e6aa g     F .text	00000008 .hidden __mspabi_remu
0000e7b6 g       .text	00000000 .hidden __mspabi_srll_6
0000e718 g       .text	00000000 .hidden __mspabi_sral_4
0000e010 g       .text	00000000 _start
0000e21a g     F .text	0000001c cput_hex_word
0000e05c g     F .text	00000000 _msp430_run_fini_array
0000e76e g       .text	00000000 .hidden __mspabi_srli_1
0000e786 g       .text	00000000 .hidden __mspabi_srll_14
0000e6e6 g       .text	00000000 .hidden __mspabi_srai
0000e6c8 g       .text	00000000 .hidden __mspabi_srai_12
0000e73a g       .text	00000000 .hidden __mspabi_srli_14
0000001a g       *ABS*	00000000 __romdatacopysize
0000e70c g       .text	00000000 .hidden __mspabi_sral_7
0000e6d0 g       .text	00000000 .hidden __mspabi_srai_8
0000e746 g       .text	00000000 .hidden __mspabi_srli_11
0000e33e g     F .text	000000b2 cput_number
0000e720 g       .text	00000000 .hidden __mspabi_sral_2
0000e282 g     F .text	00000068 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e004 g       .rodata	00000000 __fini_array_start
0000e624 g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000e852 g       .text	00000000 __msp430_init
0000e822 g     F .text	00000014 memset
0000e150 g     F .text	0000002c main
0000e6ce g       .text	00000000 .hidden __mspabi_srai_9
0000e6ca g       .text	00000000 .hidden __mspabi_srai_11
0000e7c2 g       .text	00000000 .hidden __mspabi_srll_4
0000e004 g       .rodata	00000000 __init_array_end
0000e76a g       .text	00000000 .hidden __mspabi_srli_2
0000e730 g       .text	00000000 .hidden __mspabi_sral
0000e6a2 g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
00000204 g     O .data	00000002 key_possition
00000000  w      *ABS*	00000000 __rom_highdatastart
0000e86e g       .text	00000000 __msp430_fini_end
0000e708 g       .text	00000000 .hidden __mspabi_sral_8
0000e6f4 g       .text	00000000 .hidden __mspabi_sral_13
0000e12e g     F .text	00000022 delay
0000e792 g       .text	00000000 .hidden __mspabi_srll_12
0000e86e g       *ABS*	00000000 __romdatastart
0000e6d8 g       .text	00000000 .hidden __mspabi_srai_4
0000e040 g     F .text	00000000 _msp430_run_init_array
0000e75a g       .text	00000000 .hidden __mspabi_srli_6
0000e004 g       .rodata	00000000 __preinit_array_end
0000e766 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
0000021a g       .bss	00000000 __bssstart
0000e6b6 g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e6c4 g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .noinit	00000000 __stack
0000e7a4 g       .text	00000000 .hidden __mspabi_srll_9
0000e71c g       .text	00000000 .hidden __mspabi_sral_3
0000021a g       .data	00000000 _edata
0000e6f8 g       .text	00000000 .hidden __mspabi_sral_12
0000e864 g       .text	00000000 __msp430_init_end
0000e7e4 g       .text	00000000 .hidden __mspabi_srll
0000e2ea g     F .text	00000054 cput_nibble_block
00000000  w      *ABS*	00000000 __high_bssstart
0000e780 g       .text	00000000 .hidden __mspabi_srll_15
0000e004 g       .rodata	00000000 __init_array_start
0000e6d6 g       .text	00000000 .hidden __mspabi_srai_5
0000e6c6 g       .text	00000000 .hidden __mspabi_srai_13
0000e73e g       .text	00000000 .hidden __mspabi_srli_13
00000202 g     O .data	00000002 flash_possition
00000200 g       .data	00000000 __datastart
0000e7aa g       .text	00000000 .hidden __mspabi_srll_8
0000e7d4 g       .text	00000000 .hidden __mspabi_srll_1
0000e004 g       .rodata	00000000 __preinit_array_start
0000e022 g     F .text	00000014 __crt0_movedata
00000206 g     O .data	00000002 normal_possition
0000e6bc g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e714 g       .text	00000000 .hidden __mspabi_sral_5
0000e04e g     F .text	00000000 _msp430_run_preinit_array
0000e6b2 g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e6b8 g       .text	00000000 .hidden __mspabi_func_epilog_4
0000e7ce g       .text	00000000 .hidden __mspabi_srll_2
0000e864 g       .text	00000000 __msp430_fini
0000e752 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section .keyfunction:

0000fae0 <smart_read_key>:
}

#define SMART  __attribute__((__section__(".keyfunction"), noinline))
void SMART smart_read_key () {
    // *key_possition = '#';
}
    fae0:	03 43       	nop			
    fae2:	30 41       	ret			

Disassembly of section .text:

0000e010 <__crt0_start>:
    e010:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e014 <__crt0_init_bss>:
    e014:	3c 40 1a 02 	mov	#538,	r12	;#0x021a

0000e018 <.Loc.74.1>:
    e018:	0d 43       	clr	r13		;

0000e01a <.Loc.75.1>:
    e01a:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000e01e <.Loc.79.1>:
    e01e:	b0 12 22 e8 	call	#59426		;#0xe822

0000e022 <__crt0_movedata>:
    e022:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e026 <.Loc.116.1>:
    e026:	3d 40 6e e8 	mov	#59502,	r13	;#0xe86e

0000e02a <.Loc.119.1>:
    e02a:	0d 9c       	cmp	r12,	r13	;

0000e02c <.Loc.120.1>:
    e02c:	04 24       	jz	$+10     	;abs 0xe036

0000e02e <.Loc.122.1>:
    e02e:	3e 40 1a 00 	mov	#26,	r14	;#0x001a

0000e032 <.Loc.124.1>:
    e032:	b0 12 ea e7 	call	#59370		;#0xe7ea

0000e036 <__crt0_call_init_then_main>:
    e036:	b0 12 52 e8 	call	#59474		;#0xe852

0000e03a <.Loc.196.1>:
    e03a:	0c 43       	clr	r12		;

0000e03c <.Loc.197.1>:
    e03c:	b0 12 50 e1 	call	#57680		;#0xe150

0000e040 <_msp430_run_init_array>:
    e040:	34 40 04 e0 	mov	#57348,	r4	;#0xe004

0000e044 <.Loc.224.1>:
    e044:	35 40 04 e0 	mov	#57348,	r5	;#0xe004

0000e048 <.Loc.225.1>:
    e048:	26 43       	mov	#2,	r6	;r3 As==10

0000e04a <.Loc.226.1>:
    e04a:	30 40 6c e0 	br	#0xe06c		;

0000e04e <_msp430_run_preinit_array>:
    e04e:	34 40 04 e0 	mov	#57348,	r4	;#0xe004

0000e052 <.Loc.232.1>:
    e052:	35 40 04 e0 	mov	#57348,	r5	;#0xe004

0000e056 <.Loc.233.1>:
    e056:	26 43       	mov	#2,	r6	;r3 As==10

0000e058 <.Loc.234.1>:
    e058:	30 40 6c e0 	br	#0xe06c		;

0000e05c <_msp430_run_fini_array>:
    e05c:	34 40 04 e0 	mov	#57348,	r4	;#0xe004

0000e060 <.Loc.240.1>:
    e060:	35 40 04 e0 	mov	#57348,	r5	;#0xe004

0000e064 <.Loc.241.1>:
    e064:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e068 <.Loc.242.1>:
    e068:	30 40 6c e0 	br	#0xe06c		;

0000e06c <_msp430_run_array>:
    e06c:	05 94       	cmp	r4,	r5	;

0000e06e <.Loc.246.1>:
    e06e:	05 24       	jz	$+12     	;abs 0xe07a

0000e070 <.Loc.247.1>:
    e070:	27 44       	mov	@r4,	r7	;

0000e072 <.Loc.248.1>:
    e072:	04 56       	add	r6,	r4	;

0000e074 <.Loc.249.1>:
    e074:	a7 12       	call	@r7		;

0000e076 <.Loc.250.1>:
    e076:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe06c

0000e07a <_msp430_run_done>:
    e07a:	30 41       	ret			

0000e07c <L0>:
    e07c:	30 41       	ret			
    e07e:	30 41       	ret			

0000e080 <deregister_tm_clones>:
    e080:	3c 40 6e e8 	mov	#59502,	r12	;#0xe86e
    e084:	3c 90 6e e8 	cmp	#59502,	r12	;#0xe86e
    e088:	07 24       	jz	$+16     	;abs 0xe098
    e08a:	3d 40 00 00 	mov	#0,	r13	;
    e08e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e090:	03 24       	jz	$+8      	;abs 0xe098
    e092:	3c 40 6e e8 	mov	#59502,	r12	;#0xe86e
    e096:	8d 12       	call	r13		;

0000e098 <.L1>:
    e098:	30 41       	ret			

0000e09a <register_tm_clones>:
    e09a:	0a 12       	push	r10		;
    e09c:	3a 40 6e e8 	mov	#59502,	r10	;#0xe86e
    e0a0:	3a 80 6e e8 	sub	#59502,	r10	;#0xe86e
    e0a4:	0a 11       	rra	r10		;
    e0a6:	0c 4a       	mov	r10,	r12	;
    e0a8:	b0 12 36 e7 	call	#59190		;#0xe736
    e0ac:	0c 5a       	add	r10,	r12	;
    e0ae:	0d 4c       	mov	r12,	r13	;
    e0b0:	0d 11       	rra	r13		;
    e0b2:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0b4:	07 24       	jz	$+16     	;abs 0xe0c4
    e0b6:	3e 40 00 00 	mov	#0,	r14	;
    e0ba:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0bc:	03 24       	jz	$+8      	;abs 0xe0c4
    e0be:	3c 40 6e e8 	mov	#59502,	r12	;#0xe86e
    e0c2:	8e 12       	call	r14		;

0000e0c4 <.L9>:
    e0c4:	3a 41       	pop	r10		;
    e0c6:	30 41       	ret			

0000e0c8 <__do_global_dtors_aux>:
    e0c8:	0a 12       	push	r10		;
    e0ca:	09 12       	push	r9		;
    e0cc:	c2 93 1a 02 	cmp.b	#0,	&0x021a	;r3 As==00
    e0d0:	17 20       	jnz	$+48     	;abs 0xe100
    e0d2:	3a 40 0e e0 	mov	#57358,	r10	;#0xe00e
    e0d6:	3a 80 0c e0 	sub	#57356,	r10	;#0xe00c
    e0da:	0a 11       	rra	r10		;
    e0dc:	3a 53       	add	#-1,	r10	;r3 As==11
    e0de:	39 40 0c e0 	mov	#57356,	r9	;#0xe00c

0000e0e2 <.L19>:
    e0e2:	1c 42 1c 02 	mov	&0x021c,r12	;0x021c
    e0e6:	0c 9a       	cmp	r10,	r12	;
    e0e8:	0d 28       	jnc	$+28     	;abs 0xe104
    e0ea:	b0 12 80 e0 	call	#57472		;#0xe080
    e0ee:	3d 40 00 00 	mov	#0,	r13	;
    e0f2:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0f4:	03 24       	jz	$+8      	;abs 0xe0fc
    e0f6:	3c 40 00 e0 	mov	#57344,	r12	;#0xe000
    e0fa:	8d 12       	call	r13		;

0000e0fc <.L21>:
    e0fc:	d2 43 1a 02 	mov.b	#1,	&0x021a	;r3 As==01

0000e100 <.L17>:
    e100:	30 40 bc e6 	br	#0xe6bc		;

0000e104 <.L20>:
    e104:	1c 53       	inc	r12		;
    e106:	82 4c 1c 02 	mov	r12,	&0x021c	;
    e10a:	0c 5c       	rla	r12		;
    e10c:	0c 59       	add	r9,	r12	;
    e10e:	2c 4c       	mov	@r12,	r12	;
    e110:	8c 12       	call	r12		;
    e112:	30 40 e2 e0 	br	#0xe0e2		;

0000e116 <call___do_global_dtors_aux>:
    e116:	3e 40 00 00 	mov	#0,	r14	;
    e11a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e11c:	05 24       	jz	$+12     	;abs 0xe128
    e11e:	3d 40 1e 02 	mov	#542,	r13	;#0x021e
    e122:	3c 40 00 e0 	mov	#57344,	r12	;#0xe000
    e126:	8e 12       	call	r14		;

0000e128 <.L27>:
    e128:	b0 12 9a e0 	call	#57498		;#0xe09a
    e12c:	30 41       	ret			

0000e12e <delay>:

char * flash_possition = (void *) 0xFADE;
char * key_possition = (void *) 0xFEE0;
char * normal_possition = (void *) 0x05F0;

void delay(unsigned int d) {
    e12e:	21 83       	decd	r1		;

0000e130 <.LCFI0>:
    e130:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e134 <.Loc.12.1>:
   while(d--) {
    e134:	30 40 3c e1 	br	#0xe13c		;

0000e138 <.L3>:
      __nop();
    e138:	03 43       	nop			

0000e13a <.Loc.14.1>:
      __nop();
    e13a:	03 43       	nop			

0000e13c <.L2>:
char * flash_possition = (void *) 0xFADE;
char * key_possition = (void *) 0xFEE0;
char * normal_possition = (void *) 0x05F0;

void delay(unsigned int d) {
   while(d--) {
    e13c:	2c 41       	mov	@r1,	r12	;
    e13e:	0d 4c       	mov	r12,	r13	;
    e140:	3d 53       	add	#-1,	r13	;r3 As==11
    e142:	81 4d 00 00 	mov	r13,	0(r1)	;
    e146:	0c 93       	cmp	#0,	r12	;r3 As==00
    e148:	f7 23       	jnz	$-16     	;abs 0xe138

0000e14a <.Loc.16.1>:
      __nop();
      __nop();
   }
}
    e14a:	03 43       	nop			
    e14c:	21 53       	incd	r1		;
    e14e:	30 41       	ret			

0000e150 <main>:
void SMART smart_read_key () {
    // *key_possition = '#';
}

int main(void) {
    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e150:	3c 40 20 01 	mov	#288,	r12	;#0x0120
    e154:	bc 40 80 5a 	mov	#23168,	0(r12)	;#0x5a80
    e158:	00 00 

0000e15a <.Loc.26.1>:

    UART_BAUD = BAUD;                   // Init UART
    e15a:	7c 40 82 00 	mov.b	#130,	r12	;#0x0082
    e15e:	bc 40 11 04 	mov	#1041,	0(r12)	;#0x0411
    e162:	00 00 

0000e164 <.Loc.27.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e164:	7c 40 80 00 	mov.b	#128,	r12	;#0x0080
    e168:	fc 40 11 00 	mov.b	#17,	0(r12)	;#0x0011
    e16c:	00 00 

0000e16e <.Loc.29.1>:

    *flash_possition = '#';
    e16e:	1c 42 02 02 	mov	&0x0202,r12	;0x0202
    e172:	fc 40 23 00 	mov.b	#35,	0(r12)	;#0x0023
    e176:	00 00 

0000e178 <.L6>:
    // cprintf("%c\n", *flash_possition);
    // smart_read_key ();

    while(1) {}
    e178:	30 40 78 e1 	br	#0xe178		;

0000e17c <tty_putc>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {
    e17c:	21 83       	decd	r1		;

0000e17e <.LCFI0>:
    e17e:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e182 <.Loc.14.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e182:	03 43       	nop			

0000e184 <.L2>:
    e184:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e188:	6c 4c       	mov.b	@r12,	r12	;
    e18a:	7c f2       	and.b	#8,	r12	;r2 As==11
    e18c:	0c 93       	cmp	#0,	r12	;r3 As==00
    e18e:	fa 23       	jnz	$-10     	;abs 0xe184

0000e190 <.Loc.17.1>:

  // Write the output character
  UART_TXD = txdata;
    e190:	7c 40 84 00 	mov.b	#132,	r12	;#0x0084
    e194:	2d 41       	mov	@r1,	r13	;
    e196:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    e19a:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000e19e <.Loc.19.1>:

  return 0;
    e19e:	4c 43       	clr.b	r12		;

0000e1a0 <.Loc.20.1>:
}
    e1a0:	21 53       	incd	r1		;
    e1a2:	30 41       	ret			

0000e1a4 <cput_nibble>:

void
cput_nibble (int n) {
    e1a4:	21 83       	decd	r1		;

0000e1a6 <.LCFI1>:
    e1a6:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e1aa <.Loc.24.1>:
  tty_putc (hex[n&0x0f]);
    e1aa:	2c 41       	mov	@r1,	r12	;
    e1ac:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e1b0:	5c 4c 08 02 	mov.b	520(r12),r12	;0x00208
    e1b4:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e1b8 <.Loc.25.1>:
}
    e1b8:	03 43       	nop			
    e1ba:	21 53       	incd	r1		;
    e1bc:	30 41       	ret			

0000e1be <cput_hex_byte>:

void
cput_hex_byte (int n) {
    e1be:	21 83       	decd	r1		;

0000e1c0 <.LCFI2>:
    e1c0:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e1c4 <.Loc.29.1>:
  cput_nibble (n >> 4);
    e1c4:	2c 41       	mov	@r1,	r12	;
    e1c6:	b0 12 d8 e6 	call	#59096		;#0xe6d8
    e1ca:	b0 12 a4 e1 	call	#57764		;#0xe1a4

0000e1ce <.Loc.30.1>:
  cput_nibble (n);
    e1ce:	2c 41       	mov	@r1,	r12	;
    e1d0:	b0 12 a4 e1 	call	#57764		;#0xe1a4

0000e1d4 <.Loc.31.1>:
}
    e1d4:	03 43       	nop			
    e1d6:	21 53       	incd	r1		;
    e1d8:	30 41       	ret			

0000e1da <cput_binary_byte>:

void
cput_binary_byte (int n) {
    e1da:	21 82       	sub	#4,	r1	;r2 As==10

0000e1dc <.LCFI3>:
    e1dc:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e1e0 <.Loc.36.1>:
  int i;
  for (i=7; i>=0; i--)
    e1e0:	b1 40 07 00 	mov	#7,	2(r1)	;
    e1e4:	02 00 
    e1e6:	30 40 0e e2 	br	#0xe20e		;

0000e1ea <.L10>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e1ea:	2c 41       	mov	@r1,	r12	;
    e1ec:	1d 41 02 00 	mov	2(r1),	r13	;
    e1f0:	b0 12 e6 e6 	call	#59110		;#0xe6e6
    e1f4:	5c f3       	and.b	#1,	r12	;r3 As==01
    e1f6:	0c 93       	cmp	#0,	r12	;r3 As==00
    e1f8:	04 24       	jz	$+10     	;abs 0xe202

0000e1fa <.Loc.37.1>:
    e1fa:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031
    e1fe:	30 40 06 e2 	br	#0xe206		;

0000e202 <.L8>:
    e202:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e206 <.L9>:
    e206:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e20a <.Loc.36.1>:
}

void
cput_binary_byte (int n) {
  int i;
  for (i=7; i>=0; i--)
    e20a:	b1 53 02 00 	add	#-1,	2(r1)	;r3 As==11

0000e20e <.L7>:
    e20e:	81 93 02 00 	cmp	#0,	2(r1)	;r3 As==00
    e212:	eb 37       	jge	$-40     	;abs 0xe1ea

0000e214 <.Loc.38.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e214:	03 43       	nop			
    e216:	21 52       	add	#4,	r1	;r2 As==10
    e218:	30 41       	ret			

0000e21a <cput_hex_word>:

void
cput_hex_word (int n) {
    e21a:	21 83       	decd	r1		;

0000e21c <.LCFI4>:
    e21c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e220 <.Loc.42.1>:
  cput_hex_byte (n >> 8);
    e220:	2c 41       	mov	@r1,	r12	;
    e222:	b0 12 d0 e6 	call	#59088		;#0xe6d0
    e226:	b0 12 be e1 	call	#57790		;#0xe1be

0000e22a <.Loc.43.1>:
  cput_hex_byte (n);
    e22a:	2c 41       	mov	@r1,	r12	;
    e22c:	b0 12 be e1 	call	#57790		;#0xe1be

0000e230 <.Loc.44.1>:
}
    e230:	03 43       	nop			
    e232:	21 53       	incd	r1		;
    e234:	30 41       	ret			

0000e236 <cput_hex_long>:

void
cput_hex_long (long int n) {
    e236:	21 82       	sub	#4,	r1	;r2 As==10

0000e238 <.LCFI5>:
    e238:	81 4c 00 00 	mov	r12,	0(r1)	;
    e23c:	81 4d 02 00 	mov	r13,	2(r1)	;

0000e240 <.Loc.48.1>:
  cput_hex_byte (n >> 24);
    e240:	2c 41       	mov	@r1,	r12	;
    e242:	1d 41 02 00 	mov	2(r1),	r13	;
    e246:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e24a:	4f 43       	clr.b	r15		;
    e24c:	b0 12 30 e7 	call	#59184		;#0xe730
    e250:	b0 12 be e1 	call	#57790		;#0xe1be

0000e254 <.Loc.49.1>:
  cput_hex_byte (n >> 16);
    e254:	2c 41       	mov	@r1,	r12	;
    e256:	1d 41 02 00 	mov	2(r1),	r13	;
    e25a:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e25e:	4f 43       	clr.b	r15		;
    e260:	b0 12 30 e7 	call	#59184		;#0xe730
    e264:	b0 12 be e1 	call	#57790		;#0xe1be

0000e268 <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e268:	2c 41       	mov	@r1,	r12	;
    e26a:	1d 41 02 00 	mov	2(r1),	r13	;
    e26e:	b0 12 08 e7 	call	#59144		;#0xe708
    e272:	b0 12 be e1 	call	#57790		;#0xe1be

0000e276 <.Loc.51.1>:
  cput_hex_byte (n);
    e276:	2c 41       	mov	@r1,	r12	;
    e278:	b0 12 be e1 	call	#57790		;#0xe1be

0000e27c <.Loc.52.1>:
}
    e27c:	03 43       	nop			
    e27e:	21 52       	add	#4,	r1	;r2 As==10
    e280:	30 41       	ret			

0000e282 <cput_hex_block>:

void
cput_hex_block (char *block, int n) {
    e282:	31 80 06 00 	sub	#6,	r1	;

0000e286 <.LCFI6>:
    e286:	81 4c 02 00 	mov	r12,	2(r1)	;
    e28a:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e28e <.Loc.56.1>:
  int i = 0;
    e28e:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e292 <.Loc.57.1>:
  while (n)
    e292:	30 40 d6 e2 	br	#0xe2d6		;

0000e296 <.L18>:
    {
      cput_hex_byte (*block++);
    e296:	1c 41 02 00 	mov	2(r1),	r12	;
    e29a:	0d 4c       	mov	r12,	r13	;
    e29c:	1d 53       	inc	r13		;
    e29e:	81 4d 02 00 	mov	r13,	2(r1)	;
    e2a2:	6c 4c       	mov.b	@r12,	r12	;
    e2a4:	b0 12 be e1 	call	#57790		;#0xe1be

0000e2a8 <.Loc.60.1>:
      if (--n == 0)
    e2a8:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e2ac:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e2b0:	17 24       	jz	$+48     	;abs 0xe2e0

0000e2b2 <.Loc.62.1>:
	break;
      i++;
    e2b2:	91 53 04 00 	inc	4(r1)		;

0000e2b6 <.Loc.63.1>:
      if ((i & 7) == 0)
    e2b6:	1c 41 04 00 	mov	4(r1),	r12	;
    e2ba:	7c f0 07 00 	and.b	#7,	r12	;
    e2be:	0c 93       	cmp	#0,	r12	;r3 As==00
    e2c0:	06 20       	jnz	$+14     	;abs 0xe2ce

0000e2c2 <.Loc.64.1>:
	tty_putc (' ');
    e2c2:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e2c6:	b0 12 7c e1 	call	#57724		;#0xe17c
    e2ca:	30 40 d6 e2 	br	#0xe2d6		;

0000e2ce <.L17>:
      else
	tty_putc (':');
    e2ce:	7c 40 3a 00 	mov.b	#58,	r12	;#0x003a
    e2d2:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e2d6 <.L14>:
}

void
cput_hex_block (char *block, int n) {
  int i = 0;
  while (n)
    e2d6:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e2da:	dd 23       	jnz	$-68     	;abs 0xe296

0000e2dc <.Loc.68.1>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e2dc:	30 40 e2 e2 	br	#0xe2e2		;

0000e2e0 <.L19>:
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
    e2e0:	03 43       	nop			

0000e2e2 <.L16>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e2e2:	03 43       	nop			
    e2e4:	31 50 06 00 	add	#6,	r1	;
    e2e8:	30 41       	ret			

0000e2ea <cput_nibble_block>:

void
cput_nibble_block (char *block, int n) {
    e2ea:	31 80 06 00 	sub	#6,	r1	;

0000e2ee <.LCFI7>:
    e2ee:	81 4c 02 00 	mov	r12,	2(r1)	;
    e2f2:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e2f6 <.Loc.72.1>:
  int i = 0;
    e2f6:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e2fa <.Loc.73.1>:
  while (n)
    e2fa:	30 40 2a e3 	br	#0xe32a		;

0000e2fe <.L24>:
    {
      cput_nibble (*block);
    e2fe:	1c 41 02 00 	mov	2(r1),	r12	;
    e302:	6c 4c       	mov.b	@r12,	r12	;
    e304:	b0 12 a4 e1 	call	#57764		;#0xe1a4

0000e308 <.Loc.76.1>:
      if (--n == 0)
    e308:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e30c:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e310:	11 24       	jz	$+36     	;abs 0xe334

0000e312 <.Loc.78.1>:
	break;
      i++;
    e312:	91 53 04 00 	inc	4(r1)		;

0000e316 <.Loc.79.1>:
      if ((i & 7) == 0)
    e316:	1c 41 04 00 	mov	4(r1),	r12	;
    e31a:	7c f0 07 00 	and.b	#7,	r12	;
    e31e:	0c 93       	cmp	#0,	r12	;r3 As==00
    e320:	04 20       	jnz	$+10     	;abs 0xe32a

0000e322 <.Loc.80.1>:
	tty_putc (' ');
    e322:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e326:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e32a <.L21>:
}

void
cput_nibble_block (char *block, int n) {
  int i = 0;
  while (n)
    e32a:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e32e:	e7 23       	jnz	$-48     	;abs 0xe2fe

0000e330 <.Loc.82.1>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e330:	30 40 36 e3 	br	#0xe336		;

0000e334 <.L25>:
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
	break;
    e334:	03 43       	nop			

0000e336 <.L23>:
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e336:	03 43       	nop			
    e338:	31 50 06 00 	add	#6,	r1	;
    e33c:	30 41       	ret			

0000e33e <cput_number>:

void
cput_number (int n) {
    e33e:	31 80 18 00 	sub	#24,	r1	;#0x0018

0000e342 <.LCFI8>:
    e342:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e346 <.Loc.87.1>:
  char buf[20];
  int i = 0;
    e346:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016

0000e34a <.Loc.88.1>:
  if (n < 0)
    e34a:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e34e:	25 34       	jge	$+76     	;abs 0xe39a

0000e350 <.Loc.90.1>:
    {
      tty_putc ('-');
    e350:	7c 40 2d 00 	mov.b	#45,	r12	;#0x002d
    e354:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e358 <.Loc.91.1>:
      n = -n;
    e358:	4c 43       	clr.b	r12		;
    e35a:	2c 81       	sub	@r1,	r12	;
    e35c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e360 <.Loc.93.1>:
    }
  while (n > 9)
    e360:	30 40 9a e3 	br	#0xe39a		;

0000e364 <.L29>:
    {
      buf[i++] = (n%10) + '0';
    e364:	2c 41       	mov	@r1,	r12	;
    e366:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e36a:	b0 12 70 e6 	call	#58992		;#0xe670
    e36e:	4d 4c       	mov.b	r12,	r13	;
    e370:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e374:	0e 4c       	mov	r12,	r14	;
    e376:	1e 53       	inc	r14		;
    e378:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e37c:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e380:	4e 4d       	mov.b	r13,	r14	;
    e382:	0d 41       	mov	r1,	r13	;
    e384:	2d 53       	incd	r13		;
    e386:	0c 5d       	add	r13,	r12	;
    e388:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e38c <.Loc.96.1>:
      n /= 10;
    e38c:	2c 41       	mov	@r1,	r12	;
    e38e:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e392:	b0 12 24 e6 	call	#58916		;#0xe624
    e396:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e39a <.L28>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e39a:	7c 40 09 00 	mov.b	#9,	r12	;
    e39e:	2c 91       	cmp	@r1,	r12	;
    e3a0:	e1 3b       	jl	$-60     	;abs 0xe364

0000e3a2 <.Loc.98.1>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e3a2:	2c 41       	mov	@r1,	r12	;
    e3a4:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e3a8:	b0 12 70 e6 	call	#58992		;#0xe670
    e3ac:	4d 4c       	mov.b	r12,	r13	;
    e3ae:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e3b2:	0e 4c       	mov	r12,	r14	;
    e3b4:	1e 53       	inc	r14		;
    e3b6:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e3ba:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e3be:	4e 4d       	mov.b	r13,	r14	;
    e3c0:	0d 41       	mov	r1,	r13	;
    e3c2:	2d 53       	incd	r13		;
    e3c4:	0c 5d       	add	r13,	r12	;
    e3c6:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e3ca <.Loc.99.1>:
  while (i > 0)
    e3ca:	30 40 e0 e3 	br	#0xe3e0		;

0000e3ce <.L31>:
    tty_putc (buf[--i]);
    e3ce:	b1 53 16 00 	add	#-1,	22(r1)	;r3 As==11, 0x0016
    e3d2:	0c 41       	mov	r1,	r12	;
    e3d4:	2c 53       	incd	r12		;
    e3d6:	1c 51 16 00 	add	22(r1),	r12	;0x00016
    e3da:	6c 4c       	mov.b	@r12,	r12	;
    e3dc:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e3e0 <.L30>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e3e0:	4c 43       	clr.b	r12		;
    e3e2:	1c 91 16 00 	cmp	22(r1),	r12	;0x00016
    e3e6:	f3 3b       	jl	$-24     	;abs 0xe3ce

0000e3e8 <.Loc.101.1>:
    tty_putc (buf[--i]);
}
    e3e8:	03 43       	nop			
    e3ea:	31 50 18 00 	add	#24,	r1	;#0x0018
    e3ee:	30 41       	ret			

0000e3f0 <cprintf>:

void
cprintf (const char *fmt, ...) {
    e3f0:	31 80 06 00 	sub	#6,	r1	;

0000e3f4 <.LCFI9>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e3f4:	0c 41       	mov	r1,	r12	;
    e3f6:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    e3fa:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3fe <.Loc.111.1>:

  while (*fmt) {
    e3fe:	30 40 d2 e5 	br	#0xe5d2		;

0000e402 <.L49>:
      if (*fmt != '%')
    e402:	1c 41 08 00 	mov	8(r1),	r12	;
    e406:	6c 4c       	mov.b	@r12,	r12	;
    e408:	7c 90 25 00 	cmp.b	#37,	r12	;#0x0025
    e40c:	07 24       	jz	$+16     	;abs 0xe41c

0000e40e <.Loc.113.1>:
	tty_putc (*fmt);
    e40e:	1c 41 08 00 	mov	8(r1),	r12	;
    e412:	6c 4c       	mov.b	@r12,	r12	;
    e414:	b0 12 7c e1 	call	#57724		;#0xe17c
    e418:	30 40 ce e5 	br	#0xe5ce		;

0000e41c <.L34>:
      else
	switch (*++fmt)
    e41c:	91 53 08 00 	inc	8(r1)		;
    e420:	1c 41 08 00 	mov	8(r1),	r12	;
    e424:	6c 4c       	mov.b	@r12,	r12	;
    e426:	3c 90 64 00 	cmp	#100,	r12	;#0x0064
    e42a:	44 24       	jz	$+138    	;abs 0xe4b4
    e42c:	7d 40 64 00 	mov.b	#100,	r13	;#0x0064
    e430:	0d 9c       	cmp	r12,	r13	;
    e432:	14 38       	jl	$+42     	;abs 0xe45c
    e434:	3c 90 42 00 	cmp	#66,	r12	;#0x0042
    e438:	5b 24       	jz	$+184    	;abs 0xe4f0
    e43a:	7d 40 42 00 	mov.b	#66,	r13	;#0x0042
    e43e:	0d 9c       	cmp	r12,	r13	;
    e440:	05 38       	jl	$+12     	;abs 0xe44c
    e442:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e446:	21 24       	jz	$+68     	;abs 0xe48a
    e448:	30 40 ce e5 	br	#0xe5ce		;

0000e44c <.L39>:
    e44c:	3c 90 62 00 	cmp	#98,	r12	;#0x0062
    e450:	40 24       	jz	$+130    	;abs 0xe4d2
    e452:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    e456:	1f 24       	jz	$+64     	;abs 0xe496
    e458:	30 40 ce e5 	br	#0xe5ce		;

0000e45c <.L37>:
    e45c:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    e460:	a9 24       	jz	$+340    	;abs 0xe5b4
    e462:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    e466:	0d 9c       	cmp	r12,	r13	;
    e468:	08 38       	jl	$+18     	;abs 0xe47a
    e46a:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    e46e:	5e 24       	jz	$+190    	;abs 0xe52c
    e470:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    e474:	87 24       	jz	$+272    	;abs 0xe584
    e476:	30 40 ce e5 	br	#0xe5ce		;

0000e47a <.L44>:
    e47a:	3c 90 77 00 	cmp	#119,	r12	;#0x0077
    e47e:	47 24       	jz	$+144    	;abs 0xe50e
    e480:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    e484:	67 24       	jz	$+208    	;abs 0xe554
    e486:	30 40 ce e5 	br	#0xe5ce		;

0000e48a <.L40>:
	  {
	  case '%':
	    tty_putc ('%');
    e48a:	7c 40 25 00 	mov.b	#37,	r12	;#0x0025
    e48e:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e492 <.Loc.119.1>:
	    break;
    e492:	30 40 ce e5 	br	#0xe5ce		;

0000e496 <.L42>:
	  case 'c':
	    i = va_arg (v, int);
    e496:	2c 41       	mov	@r1,	r12	;
    e498:	1c 53       	inc	r12		;
    e49a:	1c c3       	bic	#1,	r12	;r3 As==01
    e49c:	0d 4c       	mov	r12,	r13	;
    e49e:	2d 53       	incd	r13		;
    e4a0:	81 4d 00 00 	mov	r13,	0(r1)	;
    e4a4:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e4a8 <.Loc.122.1>:
	    tty_putc(i);
    e4a8:	1c 41 02 00 	mov	2(r1),	r12	;
    e4ac:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e4b0 <.Loc.123.1>:
	    break;
    e4b0:	30 40 ce e5 	br	#0xe5ce		;

0000e4b4 <.L36>:
	  case 'd':
	    i = va_arg (v, int);
    e4b4:	2c 41       	mov	@r1,	r12	;
    e4b6:	1c 53       	inc	r12		;
    e4b8:	1c c3       	bic	#1,	r12	;r3 As==01
    e4ba:	0d 4c       	mov	r12,	r13	;
    e4bc:	2d 53       	incd	r13		;
    e4be:	81 4d 00 00 	mov	r13,	0(r1)	;
    e4c2:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e4c6 <.Loc.126.1>:
	    cput_number(i);
    e4c6:	1c 41 02 00 	mov	2(r1),	r12	;
    e4ca:	b0 12 3e e3 	call	#58174		;#0xe33e

0000e4ce <.Loc.127.1>:
	    break;
    e4ce:	30 40 ce e5 	br	#0xe5ce		;

0000e4d2 <.L41>:
	  case 'b':
	    i = va_arg (v, int);
    e4d2:	2c 41       	mov	@r1,	r12	;
    e4d4:	1c 53       	inc	r12		;
    e4d6:	1c c3       	bic	#1,	r12	;r3 As==01
    e4d8:	0d 4c       	mov	r12,	r13	;
    e4da:	2d 53       	incd	r13		;
    e4dc:	81 4d 00 00 	mov	r13,	0(r1)	;
    e4e0:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e4e4 <.Loc.130.1>:
	    cput_hex_byte (i);
    e4e4:	1c 41 02 00 	mov	2(r1),	r12	;
    e4e8:	b0 12 be e1 	call	#57790		;#0xe1be

0000e4ec <.Loc.131.1>:
	    break;
    e4ec:	30 40 ce e5 	br	#0xe5ce		;

0000e4f0 <.L38>:
	  case 'B':
	    i = va_arg (v, int);
    e4f0:	2c 41       	mov	@r1,	r12	;
    e4f2:	1c 53       	inc	r12		;
    e4f4:	1c c3       	bic	#1,	r12	;r3 As==01
    e4f6:	0d 4c       	mov	r12,	r13	;
    e4f8:	2d 53       	incd	r13		;
    e4fa:	81 4d 00 00 	mov	r13,	0(r1)	;
    e4fe:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e502 <.Loc.134.1>:
	    cput_binary_byte (i);
    e502:	1c 41 02 00 	mov	2(r1),	r12	;
    e506:	b0 12 da e1 	call	#57818		;#0xe1da

0000e50a <.Loc.135.1>:
	    break;
    e50a:	30 40 ce e5 	br	#0xe5ce		;

0000e50e <.L47>:
	  case 'w':
	    i = va_arg (v, int);
    e50e:	2c 41       	mov	@r1,	r12	;
    e510:	1c 53       	inc	r12		;
    e512:	1c c3       	bic	#1,	r12	;r3 As==01
    e514:	0d 4c       	mov	r12,	r13	;
    e516:	2d 53       	incd	r13		;
    e518:	81 4d 00 00 	mov	r13,	0(r1)	;
    e51c:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e520 <.Loc.138.1>:
	    cput_hex_word (i);
    e520:	1c 41 02 00 	mov	2(r1),	r12	;
    e524:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e528 <.Loc.139.1>:
	    break;
    e528:	30 40 ce e5 	br	#0xe5ce		;

0000e52c <.L45>:
	  case 'l':
	    i = va_arg (v, int);
    e52c:	2c 41       	mov	@r1,	r12	;
    e52e:	1c 53       	inc	r12		;
    e530:	1c c3       	bic	#1,	r12	;r3 As==01
    e532:	0d 4c       	mov	r12,	r13	;
    e534:	2d 53       	incd	r13		;
    e536:	81 4d 00 00 	mov	r13,	0(r1)	;
    e53a:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e53e <.Loc.142.1>:
	    cput_hex_long (i);
    e53e:	1e 41 02 00 	mov	2(r1),	r14	;
    e542:	0c 4e       	mov	r14,	r12	;
    e544:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e548:	0d 7d       	subc	r13,	r13	;
    e54a:	3d e3       	inv	r13		;
    e54c:	b0 12 36 e2 	call	#57910		;#0xe236

0000e550 <.Loc.143.1>:
	    break;
    e550:	30 40 ce e5 	br	#0xe5ce		;

0000e554 <.L48>:
	  case 'x':
	    s = va_arg (v, char *);
    e554:	2c 41       	mov	@r1,	r12	;
    e556:	0d 4c       	mov	r12,	r13	;
    e558:	2d 53       	incd	r13		;
    e55a:	81 4d 00 00 	mov	r13,	0(r1)	;
    e55e:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e562 <.Loc.146.1>:
	    i = va_arg (v, int);
    e562:	2c 41       	mov	@r1,	r12	;
    e564:	1c 53       	inc	r12		;
    e566:	1c c3       	bic	#1,	r12	;r3 As==01
    e568:	0d 4c       	mov	r12,	r13	;
    e56a:	2d 53       	incd	r13		;
    e56c:	81 4d 00 00 	mov	r13,	0(r1)	;
    e570:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e574 <.Loc.147.1>:
	    cput_hex_block (s, i);
    e574:	1d 41 02 00 	mov	2(r1),	r13	;
    e578:	1c 41 04 00 	mov	4(r1),	r12	;
    e57c:	b0 12 82 e2 	call	#57986		;#0xe282

0000e580 <.Loc.148.1>:
	    break;
    e580:	30 40 ce e5 	br	#0xe5ce		;

0000e584 <.L46>:
	  case 'n':
	    s = va_arg (v, char *);
    e584:	2c 41       	mov	@r1,	r12	;
    e586:	0d 4c       	mov	r12,	r13	;
    e588:	2d 53       	incd	r13		;
    e58a:	81 4d 00 00 	mov	r13,	0(r1)	;
    e58e:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e592 <.Loc.151.1>:
	    i = va_arg (v, int);
    e592:	2c 41       	mov	@r1,	r12	;
    e594:	1c 53       	inc	r12		;
    e596:	1c c3       	bic	#1,	r12	;r3 As==01
    e598:	0d 4c       	mov	r12,	r13	;
    e59a:	2d 53       	incd	r13		;
    e59c:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5a0:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5a4 <.Loc.152.1>:
	    cput_nibble_block (s, i);
    e5a4:	1d 41 02 00 	mov	2(r1),	r13	;
    e5a8:	1c 41 04 00 	mov	4(r1),	r12	;
    e5ac:	b0 12 ea e2 	call	#58090		;#0xe2ea

0000e5b0 <.Loc.153.1>:
	    break;
    e5b0:	30 40 ce e5 	br	#0xe5ce		;

0000e5b4 <.L43>:
	  case 's':
	    s = va_arg (v, char *);
    e5b4:	2c 41       	mov	@r1,	r12	;
    e5b6:	0d 4c       	mov	r12,	r13	;
    e5b8:	2d 53       	incd	r13		;
    e5ba:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5be:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e5c2 <.Loc.156.1>:
	    tty_putc (s[0]);
    e5c2:	1c 41 04 00 	mov	4(r1),	r12	;
    e5c6:	6c 4c       	mov.b	@r12,	r12	;
    e5c8:	b0 12 7c e1 	call	#57724		;#0xe17c

0000e5cc <.Loc.157.1>:
	    break;
    e5cc:	03 43       	nop			

0000e5ce <.L35>:
	  }
      fmt ++;
    e5ce:	91 53 08 00 	inc	8(r1)		;

0000e5d2 <.L33>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt) {
    e5d2:	1c 41 08 00 	mov	8(r1),	r12	;
    e5d6:	6c 4c       	mov.b	@r12,	r12	;
    e5d8:	0c 93       	cmp	#0,	r12	;r3 As==00
    e5da:	13 23       	jnz	$-472    	;abs 0xe402

0000e5dc <.Loc.161.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e5dc:	03 43       	nop			
    e5de:	31 50 06 00 	add	#6,	r1	;
    e5e2:	30 41       	ret			

0000e5e4 <udivmodhi4>:
    e5e4:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e5e8 <.Loc.35.1>:
    e5e8:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e5ea <.L2>:
    e5ea:	0d 9c       	cmp	r12,	r13	;
    e5ec:	08 28       	jnc	$+18     	;abs 0xe5fe

0000e5ee <.L15>:
    e5ee:	4f 43       	clr.b	r15		;

0000e5f0 <.L4>:
    e5f0:	0b 93       	cmp	#0,	r11	;r3 As==00
    e5f2:	0e 20       	jnz	$+30     	;abs 0xe610

0000e5f4 <.L5>:
    e5f4:	0e 93       	cmp	#0,	r14	;r3 As==00
    e5f6:	01 24       	jz	$+4      	;abs 0xe5fa
    e5f8:	0f 4c       	mov	r12,	r15	;

0000e5fa <.L1>:
    e5fa:	0c 4f       	mov	r15,	r12	;
    e5fc:	30 41       	ret			

0000e5fe <.L3>:
    e5fe:	3f 53       	add	#-1,	r15	;r3 As==11

0000e600 <.Loc.38.1>:
    e600:	0f 93       	cmp	#0,	r15	;r3 As==00
    e602:	f8 27       	jz	$-14     	;abs 0xe5f4

0000e604 <.Loc.38.1>:
    e604:	0d 93       	cmp	#0,	r13	;r3 As==00
    e606:	f3 3b       	jl	$-24     	;abs 0xe5ee

0000e608 <.Loc.40.1>:
    e608:	0d 5d       	rla	r13		;

0000e60a <.Loc.41.1>:
    e60a:	0b 5b       	rla	r11		;
    e60c:	30 40 ea e5 	br	#0xe5ea		;

0000e610 <.L9>:
    e610:	0c 9d       	cmp	r13,	r12	;
    e612:	02 28       	jnc	$+6      	;abs 0xe618

0000e614 <.Loc.47.1>:
    e614:	0c 8d       	sub	r13,	r12	;

0000e616 <.Loc.48.1>:
    e616:	0f db       	bis	r11,	r15	;

0000e618 <.L8>:
    e618:	12 c3       	clrc			
    e61a:	0b 10       	rrc	r11		;

0000e61c <.Loc.51.1>:
    e61c:	12 c3       	clrc			
    e61e:	0d 10       	rrc	r13		;
    e620:	30 40 f0 e5 	br	#0xe5f0		;

0000e624 <__mspabi_divi>:
    e624:	0a 12       	push	r10		;

0000e626 <.LCFI0>:
    e626:	0f 4c       	mov	r12,	r15	;
    e628:	0e 4d       	mov	r13,	r14	;

0000e62a <.LVL14>:
    e62a:	3b 40 e4 e5 	mov	#58852,	r11	;#0xe5e4

0000e62e <.Loc.64.1>:
    e62e:	0c 93       	cmp	#0,	r12	;r3 As==00
    e630:	1a 34       	jge	$+54     	;abs 0xe666

0000e632 <.Loc.66.1>:
    e632:	4c 43       	clr.b	r12		;

0000e634 <.LVL15>:
    e634:	0c 8f       	sub	r15,	r12	;
    e636:	0f 4c       	mov	r12,	r15	;

0000e638 <.LVL16>:
    e638:	0d 93       	cmp	#0,	r13	;r3 As==00
    e63a:	0d 34       	jge	$+28     	;abs 0xe656

0000e63c <.Loc.67.1>:
    e63c:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e63e <.L21>:
    e63e:	0d 43       	clr	r13		;
    e640:	0d 8e       	sub	r14,	r13	;

0000e642 <.LVL18>:
    e642:	4e 43       	clr.b	r14		;

0000e644 <.LVL19>:
    e644:	0c 4f       	mov	r15,	r12	;

0000e646 <.LVL20>:
    e646:	8b 12       	call	r11		;

0000e648 <.LVL21>:
    e648:	1a 93       	cmp	#1,	r10	;r3 As==01
    e64a:	03 24       	jz	$+8      	;abs 0xe652

0000e64c <.L20>:
    e64c:	4d 43       	clr.b	r13		;
    e64e:	0d 8c       	sub	r12,	r13	;
    e650:	0c 4d       	mov	r13,	r12	;

0000e652 <.L16>:
    e652:	3a 41       	pop	r10		;
    e654:	30 41       	ret			

0000e656 <.L18>:
    e656:	4e 43       	clr.b	r14		;
    e658:	8b 12       	call	r11		;

0000e65a <.LVL25>:
    e65a:	30 40 4c e6 	br	#0xe64c		;

0000e65e <.L27>:
    e65e:	4e 43       	clr.b	r14		;
    e660:	8b 12       	call	r11		;

0000e662 <.LVL27>:
    e662:	30 40 52 e6 	br	#0xe652		;

0000e666 <.L17>:
    e666:	0d 93       	cmp	#0,	r13	;r3 As==00
    e668:	fa 37       	jge	$-10     	;abs 0xe65e

0000e66a <.Loc.61.1>:
    e66a:	4a 43       	clr.b	r10		;
    e66c:	30 40 3e e6 	br	#0xe63e		;

0000e670 <__mspabi_remi>:
    e670:	0a 12       	push	r10		;

0000e672 <.LCFI1>:
    e672:	0c 93       	cmp	#0,	r12	;r3 As==00
    e674:	13 34       	jge	$+40     	;abs 0xe69c

0000e676 <.Loc.92.1>:
    e676:	4e 43       	clr.b	r14		;
    e678:	0e 8c       	sub	r12,	r14	;
    e67a:	0c 4e       	mov	r14,	r12	;

0000e67c <.LVL31>:
    e67c:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e67e <.L29>:
    e67e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e680:	03 34       	jge	$+8      	;abs 0xe688
    e682:	4e 43       	clr.b	r14		;
    e684:	0e 8d       	sub	r13,	r14	;
    e686:	0d 4e       	mov	r14,	r13	;

0000e688 <.L30>:
    e688:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e68a:	b0 12 e4 e5 	call	#58852		;#0xe5e4

0000e68e <.LVL34>:
    e68e:	0a 93       	cmp	#0,	r10	;r3 As==00
    e690:	03 24       	jz	$+8      	;abs 0xe698

0000e692 <.LVL35>:
    e692:	4d 43       	clr.b	r13		;
    e694:	0d 8c       	sub	r12,	r13	;
    e696:	0c 4d       	mov	r13,	r12	;

0000e698 <.L28>:
    e698:	3a 41       	pop	r10		;
    e69a:	30 41       	ret			

0000e69c <.L32>:
    e69c:	4a 43       	clr.b	r10		;
    e69e:	30 40 7e e6 	br	#0xe67e		;

0000e6a2 <__mspabi_divu>:
    e6a2:	4e 43       	clr.b	r14		;
    e6a4:	b0 12 e4 e5 	call	#58852		;#0xe5e4

0000e6a8 <.LVL39>:
    e6a8:	30 41       	ret			

0000e6aa <__mspabi_remu>:
    e6aa:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e6ac:	b0 12 e4 e5 	call	#58852		;#0xe5e4

0000e6b0 <.LVL41>:
    e6b0:	30 41       	ret			

0000e6b2 <__mspabi_func_epilog_7>:
    e6b2:	34 41       	pop	r4		;

0000e6b4 <__mspabi_func_epilog_6>:
    e6b4:	35 41       	pop	r5		;

0000e6b6 <__mspabi_func_epilog_5>:
    e6b6:	36 41       	pop	r6		;

0000e6b8 <__mspabi_func_epilog_4>:
    e6b8:	37 41       	pop	r7		;

0000e6ba <__mspabi_func_epilog_3>:
    e6ba:	38 41       	pop	r8		;

0000e6bc <__mspabi_func_epilog_2>:
    e6bc:	39 41       	pop	r9		;

0000e6be <__mspabi_func_epilog_1>:
    e6be:	3a 41       	pop	r10		;
    e6c0:	30 41       	ret			

0000e6c2 <__mspabi_srai_15>:
    e6c2:	0c 11       	rra	r12		;

0000e6c4 <__mspabi_srai_14>:
    e6c4:	0c 11       	rra	r12		;

0000e6c6 <__mspabi_srai_13>:
    e6c6:	0c 11       	rra	r12		;

0000e6c8 <__mspabi_srai_12>:
    e6c8:	0c 11       	rra	r12		;

0000e6ca <__mspabi_srai_11>:
    e6ca:	0c 11       	rra	r12		;

0000e6cc <__mspabi_srai_10>:
    e6cc:	0c 11       	rra	r12		;

0000e6ce <__mspabi_srai_9>:
    e6ce:	0c 11       	rra	r12		;

0000e6d0 <__mspabi_srai_8>:
    e6d0:	0c 11       	rra	r12		;

0000e6d2 <__mspabi_srai_7>:
    e6d2:	0c 11       	rra	r12		;

0000e6d4 <__mspabi_srai_6>:
    e6d4:	0c 11       	rra	r12		;

0000e6d6 <__mspabi_srai_5>:
    e6d6:	0c 11       	rra	r12		;

0000e6d8 <__mspabi_srai_4>:
    e6d8:	0c 11       	rra	r12		;

0000e6da <__mspabi_srai_3>:
    e6da:	0c 11       	rra	r12		;

0000e6dc <__mspabi_srai_2>:
    e6dc:	0c 11       	rra	r12		;

0000e6de <__mspabi_srai_1>:
    e6de:	0c 11       	rra	r12		;
    e6e0:	30 41       	ret			

0000e6e2 <.L11>:
    e6e2:	3d 53       	add	#-1,	r13	;r3 As==11
    e6e4:	0c 11       	rra	r12		;

0000e6e6 <__mspabi_srai>:
    e6e6:	0d 93       	cmp	#0,	r13	;r3 As==00
    e6e8:	fc 23       	jnz	$-6      	;abs 0xe6e2
    e6ea:	30 41       	ret			

0000e6ec <__mspabi_sral_15>:
    e6ec:	0d 11       	rra	r13		;
    e6ee:	0c 10       	rrc	r12		;

0000e6f0 <__mspabi_sral_14>:
    e6f0:	0d 11       	rra	r13		;
    e6f2:	0c 10       	rrc	r12		;

0000e6f4 <__mspabi_sral_13>:
    e6f4:	0d 11       	rra	r13		;
    e6f6:	0c 10       	rrc	r12		;

0000e6f8 <__mspabi_sral_12>:
    e6f8:	0d 11       	rra	r13		;
    e6fa:	0c 10       	rrc	r12		;

0000e6fc <__mspabi_sral_11>:
    e6fc:	0d 11       	rra	r13		;
    e6fe:	0c 10       	rrc	r12		;

0000e700 <__mspabi_sral_10>:
    e700:	0d 11       	rra	r13		;
    e702:	0c 10       	rrc	r12		;

0000e704 <__mspabi_sral_9>:
    e704:	0d 11       	rra	r13		;
    e706:	0c 10       	rrc	r12		;

0000e708 <__mspabi_sral_8>:
    e708:	0d 11       	rra	r13		;
    e70a:	0c 10       	rrc	r12		;

0000e70c <__mspabi_sral_7>:
    e70c:	0d 11       	rra	r13		;
    e70e:	0c 10       	rrc	r12		;

0000e710 <__mspabi_sral_6>:
    e710:	0d 11       	rra	r13		;
    e712:	0c 10       	rrc	r12		;

0000e714 <__mspabi_sral_5>:
    e714:	0d 11       	rra	r13		;
    e716:	0c 10       	rrc	r12		;

0000e718 <__mspabi_sral_4>:
    e718:	0d 11       	rra	r13		;
    e71a:	0c 10       	rrc	r12		;

0000e71c <__mspabi_sral_3>:
    e71c:	0d 11       	rra	r13		;
    e71e:	0c 10       	rrc	r12		;

0000e720 <__mspabi_sral_2>:
    e720:	0d 11       	rra	r13		;
    e722:	0c 10       	rrc	r12		;

0000e724 <__mspabi_sral_1>:
    e724:	0d 11       	rra	r13		;
    e726:	0c 10       	rrc	r12		;
    e728:	30 41       	ret			

0000e72a <.L12>:
    e72a:	3e 53       	add	#-1,	r14	;r3 As==11
    e72c:	0d 11       	rra	r13		;
    e72e:	0c 10       	rrc	r12		;

0000e730 <__mspabi_sral>:
    e730:	0e 93       	cmp	#0,	r14	;r3 As==00
    e732:	fb 23       	jnz	$-8      	;abs 0xe72a
    e734:	30 41       	ret			

0000e736 <__mspabi_srli_15>:
    e736:	12 c3       	clrc			
    e738:	0c 10       	rrc	r12		;

0000e73a <__mspabi_srli_14>:
    e73a:	12 c3       	clrc			
    e73c:	0c 10       	rrc	r12		;

0000e73e <__mspabi_srli_13>:
    e73e:	12 c3       	clrc			
    e740:	0c 10       	rrc	r12		;

0000e742 <__mspabi_srli_12>:
    e742:	12 c3       	clrc			
    e744:	0c 10       	rrc	r12		;

0000e746 <__mspabi_srli_11>:
    e746:	12 c3       	clrc			
    e748:	0c 10       	rrc	r12		;

0000e74a <__mspabi_srli_10>:
    e74a:	12 c3       	clrc			
    e74c:	0c 10       	rrc	r12		;

0000e74e <__mspabi_srli_9>:
    e74e:	12 c3       	clrc			
    e750:	0c 10       	rrc	r12		;

0000e752 <__mspabi_srli_8>:
    e752:	12 c3       	clrc			
    e754:	0c 10       	rrc	r12		;

0000e756 <__mspabi_srli_7>:
    e756:	12 c3       	clrc			
    e758:	0c 10       	rrc	r12		;

0000e75a <__mspabi_srli_6>:
    e75a:	12 c3       	clrc			
    e75c:	0c 10       	rrc	r12		;

0000e75e <__mspabi_srli_5>:
    e75e:	12 c3       	clrc			
    e760:	0c 10       	rrc	r12		;

0000e762 <__mspabi_srli_4>:
    e762:	12 c3       	clrc			
    e764:	0c 10       	rrc	r12		;

0000e766 <__mspabi_srli_3>:
    e766:	12 c3       	clrc			
    e768:	0c 10       	rrc	r12		;

0000e76a <__mspabi_srli_2>:
    e76a:	12 c3       	clrc			
    e76c:	0c 10       	rrc	r12		;

0000e76e <__mspabi_srli_1>:
    e76e:	12 c3       	clrc			
    e770:	0c 10       	rrc	r12		;
    e772:	30 41       	ret			

0000e774 <.L11>:
    e774:	3d 53       	add	#-1,	r13	;r3 As==11
    e776:	12 c3       	clrc			
    e778:	0c 10       	rrc	r12		;

0000e77a <__mspabi_srli>:
    e77a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e77c:	fb 23       	jnz	$-8      	;abs 0xe774
    e77e:	30 41       	ret			

0000e780 <__mspabi_srll_15>:
    e780:	12 c3       	clrc			
    e782:	0d 10       	rrc	r13		;
    e784:	0c 10       	rrc	r12		;

0000e786 <__mspabi_srll_14>:
    e786:	12 c3       	clrc			
    e788:	0d 10       	rrc	r13		;
    e78a:	0c 10       	rrc	r12		;

0000e78c <__mspabi_srll_13>:
    e78c:	12 c3       	clrc			
    e78e:	0d 10       	rrc	r13		;
    e790:	0c 10       	rrc	r12		;

0000e792 <__mspabi_srll_12>:
    e792:	12 c3       	clrc			
    e794:	0d 10       	rrc	r13		;
    e796:	0c 10       	rrc	r12		;

0000e798 <__mspabi_srll_11>:
    e798:	12 c3       	clrc			
    e79a:	0d 10       	rrc	r13		;
    e79c:	0c 10       	rrc	r12		;

0000e79e <__mspabi_srll_10>:
    e79e:	12 c3       	clrc			
    e7a0:	0d 10       	rrc	r13		;
    e7a2:	0c 10       	rrc	r12		;

0000e7a4 <__mspabi_srll_9>:
    e7a4:	12 c3       	clrc			
    e7a6:	0d 10       	rrc	r13		;
    e7a8:	0c 10       	rrc	r12		;

0000e7aa <__mspabi_srll_8>:
    e7aa:	12 c3       	clrc			
    e7ac:	0d 10       	rrc	r13		;
    e7ae:	0c 10       	rrc	r12		;

0000e7b0 <__mspabi_srll_7>:
    e7b0:	12 c3       	clrc			
    e7b2:	0d 10       	rrc	r13		;
    e7b4:	0c 10       	rrc	r12		;

0000e7b6 <__mspabi_srll_6>:
    e7b6:	12 c3       	clrc			
    e7b8:	0d 10       	rrc	r13		;
    e7ba:	0c 10       	rrc	r12		;

0000e7bc <__mspabi_srll_5>:
    e7bc:	12 c3       	clrc			
    e7be:	0d 10       	rrc	r13		;
    e7c0:	0c 10       	rrc	r12		;

0000e7c2 <__mspabi_srll_4>:
    e7c2:	12 c3       	clrc			
    e7c4:	0d 10       	rrc	r13		;
    e7c6:	0c 10       	rrc	r12		;

0000e7c8 <__mspabi_srll_3>:
    e7c8:	12 c3       	clrc			
    e7ca:	0d 10       	rrc	r13		;
    e7cc:	0c 10       	rrc	r12		;

0000e7ce <__mspabi_srll_2>:
    e7ce:	12 c3       	clrc			
    e7d0:	0d 10       	rrc	r13		;
    e7d2:	0c 10       	rrc	r12		;

0000e7d4 <__mspabi_srll_1>:
    e7d4:	12 c3       	clrc			
    e7d6:	0d 10       	rrc	r13		;
    e7d8:	0c 10       	rrc	r12		;
    e7da:	30 41       	ret			

0000e7dc <.L12>:
    e7dc:	3e 53       	add	#-1,	r14	;r3 As==11
    e7de:	12 c3       	clrc			
    e7e0:	0d 10       	rrc	r13		;
    e7e2:	0c 10       	rrc	r12		;

0000e7e4 <__mspabi_srll>:
    e7e4:	0e 93       	cmp	#0,	r14	;r3 As==00
    e7e6:	fa 23       	jnz	$-10     	;abs 0xe7dc
    e7e8:	30 41       	ret			

0000e7ea <memmove>:
    e7ea:	0d 9c       	cmp	r12,	r13	;
    e7ec:	0a 28       	jnc	$+22     	;abs 0xe802

0000e7ee <.L5>:
    e7ee:	0f 4c       	mov	r12,	r15	;
    e7f0:	0e 5c       	add	r12,	r14	;

0000e7f2 <.L3>:
    e7f2:	0e 9f       	cmp	r15,	r14	;
    e7f4:	0d 24       	jz	$+28     	;abs 0xe810

0000e7f6 <.LVL3>:
    e7f6:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    e7fa:	1f 53       	inc	r15		;

0000e7fc <.LVL4>:
    e7fc:	1d 53       	inc	r13		;
    e7fe:	30 40 f2 e7 	br	#0xe7f2		;

0000e802 <.L2>:
    e802:	0f 4d       	mov	r13,	r15	;
    e804:	0f 5e       	add	r14,	r15	;
    e806:	0c 9f       	cmp	r15,	r12	;
    e808:	f2 2f       	jc	$-26     	;abs 0xe7ee

0000e80a <.L4>:
    e80a:	3e 53       	add	#-1,	r14	;r3 As==11

0000e80c <.LVL7>:
    e80c:	3e 93       	cmp	#-1,	r14	;r3 As==11
    e80e:	01 20       	jnz	$+4      	;abs 0xe812

0000e810 <.L10>:
    e810:	30 41       	ret			

0000e812 <.L6>:
    e812:	0b 4c       	mov	r12,	r11	;
    e814:	0b 5e       	add	r14,	r11	;
    e816:	0f 4d       	mov	r13,	r15	;
    e818:	0f 5e       	add	r14,	r15	;
    e81a:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    e81e:	30 40 0a e8 	br	#0xe80a		;

0000e822 <memset>:
    e822:	0f 4c       	mov	r12,	r15	;
    e824:	0e 5c       	add	r12,	r14	;

0000e826 <.L2>:
    e826:	0f 9e       	cmp	r14,	r15	;
    e828:	01 20       	jnz	$+4      	;abs 0xe82c

0000e82a <.Loc.104.1>:
    e82a:	30 41       	ret			

0000e82c <.L3>:
    e82c:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    e830:	1f 53       	inc	r15		;

0000e832 <.LVL4>:
    e832:	30 40 26 e8 	br	#0xe826		;

0000e836 <L0>:
    e836:	30 41       	ret			

0000e838 <__do_global_ctors_aux>:
    e838:	0a 12       	push	r10		;
    e83a:	3a 40 08 e0 	mov	#57352,	r10	;#0xe008

0000e83e <.L2>:
    e83e:	2c 4a       	mov	@r10,	r12	;
    e840:	3c 93       	cmp	#-1,	r12	;r3 As==11
    e842:	02 20       	jnz	$+6      	;abs 0xe848
    e844:	3a 41       	pop	r10		;
    e846:	30 41       	ret			

0000e848 <.L3>:
    e848:	8c 12       	call	r12		;
    e84a:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    e84e:	30 40 3e e8 	br	#0xe83e		;

0000e852 <call___do_global_ctors_aux>:
    e852:	b0 12 16 e1 	call	#57622		;#0xe116
    e856:	b0 12 38 e8 	call	#59448		;#0xe838

0000e85a <L0>:
    e85a:	b0 12 4e e0 	call	#57422		;#0xe04e

0000e85e <.Loc.19.1>:
    e85e:	b0 12 40 e0 	call	#57408		;#0xe040

0000e862 <.Loc.20.1>:
    e862:	30 41       	ret			

0000e864 <__msp430_fini>:
    e864:	b0 12 5c e0 	call	#57436		;#0xe05c

0000e868 <L0>:
    e868:	b0 12 c8 e0 	call	#57544		;#0xe0c8

0000e86c <L0>:
    e86c:	30 41       	ret			
