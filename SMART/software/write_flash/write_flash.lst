
write_flash.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fae0 l    d  .keyfunction	00000000 .keyfunction
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000e000 l    d  .rodata	00000000 .rodata
0000e028 l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000292 l    d  .bss	00000000 .bss
000002a4 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000e088 l       .text	00000000 _msp430_run_array
0000e096 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 lib_a-impure.o
0000021a l     O .data	00000078 impure_data
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
0000e020 l     O .rodata	00000000 __CTOR_LIST__
0000e024 l     O .rodata	00000000 __DTOR_LIST__
0000e018 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000e94c l     O .text	00000000 __TMC_LIST__
0000e09c l     F .text	00000000 deregister_tm_clones
0000e0b6 l     F .text	00000000 register_tm_clones
0000e0e4 l     F .text	00000000 __do_global_dtors_aux
00000292 l     O .bss	00000000 completed.3056
00000294 l     O .bss	00000000 dtor_idx.3058
0000e132 l     F .text	00000000 call___do_global_dtors_aux
0000e132 l     F .text	00000000 frame_dummy
00000296 l     O .bss	00000000 object.3071
0000e14a l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000e022 l     O .rodata	00000000 __CTOR_END__
0000e018 l     O .rodata	00000000 __FRAME_END__
0000e916 l     F .text	00000000 __do_global_ctors_aux
0000e930 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 crt_callexit.o
00000000 l    df *ABS*	00000000 cprintf.c
00000206 l     O .data	00000011 hex
0000e1f2 l     F .text	00000028 tty_putc
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srai.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 ciosyscalls.o
00000000 l    df *ABS*	00000000 lib_a-errno.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /home/ise/Desktop/tmp/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000e7c4 g       .text	00000000 .hidden __mspabi_srli_9
0000e74a g       .text	00000000 .hidden __mspabi_srai_6
0000e754 g       .text	00000000 .hidden __mspabi_srai_1
0000e814 g       .text	00000000 .hidden __mspabi_srll_10
0000e7c0 g       .text	00000000 .hidden __mspabi_srli_10
0000e776 g       .text	00000000 .hidden __mspabi_sral_10
0000e766 g       .text	00000000 .hidden __mspabi_sral_14
0000e7ac g       .text	00000000 .hidden __mspabi_srli_15
0000e8c8 g     F .text	00000038 memmove
0000e7d8 g       .text	00000000 .hidden __mspabi_srli_4
0000e058 g     F .text	00000004 __crt0_call_exit
0000e65a g     F .text	00000040 .hidden udivmodhi4
0000e8c2 g     F .text	00000006 __errno
0000e77a g       .text	00000000 .hidden __mspabi_sral_9
0000e7cc g       .text	00000000 .hidden __mspabi_srli_7
0000e826 g       .text	00000000 .hidden __mspabi_srll_7
0000e83e g       .text	00000000 .hidden __mspabi_srll_3
0000e466 g     F .text	000001f4 cprintf
0000e786 g       .text	00000000 .hidden __mspabi_sral_6
0000e79a g       .text	00000000 .hidden __mspabi_sral_1
0000e72a g       .text	00000000 .hidden __mspabi_func_epilog_6
0000e868  w    F .text	00000006 getpid
0000e738 g       .text	00000000 .hidden __mspabi_srai_15
0000e21a g     F .text	0000001a cput_nibble
0000e94c g     O .text	00000000 .hidden __TMC_END__
0000e802 g       .text	00000000 .hidden __mspabi_srll_13
0000e026 g     O .rodata	00000000 .hidden __DTOR_END__
0000e01c g       .rodata	00000000 __fini_array_end
0000e7b8 g       .text	00000000 .hidden __mspabi_srli_12
0000e864  w    F .text	00000004 isatty
0000e752 g       .text	00000000 .hidden __mspabi_srai_2
0000e750 g       .text	00000000 .hidden __mspabi_srai_3
0000e028 g     F .text	00000004 __crt0_start
00000200 g     O .data	00000000 .hidden __dso_handle
0000e02c g     F .text	0000000e __crt0_init_bss
00000012 g       *ABS*	00000000 __bsssize
0000e742 g       .text	00000000 .hidden __mspabi_srai_10
0000e6e6 g     F .text	00000032 .hidden __mspabi_remi
0000e04e g     F .text	0000000a __crt0_call_init_then_main
0000e734 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000e250 g     F .text	00000040 cput_binary_byte
0000e8a6  w    F .text	0000000e lseek
0000e864  w    F .text	00000004 _isatty
0000e730 g       .text	00000000 .hidden __mspabi_func_epilog_3
0000e014 g     O .rodata	00000002 _global_impure_ptr
0000e832 g       .text	00000000 .hidden __mspabi_srll_5
0000e7f0 g       .text	00000000 .hidden __mspabi_srli
0000e2ac g     F .text	0000004c cput_hex_long
0000e80e g       .text	00000000 .hidden __mspabi_srll_11
0000fae0 g     F .keyfunction	0000004a smart_read_key
0000e7d4 g       .text	00000000 .hidden __mspabi_srli_5
0000e898  w    F .text	0000000e fstat
0000e8b4  w    F .text	0000000e kill
00000000  w      *UND*	00000000 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
000002a4 g       .noinit	00000000 end
0000e772 g       .text	00000000 .hidden __mspabi_sral_11
0000e762 g       .text	00000000 .hidden __mspabi_sral_15
0000e748 g       .text	00000000 .hidden __mspabi_srai_7
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0000e234 g     F .text	0000001c cput_hex_byte
0000e720 g     F .text	00000008 .hidden __mspabi_remu
0000e82c g       .text	00000000 .hidden __mspabi_srll_6
0000e78e g       .text	00000000 .hidden __mspabi_sral_4
0000e028 g       .text	00000000 _start
0000e290 g     F .text	0000001c cput_hex_word
0000e88a  w    F .text	0000000e read
0000e078 g     F .text	00000000 _msp430_run_fini_array
0000e7e4 g       .text	00000000 .hidden __mspabi_srli_1
0000e7fc g       .text	00000000 .hidden __mspabi_srll_14
0000e75c g       .text	00000000 .hidden __mspabi_srai
0000e73e g       .text	00000000 .hidden __mspabi_srai_12
0000e7b0 g       .text	00000000 .hidden __mspabi_srli_14
00000092 g       *ABS*	00000000 __romdatacopysize
0000e782 g       .text	00000000 .hidden __mspabi_sral_7
0000e746 g       .text	00000000 .hidden __mspabi_srai_8
0000e7bc g       .text	00000000 .hidden __mspabi_srli_11
0000e3b4 g     F .text	000000b2 cput_number
0000e796 g       .text	00000000 .hidden __mspabi_sral_2
0000e2f8 g     F .text	00000068 cput_hex_block
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
0000e01c g       .rodata	00000000 __fini_array_start
0000e69a g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *UND*	00000000 __sf_fake_stdin
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000e930 g       .text	00000000 __msp430_init
0000e900 g     F .text	00000014 memset
0000e16c g     F .text	00000086 main
0000e744 g       .text	00000000 .hidden __mspabi_srai_9
0000e740 g       .text	00000000 .hidden __mspabi_srai_11
0000e838 g       .text	00000000 .hidden __mspabi_srll_4
0000e01c g       .rodata	00000000 __init_array_end
0000e7e0 g       .text	00000000 .hidden __mspabi_srli_2
0000e7a6 g       .text	00000000 .hidden __mspabi_sral
0000e718 g     F .text	00000008 .hidden __mspabi_divu
00000000  w      *ABS*	00000000 __high_bsssize
00000204 g     O .data	00000002 key_possition
00000000  w      *ABS*	00000000 __rom_highdatastart
0000e94c g       .text	00000000 __msp430_fini_end
0000e77e g       .text	00000000 .hidden __mspabi_sral_8
0000e76a g       .text	00000000 .hidden __mspabi_sral_13
0000e14a g     F .text	00000022 delay
0000e808 g       .text	00000000 .hidden __mspabi_srll_12
0000e94c g       *ABS*	00000000 __romdatastart
0000e74e g       .text	00000000 .hidden __mspabi_srai_4
0000e05c g     F .text	00000000 _msp430_run_init_array
0000e7d0 g       .text	00000000 .hidden __mspabi_srli_6
00000218 g     O .data	00000002 _impure_ptr
0000e01c g       .rodata	00000000 __preinit_array_end
0000e7dc g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00000292 g       .bss	00000000 __bssstart
0000e72c g       .text	00000000 .hidden __mspabi_func_epilog_5
0000e73a g       .text	00000000 .hidden __mspabi_srai_14
00000600 g       .noinit	00000000 __stack
0000e81a g       .text	00000000 .hidden __mspabi_srll_9
0000e792 g       .text	00000000 .hidden __mspabi_sral_3
00000292 g       .data	00000000 _edata
0000e76e g       .text	00000000 .hidden __mspabi_sral_12
0000e942 g       .text	00000000 __msp430_init_end
0000e85a g       .text	00000000 .hidden __mspabi_srll
0000e360 g     F .text	00000054 cput_nibble_block
0000e860  w    F .text	00000004 exit
00000000  w      *ABS*	00000000 __high_bssstart
0000e7f6 g       .text	00000000 .hidden __mspabi_srll_15
00000000  w      *UND*	00000000 __sf_fake_stdout
0000e01c g       .rodata	00000000 __init_array_start
0000e860  w    F .text	00000004 _exit
0000e74c g       .text	00000000 .hidden __mspabi_srai_5
0000e86e  w    F .text	0000000e open
0000e73c g       .text	00000000 .hidden __mspabi_srai_13
0000e7b4 g       .text	00000000 .hidden __mspabi_srli_13
00000202 g     O .data	00000002 flash_possition
00000200 g       .data	00000000 __datastart
0000e820 g       .text	00000000 .hidden __mspabi_srll_8
0000e84a g       .text	00000000 .hidden __mspabi_srll_1
0000e01c g       .rodata	00000000 __preinit_array_start
0000e03a g     F .text	00000014 __crt0_movedata
0000e732 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000e78a g       .text	00000000 .hidden __mspabi_sral_5
0000e06a g     F .text	00000000 _msp430_run_preinit_array
0000e87c  w    F .text	0000000e close
0000e728 g       .text	00000000 .hidden __mspabi_func_epilog_7
0000e72e g       .text	00000000 .hidden __mspabi_func_epilog_4
0000e844 g       .text	00000000 .hidden __mspabi_srll_2
0000e942 g       .text	00000000 __msp430_fini
0000e7c8 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section .keyfunction:

0000fae0 <smart_read_key>:
      __nop();
   }
}

#define SMART  __attribute__((__section__(".keyfunction"), noinline))
void SMART smart_read_key () {
    fae0:	21 82       	sub	#4,	r1	;r2 As==10

0000fae2 <.LCFI1>:
    cprintf("C%d\n", *key_possition);
    fae2:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    fae6:	6c 4c       	mov.b	@r12,	r12	;
    fae8:	81 4c 02 00 	mov	r12,	2(r1)	;
    faec:	b1 40 00 e0 	mov	#57344,	0(r1)	;#0xe000
    faf0:	00 00 
    faf2:	b0 12 66 e4 	call	#58470		;#0xe466

0000faf6 <.Loc.20.1>:
    delay(500);
    faf6:	3c 40 f4 01 	mov	#500,	r12	;#0x01f4
    fafa:	b0 12 4a e1 	call	#57674		;#0xe14a

0000fafe <.Loc.22.1>:

    *key_possition = 42;
    fafe:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    fb02:	fc 40 2a 00 	mov.b	#42,	0(r12)	;#0x002a
    fb06:	00 00 

0000fb08 <.Loc.24.1>:

    cprintf("D%d\n", *key_possition);
    fb08:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    fb0c:	6c 4c       	mov.b	@r12,	r12	;
    fb0e:	81 4c 02 00 	mov	r12,	2(r1)	;
    fb12:	b1 40 05 e0 	mov	#57349,	0(r1)	;#0xe005
    fb16:	00 00 
    fb18:	b0 12 66 e4 	call	#58470		;#0xe466

0000fb1c <.Loc.25.1>:
    delay(500);
    fb1c:	3c 40 f4 01 	mov	#500,	r12	;#0x01f4
    fb20:	b0 12 4a e1 	call	#57674		;#0xe14a

0000fb24 <.Loc.26.1>:
}
    fb24:	03 43       	nop			
    fb26:	21 52       	add	#4,	r1	;r2 As==10
    fb28:	30 41       	ret			

Disassembly of section .text:

0000e028 <__crt0_start>:
    e028:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e02c <__crt0_init_bss>:
    e02c:	3c 40 92 02 	mov	#658,	r12	;#0x0292

0000e030 <.Loc.74.1>:
    e030:	0d 43       	clr	r13		;

0000e032 <.Loc.75.1>:
    e032:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000e036 <.Loc.79.1>:
    e036:	b0 12 00 e9 	call	#59648		;#0xe900

0000e03a <__crt0_movedata>:
    e03a:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e03e <.Loc.116.1>:
    e03e:	3d 40 4c e9 	mov	#59724,	r13	;#0xe94c

0000e042 <.Loc.119.1>:
    e042:	0d 9c       	cmp	r12,	r13	;

0000e044 <.Loc.120.1>:
    e044:	04 24       	jz	$+10     	;abs 0xe04e

0000e046 <.Loc.122.1>:
    e046:	3e 40 92 00 	mov	#146,	r14	;#0x0092

0000e04a <.Loc.124.1>:
    e04a:	b0 12 c8 e8 	call	#59592		;#0xe8c8

0000e04e <__crt0_call_init_then_main>:
    e04e:	b0 12 30 e9 	call	#59696		;#0xe930

0000e052 <.Loc.196.1>:
    e052:	0c 43       	clr	r12		;

0000e054 <.Loc.197.1>:
    e054:	b0 12 6c e1 	call	#57708		;#0xe16c

0000e058 <__crt0_call_exit>:
    e058:	b0 12 60 e8 	call	#59488		;#0xe860

0000e05c <_msp430_run_init_array>:
    e05c:	34 40 1c e0 	mov	#57372,	r4	;#0xe01c

0000e060 <.Loc.224.1>:
    e060:	35 40 1c e0 	mov	#57372,	r5	;#0xe01c

0000e064 <.Loc.225.1>:
    e064:	26 43       	mov	#2,	r6	;r3 As==10

0000e066 <.Loc.226.1>:
    e066:	30 40 88 e0 	br	#0xe088		;

0000e06a <_msp430_run_preinit_array>:
    e06a:	34 40 1c e0 	mov	#57372,	r4	;#0xe01c

0000e06e <.Loc.232.1>:
    e06e:	35 40 1c e0 	mov	#57372,	r5	;#0xe01c

0000e072 <.Loc.233.1>:
    e072:	26 43       	mov	#2,	r6	;r3 As==10

0000e074 <.Loc.234.1>:
    e074:	30 40 88 e0 	br	#0xe088		;

0000e078 <_msp430_run_fini_array>:
    e078:	34 40 1c e0 	mov	#57372,	r4	;#0xe01c

0000e07c <.Loc.240.1>:
    e07c:	35 40 1c e0 	mov	#57372,	r5	;#0xe01c

0000e080 <.Loc.241.1>:
    e080:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e084 <.Loc.242.1>:
    e084:	30 40 88 e0 	br	#0xe088		;

0000e088 <_msp430_run_array>:
    e088:	05 94       	cmp	r4,	r5	;

0000e08a <.Loc.246.1>:
    e08a:	05 24       	jz	$+12     	;abs 0xe096

0000e08c <.Loc.247.1>:
    e08c:	27 44       	mov	@r4,	r7	;

0000e08e <.Loc.248.1>:
    e08e:	04 56       	add	r6,	r4	;

0000e090 <.Loc.249.1>:
    e090:	a7 12       	call	@r7		;

0000e092 <.Loc.250.1>:
    e092:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe088

0000e096 <_msp430_run_done>:
    e096:	30 41       	ret			

0000e098 <L0>:
    e098:	30 41       	ret			
    e09a:	30 41       	ret			

0000e09c <deregister_tm_clones>:
    e09c:	3c 40 4c e9 	mov	#59724,	r12	;#0xe94c
    e0a0:	3c 90 4c e9 	cmp	#59724,	r12	;#0xe94c
    e0a4:	07 24       	jz	$+16     	;abs 0xe0b4
    e0a6:	3d 40 00 00 	mov	#0,	r13	;
    e0aa:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0ac:	03 24       	jz	$+8      	;abs 0xe0b4
    e0ae:	3c 40 4c e9 	mov	#59724,	r12	;#0xe94c
    e0b2:	8d 12       	call	r13		;

0000e0b4 <.L1>:
    e0b4:	30 41       	ret			

0000e0b6 <register_tm_clones>:
    e0b6:	0a 12       	push	r10		;
    e0b8:	3a 40 4c e9 	mov	#59724,	r10	;#0xe94c
    e0bc:	3a 80 4c e9 	sub	#59724,	r10	;#0xe94c
    e0c0:	0a 11       	rra	r10		;
    e0c2:	0c 4a       	mov	r10,	r12	;
    e0c4:	b0 12 ac e7 	call	#59308		;#0xe7ac
    e0c8:	0c 5a       	add	r10,	r12	;
    e0ca:	0d 4c       	mov	r12,	r13	;
    e0cc:	0d 11       	rra	r13		;
    e0ce:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0d0:	07 24       	jz	$+16     	;abs 0xe0e0
    e0d2:	3e 40 00 00 	mov	#0,	r14	;
    e0d6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e0d8:	03 24       	jz	$+8      	;abs 0xe0e0
    e0da:	3c 40 4c e9 	mov	#59724,	r12	;#0xe94c
    e0de:	8e 12       	call	r14		;

0000e0e0 <.L9>:
    e0e0:	3a 41       	pop	r10		;
    e0e2:	30 41       	ret			

0000e0e4 <__do_global_dtors_aux>:
    e0e4:	0a 12       	push	r10		;
    e0e6:	09 12       	push	r9		;
    e0e8:	c2 93 92 02 	cmp.b	#0,	&0x0292	;r3 As==00
    e0ec:	17 20       	jnz	$+48     	;abs 0xe11c
    e0ee:	3a 40 26 e0 	mov	#57382,	r10	;#0xe026
    e0f2:	3a 80 24 e0 	sub	#57380,	r10	;#0xe024
    e0f6:	0a 11       	rra	r10		;
    e0f8:	3a 53       	add	#-1,	r10	;r3 As==11
    e0fa:	39 40 24 e0 	mov	#57380,	r9	;#0xe024

0000e0fe <.L19>:
    e0fe:	1c 42 94 02 	mov	&0x0294,r12	;0x0294
    e102:	0c 9a       	cmp	r10,	r12	;
    e104:	0d 28       	jnc	$+28     	;abs 0xe120
    e106:	b0 12 9c e0 	call	#57500		;#0xe09c
    e10a:	3d 40 00 00 	mov	#0,	r13	;
    e10e:	0d 93       	cmp	#0,	r13	;r3 As==00
    e110:	03 24       	jz	$+8      	;abs 0xe118
    e112:	3c 40 18 e0 	mov	#57368,	r12	;#0xe018
    e116:	8d 12       	call	r13		;

0000e118 <.L21>:
    e118:	d2 43 92 02 	mov.b	#1,	&0x0292	;r3 As==01

0000e11c <.L17>:
    e11c:	30 40 32 e7 	br	#0xe732		;

0000e120 <.L20>:
    e120:	1c 53       	inc	r12		;
    e122:	82 4c 94 02 	mov	r12,	&0x0294	;
    e126:	0c 5c       	rla	r12		;
    e128:	0c 59       	add	r9,	r12	;
    e12a:	2c 4c       	mov	@r12,	r12	;
    e12c:	8c 12       	call	r12		;
    e12e:	30 40 fe e0 	br	#0xe0fe		;

0000e132 <call___do_global_dtors_aux>:
    e132:	3e 40 00 00 	mov	#0,	r14	;
    e136:	0e 93       	cmp	#0,	r14	;r3 As==00
    e138:	05 24       	jz	$+12     	;abs 0xe144
    e13a:	3d 40 96 02 	mov	#662,	r13	;#0x0296
    e13e:	3c 40 18 e0 	mov	#57368,	r12	;#0xe018
    e142:	8e 12       	call	r14		;

0000e144 <.L27>:
    e144:	b0 12 b6 e0 	call	#57526		;#0xe0b6
    e148:	30 41       	ret			

0000e14a <delay>:
#include <stdio.h>

char * flash_possition = (void *) 0xFADE;
char * key_possition = (void *) 0xFEE0;

void delay(unsigned int d) {
    e14a:	21 83       	decd	r1		;

0000e14c <.LCFI0>:
    e14c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e150 <.Loc.11.1>:
   while(d--) {
    e150:	30 40 58 e1 	br	#0xe158		;

0000e154 <.L3>:
      __nop();
    e154:	03 43       	nop			

0000e156 <.Loc.13.1>:
      __nop();
    e156:	03 43       	nop			

0000e158 <.L2>:

char * flash_possition = (void *) 0xFADE;
char * key_possition = (void *) 0xFEE0;

void delay(unsigned int d) {
   while(d--) {
    e158:	2c 41       	mov	@r1,	r12	;
    e15a:	0d 4c       	mov	r12,	r13	;
    e15c:	3d 53       	add	#-1,	r13	;r3 As==11
    e15e:	81 4d 00 00 	mov	r13,	0(r1)	;
    e162:	0c 93       	cmp	#0,	r12	;r3 As==00
    e164:	f7 23       	jnz	$-16     	;abs 0xe154

0000e166 <.Loc.15.1>:
      __nop();
      __nop();
   }
}
    e166:	03 43       	nop			
    e168:	21 53       	incd	r1		;
    e16a:	30 41       	ret			

0000e16c <main>:

    cprintf("D%d\n", *key_possition);
    delay(500);
}

int main(void) {
    e16c:	21 82       	sub	#4,	r1	;r2 As==10

0000e16e <.LCFI2>:
    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e16e:	3c 40 20 01 	mov	#288,	r12	;#0x0120
    e172:	bc 40 80 5a 	mov	#23168,	0(r12)	;#0x5a80
    e176:	00 00 

0000e178 <.Loc.31.1>:

    UART_BAUD = BAUD;                   // Init UART
    e178:	7c 40 82 00 	mov.b	#130,	r12	;#0x0082
    e17c:	bc 40 11 04 	mov	#1041,	0(r12)	;#0x0411
    e180:	00 00 

0000e182 <.Loc.32.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e182:	7c 40 80 00 	mov.b	#128,	r12	;#0x0080
    e186:	fc 40 11 00 	mov.b	#17,	0(r12)	;#0x0011
    e18a:	00 00 

0000e18c <.Loc.34.1>:
    // cprintf("1");
    if (*flash_possition != 42) {
    e18c:	1c 42 02 02 	mov	&0x0202,r12	;0x0202
    e190:	6c 4c       	mov.b	@r12,	r12	;
    e192:	7c 90 2a 00 	cmp.b	#42,	r12	;#0x002a
    e196:	28 24       	jz	$+82     	;abs 0xe1e8

0000e198 <.Loc.36.1>:
        // write in program memory
        *flash_possition = 42;
    e198:	1c 42 02 02 	mov	&0x0202,r12	;0x0202
    e19c:	fc 40 2a 00 	mov.b	#42,	0(r12)	;#0x002a
    e1a0:	00 00 

0000e1a2 <.Loc.37.1>:
        cprintf("A%d\n", *flash_possition);
    e1a2:	1c 42 02 02 	mov	&0x0202,r12	;0x0202
    e1a6:	6c 4c       	mov.b	@r12,	r12	;
    e1a8:	81 4c 02 00 	mov	r12,	2(r1)	;
    e1ac:	b1 40 0a e0 	mov	#57354,	0(r1)	;#0xe00a
    e1b0:	00 00 
    e1b2:	b0 12 66 e4 	call	#58470		;#0xe466

0000e1b6 <.Loc.38.1>:
        delay(1000);
    e1b6:	3c 40 e8 03 	mov	#1000,	r12	;#0x03e8
    e1ba:	b0 12 4a e1 	call	#57674		;#0xe14a

0000e1be <.Loc.40.1>:
        // write smart key, cause reset
        *key_possition = 42;
    e1be:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    e1c2:	fc 40 2a 00 	mov.b	#42,	0(r12)	;#0x002a
    e1c6:	00 00 

0000e1c8 <.Loc.41.1>:
        cprintf("B%d\n", *key_possition);
    e1c8:	1c 42 04 02 	mov	&0x0204,r12	;0x0204
    e1cc:	6c 4c       	mov.b	@r12,	r12	;
    e1ce:	81 4c 02 00 	mov	r12,	2(r1)	;
    e1d2:	b1 40 0f e0 	mov	#57359,	0(r1)	;#0xe00f
    e1d6:	00 00 
    e1d8:	b0 12 66 e4 	call	#58470		;#0xe466

0000e1dc <.Loc.42.1>:
        delay(500);
    e1dc:	3c 40 f4 01 	mov	#500,	r12	;#0x01f4
    e1e0:	b0 12 4a e1 	call	#57674		;#0xe14a
    e1e4:	30 40 ec e1 	br	#0xe1ec		;

0000e1e8 <.L6>:
    } else {
        // call smart to read first byte in key
        smart_read_key();
    e1e8:	b0 12 e0 fa 	call	#64224		;#0xfae0

0000e1ec <.L7>:
    e1ec:	4c 43       	clr.b	r12		;

0000e1ee <.Loc.48.1>:
    }

}
    e1ee:	21 52       	add	#4,	r1	;r2 As==10
    e1f0:	30 41       	ret			

0000e1f2 <tty_putc>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {
    e1f2:	21 83       	decd	r1		;

0000e1f4 <.LCFI0>:
    e1f4:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e1f8 <.Loc.14.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e1f8:	03 43       	nop			

0000e1fa <.L2>:
    e1fa:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e1fe:	6c 4c       	mov.b	@r12,	r12	;
    e200:	7c f2       	and.b	#8,	r12	;r2 As==11
    e202:	0c 93       	cmp	#0,	r12	;r3 As==00
    e204:	fa 23       	jnz	$-10     	;abs 0xe1fa

0000e206 <.Loc.17.1>:

  // Write the output character
  UART_TXD = txdata;
    e206:	7c 40 84 00 	mov.b	#132,	r12	;#0x0084
    e20a:	2d 41       	mov	@r1,	r13	;
    e20c:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    e210:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000e214 <.Loc.19.1>:

  return 0;
    e214:	4c 43       	clr.b	r12		;

0000e216 <.Loc.20.1>:
}
    e216:	21 53       	incd	r1		;
    e218:	30 41       	ret			

0000e21a <cput_nibble>:

void
cput_nibble (int n) {
    e21a:	21 83       	decd	r1		;

0000e21c <.LCFI1>:
    e21c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e220 <.Loc.24.1>:
  tty_putc (hex[n&0x0f]);
    e220:	2c 41       	mov	@r1,	r12	;
    e222:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e226:	5c 4c 06 02 	mov.b	518(r12),r12	;0x00206
    e22a:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e22e <.Loc.25.1>:
}
    e22e:	03 43       	nop			
    e230:	21 53       	incd	r1		;
    e232:	30 41       	ret			

0000e234 <cput_hex_byte>:

void
cput_hex_byte (int n) {
    e234:	21 83       	decd	r1		;

0000e236 <.LCFI2>:
    e236:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e23a <.Loc.29.1>:
  cput_nibble (n >> 4);
    e23a:	2c 41       	mov	@r1,	r12	;
    e23c:	b0 12 4e e7 	call	#59214		;#0xe74e
    e240:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e244 <.Loc.30.1>:
  cput_nibble (n);
    e244:	2c 41       	mov	@r1,	r12	;
    e246:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e24a <.Loc.31.1>:
}
    e24a:	03 43       	nop			
    e24c:	21 53       	incd	r1		;
    e24e:	30 41       	ret			

0000e250 <cput_binary_byte>:

void
cput_binary_byte (int n) {
    e250:	21 82       	sub	#4,	r1	;r2 As==10

0000e252 <.LCFI3>:
    e252:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e256 <.Loc.36.1>:
  int i;
  for (i=7; i>=0; i--)
    e256:	b1 40 07 00 	mov	#7,	2(r1)	;
    e25a:	02 00 
    e25c:	30 40 84 e2 	br	#0xe284		;

0000e260 <.L10>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e260:	2c 41       	mov	@r1,	r12	;
    e262:	1d 41 02 00 	mov	2(r1),	r13	;
    e266:	b0 12 5c e7 	call	#59228		;#0xe75c
    e26a:	5c f3       	and.b	#1,	r12	;r3 As==01
    e26c:	0c 93       	cmp	#0,	r12	;r3 As==00
    e26e:	04 24       	jz	$+10     	;abs 0xe278

0000e270 <.Loc.37.1>:
    e270:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031
    e274:	30 40 7c e2 	br	#0xe27c		;

0000e278 <.L8>:
    e278:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e27c <.L9>:
    e27c:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e280 <.Loc.36.1>:
}

void
cput_binary_byte (int n) {
  int i;
  for (i=7; i>=0; i--)
    e280:	b1 53 02 00 	add	#-1,	2(r1)	;r3 As==11

0000e284 <.L7>:
    e284:	81 93 02 00 	cmp	#0,	2(r1)	;r3 As==00
    e288:	eb 37       	jge	$-40     	;abs 0xe260

0000e28a <.Loc.38.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e28a:	03 43       	nop			
    e28c:	21 52       	add	#4,	r1	;r2 As==10
    e28e:	30 41       	ret			

0000e290 <cput_hex_word>:

void
cput_hex_word (int n) {
    e290:	21 83       	decd	r1		;

0000e292 <.LCFI4>:
    e292:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e296 <.Loc.42.1>:
  cput_hex_byte (n >> 8);
    e296:	2c 41       	mov	@r1,	r12	;
    e298:	b0 12 46 e7 	call	#59206		;#0xe746
    e29c:	b0 12 34 e2 	call	#57908		;#0xe234

0000e2a0 <.Loc.43.1>:
  cput_hex_byte (n);
    e2a0:	2c 41       	mov	@r1,	r12	;
    e2a2:	b0 12 34 e2 	call	#57908		;#0xe234

0000e2a6 <.Loc.44.1>:
}
    e2a6:	03 43       	nop			
    e2a8:	21 53       	incd	r1		;
    e2aa:	30 41       	ret			

0000e2ac <cput_hex_long>:

void
cput_hex_long (long int n) {
    e2ac:	21 82       	sub	#4,	r1	;r2 As==10

0000e2ae <.LCFI5>:
    e2ae:	81 4c 00 00 	mov	r12,	0(r1)	;
    e2b2:	81 4d 02 00 	mov	r13,	2(r1)	;

0000e2b6 <.Loc.48.1>:
  cput_hex_byte (n >> 24);
    e2b6:	2c 41       	mov	@r1,	r12	;
    e2b8:	1d 41 02 00 	mov	2(r1),	r13	;
    e2bc:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e2c0:	4f 43       	clr.b	r15		;
    e2c2:	b0 12 a6 e7 	call	#59302		;#0xe7a6
    e2c6:	b0 12 34 e2 	call	#57908		;#0xe234

0000e2ca <.Loc.49.1>:
  cput_hex_byte (n >> 16);
    e2ca:	2c 41       	mov	@r1,	r12	;
    e2cc:	1d 41 02 00 	mov	2(r1),	r13	;
    e2d0:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e2d4:	4f 43       	clr.b	r15		;
    e2d6:	b0 12 a6 e7 	call	#59302		;#0xe7a6
    e2da:	b0 12 34 e2 	call	#57908		;#0xe234

0000e2de <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e2de:	2c 41       	mov	@r1,	r12	;
    e2e0:	1d 41 02 00 	mov	2(r1),	r13	;
    e2e4:	b0 12 7e e7 	call	#59262		;#0xe77e
    e2e8:	b0 12 34 e2 	call	#57908		;#0xe234

0000e2ec <.Loc.51.1>:
  cput_hex_byte (n);
    e2ec:	2c 41       	mov	@r1,	r12	;
    e2ee:	b0 12 34 e2 	call	#57908		;#0xe234

0000e2f2 <.Loc.52.1>:
}
    e2f2:	03 43       	nop			
    e2f4:	21 52       	add	#4,	r1	;r2 As==10
    e2f6:	30 41       	ret			

0000e2f8 <cput_hex_block>:

void
cput_hex_block (char *block, int n) {
    e2f8:	31 80 06 00 	sub	#6,	r1	;

0000e2fc <.LCFI6>:
    e2fc:	81 4c 02 00 	mov	r12,	2(r1)	;
    e300:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e304 <.Loc.56.1>:
  int i = 0;
    e304:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e308 <.Loc.57.1>:
  while (n)
    e308:	30 40 4c e3 	br	#0xe34c		;

0000e30c <.L18>:
    {
      cput_hex_byte (*block++);
    e30c:	1c 41 02 00 	mov	2(r1),	r12	;
    e310:	0d 4c       	mov	r12,	r13	;
    e312:	1d 53       	inc	r13		;
    e314:	81 4d 02 00 	mov	r13,	2(r1)	;
    e318:	6c 4c       	mov.b	@r12,	r12	;
    e31a:	b0 12 34 e2 	call	#57908		;#0xe234

0000e31e <.Loc.60.1>:
      if (--n == 0)
    e31e:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e322:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e326:	17 24       	jz	$+48     	;abs 0xe356

0000e328 <.Loc.62.1>:
	break;
      i++;
    e328:	91 53 04 00 	inc	4(r1)		;

0000e32c <.Loc.63.1>:
      if ((i & 7) == 0)
    e32c:	1c 41 04 00 	mov	4(r1),	r12	;
    e330:	7c f0 07 00 	and.b	#7,	r12	;
    e334:	0c 93       	cmp	#0,	r12	;r3 As==00
    e336:	06 20       	jnz	$+14     	;abs 0xe344

0000e338 <.Loc.64.1>:
	tty_putc (' ');
    e338:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e33c:	b0 12 f2 e1 	call	#57842		;#0xe1f2
    e340:	30 40 4c e3 	br	#0xe34c		;

0000e344 <.L17>:
      else
	tty_putc (':');
    e344:	7c 40 3a 00 	mov.b	#58,	r12	;#0x003a
    e348:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e34c <.L14>:
}

void
cput_hex_block (char *block, int n) {
  int i = 0;
  while (n)
    e34c:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e350:	dd 23       	jnz	$-68     	;abs 0xe30c

0000e352 <.Loc.68.1>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e352:	30 40 58 e3 	br	#0xe358		;

0000e356 <.L19>:
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
    e356:	03 43       	nop			

0000e358 <.L16>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e358:	03 43       	nop			
    e35a:	31 50 06 00 	add	#6,	r1	;
    e35e:	30 41       	ret			

0000e360 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n) {
    e360:	31 80 06 00 	sub	#6,	r1	;

0000e364 <.LCFI7>:
    e364:	81 4c 02 00 	mov	r12,	2(r1)	;
    e368:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e36c <.Loc.72.1>:
  int i = 0;
    e36c:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e370 <.Loc.73.1>:
  while (n)
    e370:	30 40 a0 e3 	br	#0xe3a0		;

0000e374 <.L24>:
    {
      cput_nibble (*block);
    e374:	1c 41 02 00 	mov	2(r1),	r12	;
    e378:	6c 4c       	mov.b	@r12,	r12	;
    e37a:	b0 12 1a e2 	call	#57882		;#0xe21a

0000e37e <.Loc.76.1>:
      if (--n == 0)
    e37e:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e382:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e386:	11 24       	jz	$+36     	;abs 0xe3aa

0000e388 <.Loc.78.1>:
	break;
      i++;
    e388:	91 53 04 00 	inc	4(r1)		;

0000e38c <.Loc.79.1>:
      if ((i & 7) == 0)
    e38c:	1c 41 04 00 	mov	4(r1),	r12	;
    e390:	7c f0 07 00 	and.b	#7,	r12	;
    e394:	0c 93       	cmp	#0,	r12	;r3 As==00
    e396:	04 20       	jnz	$+10     	;abs 0xe3a0

0000e398 <.Loc.80.1>:
	tty_putc (' ');
    e398:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e39c:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e3a0 <.L21>:
}

void
cput_nibble_block (char *block, int n) {
  int i = 0;
  while (n)
    e3a0:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e3a4:	e7 23       	jnz	$-48     	;abs 0xe374

0000e3a6 <.Loc.82.1>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e3a6:	30 40 ac e3 	br	#0xe3ac		;

0000e3aa <.L25>:
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
	break;
    e3aa:	03 43       	nop			

0000e3ac <.L23>:
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e3ac:	03 43       	nop			
    e3ae:	31 50 06 00 	add	#6,	r1	;
    e3b2:	30 41       	ret			

0000e3b4 <cput_number>:

void
cput_number (int n) {
    e3b4:	31 80 18 00 	sub	#24,	r1	;#0x0018

0000e3b8 <.LCFI8>:
    e3b8:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3bc <.Loc.87.1>:
  char buf[20];
  int i = 0;
    e3bc:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016

0000e3c0 <.Loc.88.1>:
  if (n < 0)
    e3c0:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e3c4:	25 34       	jge	$+76     	;abs 0xe410

0000e3c6 <.Loc.90.1>:
    {
      tty_putc ('-');
    e3c6:	7c 40 2d 00 	mov.b	#45,	r12	;#0x002d
    e3ca:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e3ce <.Loc.91.1>:
      n = -n;
    e3ce:	4c 43       	clr.b	r12		;
    e3d0:	2c 81       	sub	@r1,	r12	;
    e3d2:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3d6 <.Loc.93.1>:
    }
  while (n > 9)
    e3d6:	30 40 10 e4 	br	#0xe410		;

0000e3da <.L29>:
    {
      buf[i++] = (n%10) + '0';
    e3da:	2c 41       	mov	@r1,	r12	;
    e3dc:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e3e0:	b0 12 e6 e6 	call	#59110		;#0xe6e6
    e3e4:	4d 4c       	mov.b	r12,	r13	;
    e3e6:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e3ea:	0e 4c       	mov	r12,	r14	;
    e3ec:	1e 53       	inc	r14		;
    e3ee:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e3f2:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e3f6:	4e 4d       	mov.b	r13,	r14	;
    e3f8:	0d 41       	mov	r1,	r13	;
    e3fa:	2d 53       	incd	r13		;
    e3fc:	0c 5d       	add	r13,	r12	;
    e3fe:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e402 <.Loc.96.1>:
      n /= 10;
    e402:	2c 41       	mov	@r1,	r12	;
    e404:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e408:	b0 12 9a e6 	call	#59034		;#0xe69a
    e40c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e410 <.L28>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e410:	7c 40 09 00 	mov.b	#9,	r12	;
    e414:	2c 91       	cmp	@r1,	r12	;
    e416:	e1 3b       	jl	$-60     	;abs 0xe3da

0000e418 <.Loc.98.1>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e418:	2c 41       	mov	@r1,	r12	;
    e41a:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e41e:	b0 12 e6 e6 	call	#59110		;#0xe6e6
    e422:	4d 4c       	mov.b	r12,	r13	;
    e424:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e428:	0e 4c       	mov	r12,	r14	;
    e42a:	1e 53       	inc	r14		;
    e42c:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e430:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e434:	4e 4d       	mov.b	r13,	r14	;
    e436:	0d 41       	mov	r1,	r13	;
    e438:	2d 53       	incd	r13		;
    e43a:	0c 5d       	add	r13,	r12	;
    e43c:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e440 <.Loc.99.1>:
  while (i > 0)
    e440:	30 40 56 e4 	br	#0xe456		;

0000e444 <.L31>:
    tty_putc (buf[--i]);
    e444:	b1 53 16 00 	add	#-1,	22(r1)	;r3 As==11, 0x0016
    e448:	0c 41       	mov	r1,	r12	;
    e44a:	2c 53       	incd	r12		;
    e44c:	1c 51 16 00 	add	22(r1),	r12	;0x00016
    e450:	6c 4c       	mov.b	@r12,	r12	;
    e452:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e456 <.L30>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e456:	4c 43       	clr.b	r12		;
    e458:	1c 91 16 00 	cmp	22(r1),	r12	;0x00016
    e45c:	f3 3b       	jl	$-24     	;abs 0xe444

0000e45e <.Loc.101.1>:
    tty_putc (buf[--i]);
}
    e45e:	03 43       	nop			
    e460:	31 50 18 00 	add	#24,	r1	;#0x0018
    e464:	30 41       	ret			

0000e466 <cprintf>:

void
cprintf (const char *fmt, ...) {
    e466:	31 80 06 00 	sub	#6,	r1	;

0000e46a <.LCFI9>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e46a:	0c 41       	mov	r1,	r12	;
    e46c:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    e470:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e474 <.Loc.111.1>:

  while (*fmt) {
    e474:	30 40 48 e6 	br	#0xe648		;

0000e478 <.L49>:
      if (*fmt != '%')
    e478:	1c 41 08 00 	mov	8(r1),	r12	;
    e47c:	6c 4c       	mov.b	@r12,	r12	;
    e47e:	7c 90 25 00 	cmp.b	#37,	r12	;#0x0025
    e482:	07 24       	jz	$+16     	;abs 0xe492

0000e484 <.Loc.113.1>:
	tty_putc (*fmt);
    e484:	1c 41 08 00 	mov	8(r1),	r12	;
    e488:	6c 4c       	mov.b	@r12,	r12	;
    e48a:	b0 12 f2 e1 	call	#57842		;#0xe1f2
    e48e:	30 40 44 e6 	br	#0xe644		;

0000e492 <.L34>:
      else
	switch (*++fmt)
    e492:	91 53 08 00 	inc	8(r1)		;
    e496:	1c 41 08 00 	mov	8(r1),	r12	;
    e49a:	6c 4c       	mov.b	@r12,	r12	;
    e49c:	3c 90 64 00 	cmp	#100,	r12	;#0x0064
    e4a0:	44 24       	jz	$+138    	;abs 0xe52a
    e4a2:	7d 40 64 00 	mov.b	#100,	r13	;#0x0064
    e4a6:	0d 9c       	cmp	r12,	r13	;
    e4a8:	14 38       	jl	$+42     	;abs 0xe4d2
    e4aa:	3c 90 42 00 	cmp	#66,	r12	;#0x0042
    e4ae:	5b 24       	jz	$+184    	;abs 0xe566
    e4b0:	7d 40 42 00 	mov.b	#66,	r13	;#0x0042
    e4b4:	0d 9c       	cmp	r12,	r13	;
    e4b6:	05 38       	jl	$+12     	;abs 0xe4c2
    e4b8:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e4bc:	21 24       	jz	$+68     	;abs 0xe500
    e4be:	30 40 44 e6 	br	#0xe644		;

0000e4c2 <.L39>:
    e4c2:	3c 90 62 00 	cmp	#98,	r12	;#0x0062
    e4c6:	40 24       	jz	$+130    	;abs 0xe548
    e4c8:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    e4cc:	1f 24       	jz	$+64     	;abs 0xe50c
    e4ce:	30 40 44 e6 	br	#0xe644		;

0000e4d2 <.L37>:
    e4d2:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    e4d6:	a9 24       	jz	$+340    	;abs 0xe62a
    e4d8:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    e4dc:	0d 9c       	cmp	r12,	r13	;
    e4de:	08 38       	jl	$+18     	;abs 0xe4f0
    e4e0:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    e4e4:	5e 24       	jz	$+190    	;abs 0xe5a2
    e4e6:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    e4ea:	87 24       	jz	$+272    	;abs 0xe5fa
    e4ec:	30 40 44 e6 	br	#0xe644		;

0000e4f0 <.L44>:
    e4f0:	3c 90 77 00 	cmp	#119,	r12	;#0x0077
    e4f4:	47 24       	jz	$+144    	;abs 0xe584
    e4f6:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    e4fa:	67 24       	jz	$+208    	;abs 0xe5ca
    e4fc:	30 40 44 e6 	br	#0xe644		;

0000e500 <.L40>:
	  {
	  case '%':
	    tty_putc ('%');
    e500:	7c 40 25 00 	mov.b	#37,	r12	;#0x0025
    e504:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e508 <.Loc.119.1>:
	    break;
    e508:	30 40 44 e6 	br	#0xe644		;

0000e50c <.L42>:
	  case 'c':
	    i = va_arg (v, int);
    e50c:	2c 41       	mov	@r1,	r12	;
    e50e:	1c 53       	inc	r12		;
    e510:	1c c3       	bic	#1,	r12	;r3 As==01
    e512:	0d 4c       	mov	r12,	r13	;
    e514:	2d 53       	incd	r13		;
    e516:	81 4d 00 00 	mov	r13,	0(r1)	;
    e51a:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e51e <.Loc.122.1>:
	    tty_putc(i);
    e51e:	1c 41 02 00 	mov	2(r1),	r12	;
    e522:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e526 <.Loc.123.1>:
	    break;
    e526:	30 40 44 e6 	br	#0xe644		;

0000e52a <.L36>:
	  case 'd':
	    i = va_arg (v, int);
    e52a:	2c 41       	mov	@r1,	r12	;
    e52c:	1c 53       	inc	r12		;
    e52e:	1c c3       	bic	#1,	r12	;r3 As==01
    e530:	0d 4c       	mov	r12,	r13	;
    e532:	2d 53       	incd	r13		;
    e534:	81 4d 00 00 	mov	r13,	0(r1)	;
    e538:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e53c <.Loc.126.1>:
	    cput_number(i);
    e53c:	1c 41 02 00 	mov	2(r1),	r12	;
    e540:	b0 12 b4 e3 	call	#58292		;#0xe3b4

0000e544 <.Loc.127.1>:
	    break;
    e544:	30 40 44 e6 	br	#0xe644		;

0000e548 <.L41>:
	  case 'b':
	    i = va_arg (v, int);
    e548:	2c 41       	mov	@r1,	r12	;
    e54a:	1c 53       	inc	r12		;
    e54c:	1c c3       	bic	#1,	r12	;r3 As==01
    e54e:	0d 4c       	mov	r12,	r13	;
    e550:	2d 53       	incd	r13		;
    e552:	81 4d 00 00 	mov	r13,	0(r1)	;
    e556:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e55a <.Loc.130.1>:
	    cput_hex_byte (i);
    e55a:	1c 41 02 00 	mov	2(r1),	r12	;
    e55e:	b0 12 34 e2 	call	#57908		;#0xe234

0000e562 <.Loc.131.1>:
	    break;
    e562:	30 40 44 e6 	br	#0xe644		;

0000e566 <.L38>:
	  case 'B':
	    i = va_arg (v, int);
    e566:	2c 41       	mov	@r1,	r12	;
    e568:	1c 53       	inc	r12		;
    e56a:	1c c3       	bic	#1,	r12	;r3 As==01
    e56c:	0d 4c       	mov	r12,	r13	;
    e56e:	2d 53       	incd	r13		;
    e570:	81 4d 00 00 	mov	r13,	0(r1)	;
    e574:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e578 <.Loc.134.1>:
	    cput_binary_byte (i);
    e578:	1c 41 02 00 	mov	2(r1),	r12	;
    e57c:	b0 12 50 e2 	call	#57936		;#0xe250

0000e580 <.Loc.135.1>:
	    break;
    e580:	30 40 44 e6 	br	#0xe644		;

0000e584 <.L47>:
	  case 'w':
	    i = va_arg (v, int);
    e584:	2c 41       	mov	@r1,	r12	;
    e586:	1c 53       	inc	r12		;
    e588:	1c c3       	bic	#1,	r12	;r3 As==01
    e58a:	0d 4c       	mov	r12,	r13	;
    e58c:	2d 53       	incd	r13		;
    e58e:	81 4d 00 00 	mov	r13,	0(r1)	;
    e592:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e596 <.Loc.138.1>:
	    cput_hex_word (i);
    e596:	1c 41 02 00 	mov	2(r1),	r12	;
    e59a:	b0 12 90 e2 	call	#58000		;#0xe290

0000e59e <.Loc.139.1>:
	    break;
    e59e:	30 40 44 e6 	br	#0xe644		;

0000e5a2 <.L45>:
	  case 'l':
	    i = va_arg (v, int);
    e5a2:	2c 41       	mov	@r1,	r12	;
    e5a4:	1c 53       	inc	r12		;
    e5a6:	1c c3       	bic	#1,	r12	;r3 As==01
    e5a8:	0d 4c       	mov	r12,	r13	;
    e5aa:	2d 53       	incd	r13		;
    e5ac:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5b0:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5b4 <.Loc.142.1>:
	    cput_hex_long (i);
    e5b4:	1e 41 02 00 	mov	2(r1),	r14	;
    e5b8:	0c 4e       	mov	r14,	r12	;
    e5ba:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e5be:	0d 7d       	subc	r13,	r13	;
    e5c0:	3d e3       	inv	r13		;
    e5c2:	b0 12 ac e2 	call	#58028		;#0xe2ac

0000e5c6 <.Loc.143.1>:
	    break;
    e5c6:	30 40 44 e6 	br	#0xe644		;

0000e5ca <.L48>:
	  case 'x':
	    s = va_arg (v, char *);
    e5ca:	2c 41       	mov	@r1,	r12	;
    e5cc:	0d 4c       	mov	r12,	r13	;
    e5ce:	2d 53       	incd	r13		;
    e5d0:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5d4:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e5d8 <.Loc.146.1>:
	    i = va_arg (v, int);
    e5d8:	2c 41       	mov	@r1,	r12	;
    e5da:	1c 53       	inc	r12		;
    e5dc:	1c c3       	bic	#1,	r12	;r3 As==01
    e5de:	0d 4c       	mov	r12,	r13	;
    e5e0:	2d 53       	incd	r13		;
    e5e2:	81 4d 00 00 	mov	r13,	0(r1)	;
    e5e6:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e5ea <.Loc.147.1>:
	    cput_hex_block (s, i);
    e5ea:	1d 41 02 00 	mov	2(r1),	r13	;
    e5ee:	1c 41 04 00 	mov	4(r1),	r12	;
    e5f2:	b0 12 f8 e2 	call	#58104		;#0xe2f8

0000e5f6 <.Loc.148.1>:
	    break;
    e5f6:	30 40 44 e6 	br	#0xe644		;

0000e5fa <.L46>:
	  case 'n':
	    s = va_arg (v, char *);
    e5fa:	2c 41       	mov	@r1,	r12	;
    e5fc:	0d 4c       	mov	r12,	r13	;
    e5fe:	2d 53       	incd	r13		;
    e600:	81 4d 00 00 	mov	r13,	0(r1)	;
    e604:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e608 <.Loc.151.1>:
	    i = va_arg (v, int);
    e608:	2c 41       	mov	@r1,	r12	;
    e60a:	1c 53       	inc	r12		;
    e60c:	1c c3       	bic	#1,	r12	;r3 As==01
    e60e:	0d 4c       	mov	r12,	r13	;
    e610:	2d 53       	incd	r13		;
    e612:	81 4d 00 00 	mov	r13,	0(r1)	;
    e616:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e61a <.Loc.152.1>:
	    cput_nibble_block (s, i);
    e61a:	1d 41 02 00 	mov	2(r1),	r13	;
    e61e:	1c 41 04 00 	mov	4(r1),	r12	;
    e622:	b0 12 60 e3 	call	#58208		;#0xe360

0000e626 <.Loc.153.1>:
	    break;
    e626:	30 40 44 e6 	br	#0xe644		;

0000e62a <.L43>:
	  case 's':
	    s = va_arg (v, char *);
    e62a:	2c 41       	mov	@r1,	r12	;
    e62c:	0d 4c       	mov	r12,	r13	;
    e62e:	2d 53       	incd	r13		;
    e630:	81 4d 00 00 	mov	r13,	0(r1)	;
    e634:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e638 <.Loc.156.1>:
	    tty_putc (s[0]);
    e638:	1c 41 04 00 	mov	4(r1),	r12	;
    e63c:	6c 4c       	mov.b	@r12,	r12	;
    e63e:	b0 12 f2 e1 	call	#57842		;#0xe1f2

0000e642 <.Loc.157.1>:
	    break;
    e642:	03 43       	nop			

0000e644 <.L35>:
	  }
      fmt ++;
    e644:	91 53 08 00 	inc	8(r1)		;

0000e648 <.L33>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt) {
    e648:	1c 41 08 00 	mov	8(r1),	r12	;
    e64c:	6c 4c       	mov.b	@r12,	r12	;
    e64e:	0c 93       	cmp	#0,	r12	;r3 As==00
    e650:	13 23       	jnz	$-472    	;abs 0xe478

0000e652 <.Loc.161.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e652:	03 43       	nop			
    e654:	31 50 06 00 	add	#6,	r1	;
    e658:	30 41       	ret			

0000e65a <udivmodhi4>:
    e65a:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e65e <.Loc.35.1>:
    e65e:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e660 <.L2>:
    e660:	0d 9c       	cmp	r12,	r13	;
    e662:	08 28       	jnc	$+18     	;abs 0xe674

0000e664 <.L15>:
    e664:	4f 43       	clr.b	r15		;

0000e666 <.L4>:
    e666:	0b 93       	cmp	#0,	r11	;r3 As==00
    e668:	0e 20       	jnz	$+30     	;abs 0xe686

0000e66a <.L5>:
    e66a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e66c:	01 24       	jz	$+4      	;abs 0xe670
    e66e:	0f 4c       	mov	r12,	r15	;

0000e670 <.L1>:
    e670:	0c 4f       	mov	r15,	r12	;
    e672:	30 41       	ret			

0000e674 <.L3>:
    e674:	3f 53       	add	#-1,	r15	;r3 As==11

0000e676 <.Loc.38.1>:
    e676:	0f 93       	cmp	#0,	r15	;r3 As==00
    e678:	f8 27       	jz	$-14     	;abs 0xe66a

0000e67a <.Loc.38.1>:
    e67a:	0d 93       	cmp	#0,	r13	;r3 As==00
    e67c:	f3 3b       	jl	$-24     	;abs 0xe664

0000e67e <.Loc.40.1>:
    e67e:	0d 5d       	rla	r13		;

0000e680 <.Loc.41.1>:
    e680:	0b 5b       	rla	r11		;
    e682:	30 40 60 e6 	br	#0xe660		;

0000e686 <.L9>:
    e686:	0c 9d       	cmp	r13,	r12	;
    e688:	02 28       	jnc	$+6      	;abs 0xe68e

0000e68a <.Loc.47.1>:
    e68a:	0c 8d       	sub	r13,	r12	;

0000e68c <.Loc.48.1>:
    e68c:	0f db       	bis	r11,	r15	;

0000e68e <.L8>:
    e68e:	12 c3       	clrc			
    e690:	0b 10       	rrc	r11		;

0000e692 <.Loc.51.1>:
    e692:	12 c3       	clrc			
    e694:	0d 10       	rrc	r13		;
    e696:	30 40 66 e6 	br	#0xe666		;

0000e69a <__mspabi_divi>:
    e69a:	0a 12       	push	r10		;

0000e69c <.LCFI0>:
    e69c:	0f 4c       	mov	r12,	r15	;
    e69e:	0e 4d       	mov	r13,	r14	;

0000e6a0 <.LVL14>:
    e6a0:	3b 40 5a e6 	mov	#58970,	r11	;#0xe65a

0000e6a4 <.Loc.64.1>:
    e6a4:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6a6:	1a 34       	jge	$+54     	;abs 0xe6dc

0000e6a8 <.Loc.66.1>:
    e6a8:	4c 43       	clr.b	r12		;

0000e6aa <.LVL15>:
    e6aa:	0c 8f       	sub	r15,	r12	;
    e6ac:	0f 4c       	mov	r12,	r15	;

0000e6ae <.LVL16>:
    e6ae:	0d 93       	cmp	#0,	r13	;r3 As==00
    e6b0:	0d 34       	jge	$+28     	;abs 0xe6cc

0000e6b2 <.Loc.67.1>:
    e6b2:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e6b4 <.L21>:
    e6b4:	0d 43       	clr	r13		;
    e6b6:	0d 8e       	sub	r14,	r13	;

0000e6b8 <.LVL18>:
    e6b8:	4e 43       	clr.b	r14		;

0000e6ba <.LVL19>:
    e6ba:	0c 4f       	mov	r15,	r12	;

0000e6bc <.LVL20>:
    e6bc:	8b 12       	call	r11		;

0000e6be <.LVL21>:
    e6be:	1a 93       	cmp	#1,	r10	;r3 As==01
    e6c0:	03 24       	jz	$+8      	;abs 0xe6c8

0000e6c2 <.L20>:
    e6c2:	4d 43       	clr.b	r13		;
    e6c4:	0d 8c       	sub	r12,	r13	;
    e6c6:	0c 4d       	mov	r13,	r12	;

0000e6c8 <.L16>:
    e6c8:	3a 41       	pop	r10		;
    e6ca:	30 41       	ret			

0000e6cc <.L18>:
    e6cc:	4e 43       	clr.b	r14		;
    e6ce:	8b 12       	call	r11		;

0000e6d0 <.LVL25>:
    e6d0:	30 40 c2 e6 	br	#0xe6c2		;

0000e6d4 <.L27>:
    e6d4:	4e 43       	clr.b	r14		;
    e6d6:	8b 12       	call	r11		;

0000e6d8 <.LVL27>:
    e6d8:	30 40 c8 e6 	br	#0xe6c8		;

0000e6dc <.L17>:
    e6dc:	0d 93       	cmp	#0,	r13	;r3 As==00
    e6de:	fa 37       	jge	$-10     	;abs 0xe6d4

0000e6e0 <.Loc.61.1>:
    e6e0:	4a 43       	clr.b	r10		;
    e6e2:	30 40 b4 e6 	br	#0xe6b4		;

0000e6e6 <__mspabi_remi>:
    e6e6:	0a 12       	push	r10		;

0000e6e8 <.LCFI1>:
    e6e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    e6ea:	13 34       	jge	$+40     	;abs 0xe712

0000e6ec <.Loc.92.1>:
    e6ec:	4e 43       	clr.b	r14		;
    e6ee:	0e 8c       	sub	r12,	r14	;
    e6f0:	0c 4e       	mov	r14,	r12	;

0000e6f2 <.LVL31>:
    e6f2:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e6f4 <.L29>:
    e6f4:	0d 93       	cmp	#0,	r13	;r3 As==00
    e6f6:	03 34       	jge	$+8      	;abs 0xe6fe
    e6f8:	4e 43       	clr.b	r14		;
    e6fa:	0e 8d       	sub	r13,	r14	;
    e6fc:	0d 4e       	mov	r14,	r13	;

0000e6fe <.L30>:
    e6fe:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e700:	b0 12 5a e6 	call	#58970		;#0xe65a

0000e704 <.LVL34>:
    e704:	0a 93       	cmp	#0,	r10	;r3 As==00
    e706:	03 24       	jz	$+8      	;abs 0xe70e

0000e708 <.LVL35>:
    e708:	4d 43       	clr.b	r13		;
    e70a:	0d 8c       	sub	r12,	r13	;
    e70c:	0c 4d       	mov	r13,	r12	;

0000e70e <.L28>:
    e70e:	3a 41       	pop	r10		;
    e710:	30 41       	ret			

0000e712 <.L32>:
    e712:	4a 43       	clr.b	r10		;
    e714:	30 40 f4 e6 	br	#0xe6f4		;

0000e718 <__mspabi_divu>:
    e718:	4e 43       	clr.b	r14		;
    e71a:	b0 12 5a e6 	call	#58970		;#0xe65a

0000e71e <.LVL39>:
    e71e:	30 41       	ret			

0000e720 <__mspabi_remu>:
    e720:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e722:	b0 12 5a e6 	call	#58970		;#0xe65a

0000e726 <.LVL41>:
    e726:	30 41       	ret			

0000e728 <__mspabi_func_epilog_7>:
    e728:	34 41       	pop	r4		;

0000e72a <__mspabi_func_epilog_6>:
    e72a:	35 41       	pop	r5		;

0000e72c <__mspabi_func_epilog_5>:
    e72c:	36 41       	pop	r6		;

0000e72e <__mspabi_func_epilog_4>:
    e72e:	37 41       	pop	r7		;

0000e730 <__mspabi_func_epilog_3>:
    e730:	38 41       	pop	r8		;

0000e732 <__mspabi_func_epilog_2>:
    e732:	39 41       	pop	r9		;

0000e734 <__mspabi_func_epilog_1>:
    e734:	3a 41       	pop	r10		;
    e736:	30 41       	ret			

0000e738 <__mspabi_srai_15>:
    e738:	0c 11       	rra	r12		;

0000e73a <__mspabi_srai_14>:
    e73a:	0c 11       	rra	r12		;

0000e73c <__mspabi_srai_13>:
    e73c:	0c 11       	rra	r12		;

0000e73e <__mspabi_srai_12>:
    e73e:	0c 11       	rra	r12		;

0000e740 <__mspabi_srai_11>:
    e740:	0c 11       	rra	r12		;

0000e742 <__mspabi_srai_10>:
    e742:	0c 11       	rra	r12		;

0000e744 <__mspabi_srai_9>:
    e744:	0c 11       	rra	r12		;

0000e746 <__mspabi_srai_8>:
    e746:	0c 11       	rra	r12		;

0000e748 <__mspabi_srai_7>:
    e748:	0c 11       	rra	r12		;

0000e74a <__mspabi_srai_6>:
    e74a:	0c 11       	rra	r12		;

0000e74c <__mspabi_srai_5>:
    e74c:	0c 11       	rra	r12		;

0000e74e <__mspabi_srai_4>:
    e74e:	0c 11       	rra	r12		;

0000e750 <__mspabi_srai_3>:
    e750:	0c 11       	rra	r12		;

0000e752 <__mspabi_srai_2>:
    e752:	0c 11       	rra	r12		;

0000e754 <__mspabi_srai_1>:
    e754:	0c 11       	rra	r12		;
    e756:	30 41       	ret			

0000e758 <.L11>:
    e758:	3d 53       	add	#-1,	r13	;r3 As==11
    e75a:	0c 11       	rra	r12		;

0000e75c <__mspabi_srai>:
    e75c:	0d 93       	cmp	#0,	r13	;r3 As==00
    e75e:	fc 23       	jnz	$-6      	;abs 0xe758
    e760:	30 41       	ret			

0000e762 <__mspabi_sral_15>:
    e762:	0d 11       	rra	r13		;
    e764:	0c 10       	rrc	r12		;

0000e766 <__mspabi_sral_14>:
    e766:	0d 11       	rra	r13		;
    e768:	0c 10       	rrc	r12		;

0000e76a <__mspabi_sral_13>:
    e76a:	0d 11       	rra	r13		;
    e76c:	0c 10       	rrc	r12		;

0000e76e <__mspabi_sral_12>:
    e76e:	0d 11       	rra	r13		;
    e770:	0c 10       	rrc	r12		;

0000e772 <__mspabi_sral_11>:
    e772:	0d 11       	rra	r13		;
    e774:	0c 10       	rrc	r12		;

0000e776 <__mspabi_sral_10>:
    e776:	0d 11       	rra	r13		;
    e778:	0c 10       	rrc	r12		;

0000e77a <__mspabi_sral_9>:
    e77a:	0d 11       	rra	r13		;
    e77c:	0c 10       	rrc	r12		;

0000e77e <__mspabi_sral_8>:
    e77e:	0d 11       	rra	r13		;
    e780:	0c 10       	rrc	r12		;

0000e782 <__mspabi_sral_7>:
    e782:	0d 11       	rra	r13		;
    e784:	0c 10       	rrc	r12		;

0000e786 <__mspabi_sral_6>:
    e786:	0d 11       	rra	r13		;
    e788:	0c 10       	rrc	r12		;

0000e78a <__mspabi_sral_5>:
    e78a:	0d 11       	rra	r13		;
    e78c:	0c 10       	rrc	r12		;

0000e78e <__mspabi_sral_4>:
    e78e:	0d 11       	rra	r13		;
    e790:	0c 10       	rrc	r12		;

0000e792 <__mspabi_sral_3>:
    e792:	0d 11       	rra	r13		;
    e794:	0c 10       	rrc	r12		;

0000e796 <__mspabi_sral_2>:
    e796:	0d 11       	rra	r13		;
    e798:	0c 10       	rrc	r12		;

0000e79a <__mspabi_sral_1>:
    e79a:	0d 11       	rra	r13		;
    e79c:	0c 10       	rrc	r12		;
    e79e:	30 41       	ret			

0000e7a0 <.L12>:
    e7a0:	3e 53       	add	#-1,	r14	;r3 As==11
    e7a2:	0d 11       	rra	r13		;
    e7a4:	0c 10       	rrc	r12		;

0000e7a6 <__mspabi_sral>:
    e7a6:	0e 93       	cmp	#0,	r14	;r3 As==00
    e7a8:	fb 23       	jnz	$-8      	;abs 0xe7a0
    e7aa:	30 41       	ret			

0000e7ac <__mspabi_srli_15>:
    e7ac:	12 c3       	clrc			
    e7ae:	0c 10       	rrc	r12		;

0000e7b0 <__mspabi_srli_14>:
    e7b0:	12 c3       	clrc			
    e7b2:	0c 10       	rrc	r12		;

0000e7b4 <__mspabi_srli_13>:
    e7b4:	12 c3       	clrc			
    e7b6:	0c 10       	rrc	r12		;

0000e7b8 <__mspabi_srli_12>:
    e7b8:	12 c3       	clrc			
    e7ba:	0c 10       	rrc	r12		;

0000e7bc <__mspabi_srli_11>:
    e7bc:	12 c3       	clrc			
    e7be:	0c 10       	rrc	r12		;

0000e7c0 <__mspabi_srli_10>:
    e7c0:	12 c3       	clrc			
    e7c2:	0c 10       	rrc	r12		;

0000e7c4 <__mspabi_srli_9>:
    e7c4:	12 c3       	clrc			
    e7c6:	0c 10       	rrc	r12		;

0000e7c8 <__mspabi_srli_8>:
    e7c8:	12 c3       	clrc			
    e7ca:	0c 10       	rrc	r12		;

0000e7cc <__mspabi_srli_7>:
    e7cc:	12 c3       	clrc			
    e7ce:	0c 10       	rrc	r12		;

0000e7d0 <__mspabi_srli_6>:
    e7d0:	12 c3       	clrc			
    e7d2:	0c 10       	rrc	r12		;

0000e7d4 <__mspabi_srli_5>:
    e7d4:	12 c3       	clrc			
    e7d6:	0c 10       	rrc	r12		;

0000e7d8 <__mspabi_srli_4>:
    e7d8:	12 c3       	clrc			
    e7da:	0c 10       	rrc	r12		;

0000e7dc <__mspabi_srli_3>:
    e7dc:	12 c3       	clrc			
    e7de:	0c 10       	rrc	r12		;

0000e7e0 <__mspabi_srli_2>:
    e7e0:	12 c3       	clrc			
    e7e2:	0c 10       	rrc	r12		;

0000e7e4 <__mspabi_srli_1>:
    e7e4:	12 c3       	clrc			
    e7e6:	0c 10       	rrc	r12		;
    e7e8:	30 41       	ret			

0000e7ea <.L11>:
    e7ea:	3d 53       	add	#-1,	r13	;r3 As==11
    e7ec:	12 c3       	clrc			
    e7ee:	0c 10       	rrc	r12		;

0000e7f0 <__mspabi_srli>:
    e7f0:	0d 93       	cmp	#0,	r13	;r3 As==00
    e7f2:	fb 23       	jnz	$-8      	;abs 0xe7ea
    e7f4:	30 41       	ret			

0000e7f6 <__mspabi_srll_15>:
    e7f6:	12 c3       	clrc			
    e7f8:	0d 10       	rrc	r13		;
    e7fa:	0c 10       	rrc	r12		;

0000e7fc <__mspabi_srll_14>:
    e7fc:	12 c3       	clrc			
    e7fe:	0d 10       	rrc	r13		;
    e800:	0c 10       	rrc	r12		;

0000e802 <__mspabi_srll_13>:
    e802:	12 c3       	clrc			
    e804:	0d 10       	rrc	r13		;
    e806:	0c 10       	rrc	r12		;

0000e808 <__mspabi_srll_12>:
    e808:	12 c3       	clrc			
    e80a:	0d 10       	rrc	r13		;
    e80c:	0c 10       	rrc	r12		;

0000e80e <__mspabi_srll_11>:
    e80e:	12 c3       	clrc			
    e810:	0d 10       	rrc	r13		;
    e812:	0c 10       	rrc	r12		;

0000e814 <__mspabi_srll_10>:
    e814:	12 c3       	clrc			
    e816:	0d 10       	rrc	r13		;
    e818:	0c 10       	rrc	r12		;

0000e81a <__mspabi_srll_9>:
    e81a:	12 c3       	clrc			
    e81c:	0d 10       	rrc	r13		;
    e81e:	0c 10       	rrc	r12		;

0000e820 <__mspabi_srll_8>:
    e820:	12 c3       	clrc			
    e822:	0d 10       	rrc	r13		;
    e824:	0c 10       	rrc	r12		;

0000e826 <__mspabi_srll_7>:
    e826:	12 c3       	clrc			
    e828:	0d 10       	rrc	r13		;
    e82a:	0c 10       	rrc	r12		;

0000e82c <__mspabi_srll_6>:
    e82c:	12 c3       	clrc			
    e82e:	0d 10       	rrc	r13		;
    e830:	0c 10       	rrc	r12		;

0000e832 <__mspabi_srll_5>:
    e832:	12 c3       	clrc			
    e834:	0d 10       	rrc	r13		;
    e836:	0c 10       	rrc	r12		;

0000e838 <__mspabi_srll_4>:
    e838:	12 c3       	clrc			
    e83a:	0d 10       	rrc	r13		;
    e83c:	0c 10       	rrc	r12		;

0000e83e <__mspabi_srll_3>:
    e83e:	12 c3       	clrc			
    e840:	0d 10       	rrc	r13		;
    e842:	0c 10       	rrc	r12		;

0000e844 <__mspabi_srll_2>:
    e844:	12 c3       	clrc			
    e846:	0d 10       	rrc	r13		;
    e848:	0c 10       	rrc	r12		;

0000e84a <__mspabi_srll_1>:
    e84a:	12 c3       	clrc			
    e84c:	0d 10       	rrc	r13		;
    e84e:	0c 10       	rrc	r12		;
    e850:	30 41       	ret			

0000e852 <.L12>:
    e852:	3e 53       	add	#-1,	r14	;r3 As==11
    e854:	12 c3       	clrc			
    e856:	0d 10       	rrc	r13		;
    e858:	0c 10       	rrc	r12		;

0000e85a <__mspabi_srll>:
    e85a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e85c:	fa 23       	jnz	$-10     	;abs 0xe852
    e85e:	30 41       	ret			

0000e860 <_exit>:
    e860:	30 40 60 e8 	br	#0xe860		;

0000e864 <_isatty>:
    e864:	1c 43       	mov	#1,	r12	;r3 As==01

0000e866 <.Loc.59.1>:
    e866:	30 41       	ret			

0000e868 <getpid>:
    e868:	3c 40 2a 00 	mov	#42,	r12	;#0x002a

0000e86c <.Loc.65.1>:
    e86c:	30 41       	ret			

0000e86e <open>:
    e86e:	b0 12 c2 e8 	call	#59586		;#0xe8c2
    e872:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    e876:	00 00 
    e878:	3c 43       	mov	#-1,	r12	;r3 As==11
    e87a:	30 41       	ret			

0000e87c <close>:
    e87c:	b0 12 c2 e8 	call	#59586		;#0xe8c2
    e880:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    e884:	00 00 
    e886:	3c 43       	mov	#-1,	r12	;r3 As==11
    e888:	30 41       	ret			

0000e88a <read>:
    e88a:	b0 12 c2 e8 	call	#59586		;#0xe8c2
    e88e:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    e892:	00 00 
    e894:	3c 43       	mov	#-1,	r12	;r3 As==11
    e896:	30 41       	ret			

0000e898 <fstat>:
    e898:	b0 12 c2 e8 	call	#59586		;#0xe8c2
    e89c:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    e8a0:	00 00 
    e8a2:	3c 43       	mov	#-1,	r12	;r3 As==11
    e8a4:	30 41       	ret			

0000e8a6 <lseek>:
    e8a6:	b0 12 c2 e8 	call	#59586		;#0xe8c2
    e8aa:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    e8ae:	00 00 
    e8b0:	3c 43       	mov	#-1,	r12	;r3 As==11
    e8b2:	30 41       	ret			

0000e8b4 <kill>:
    e8b4:	b0 12 c2 e8 	call	#59586		;#0xe8c2
    e8b8:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    e8bc:	00 00 
    e8be:	3c 43       	mov	#-1,	r12	;r3 As==11
    e8c0:	30 41       	ret			

0000e8c2 <__errno>:
    e8c2:	1c 42 18 02 	mov	&0x0218,r12	;0x0218
    e8c6:	30 41       	ret			

0000e8c8 <memmove>:
    e8c8:	0d 9c       	cmp	r12,	r13	;
    e8ca:	0a 28       	jnc	$+22     	;abs 0xe8e0

0000e8cc <.L5>:
    e8cc:	0f 4c       	mov	r12,	r15	;
    e8ce:	0e 5c       	add	r12,	r14	;

0000e8d0 <.L3>:
    e8d0:	0e 9f       	cmp	r15,	r14	;
    e8d2:	0d 24       	jz	$+28     	;abs 0xe8ee

0000e8d4 <.LVL3>:
    e8d4:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    e8d8:	1f 53       	inc	r15		;

0000e8da <.LVL4>:
    e8da:	1d 53       	inc	r13		;
    e8dc:	30 40 d0 e8 	br	#0xe8d0		;

0000e8e0 <.L2>:
    e8e0:	0f 4d       	mov	r13,	r15	;
    e8e2:	0f 5e       	add	r14,	r15	;
    e8e4:	0c 9f       	cmp	r15,	r12	;
    e8e6:	f2 2f       	jc	$-26     	;abs 0xe8cc

0000e8e8 <.L4>:
    e8e8:	3e 53       	add	#-1,	r14	;r3 As==11

0000e8ea <.LVL7>:
    e8ea:	3e 93       	cmp	#-1,	r14	;r3 As==11
    e8ec:	01 20       	jnz	$+4      	;abs 0xe8f0

0000e8ee <.L10>:
    e8ee:	30 41       	ret			

0000e8f0 <.L6>:
    e8f0:	0b 4c       	mov	r12,	r11	;
    e8f2:	0b 5e       	add	r14,	r11	;
    e8f4:	0f 4d       	mov	r13,	r15	;
    e8f6:	0f 5e       	add	r14,	r15	;
    e8f8:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    e8fc:	30 40 e8 e8 	br	#0xe8e8		;

0000e900 <memset>:
    e900:	0f 4c       	mov	r12,	r15	;
    e902:	0e 5c       	add	r12,	r14	;

0000e904 <.L2>:
    e904:	0f 9e       	cmp	r14,	r15	;
    e906:	01 20       	jnz	$+4      	;abs 0xe90a

0000e908 <.Loc.104.1>:
    e908:	30 41       	ret			

0000e90a <.L3>:
    e90a:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    e90e:	1f 53       	inc	r15		;

0000e910 <.LVL4>:
    e910:	30 40 04 e9 	br	#0xe904		;

0000e914 <L0>:
    e914:	30 41       	ret			

0000e916 <__do_global_ctors_aux>:
    e916:	0a 12       	push	r10		;
    e918:	3a 40 20 e0 	mov	#57376,	r10	;#0xe020

0000e91c <.L2>:
    e91c:	2c 4a       	mov	@r10,	r12	;
    e91e:	3c 93       	cmp	#-1,	r12	;r3 As==11
    e920:	02 20       	jnz	$+6      	;abs 0xe926
    e922:	3a 41       	pop	r10		;
    e924:	30 41       	ret			

0000e926 <.L3>:
    e926:	8c 12       	call	r12		;
    e928:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    e92c:	30 40 1c e9 	br	#0xe91c		;

0000e930 <call___do_global_ctors_aux>:
    e930:	b0 12 32 e1 	call	#57650		;#0xe132
    e934:	b0 12 16 e9 	call	#59670		;#0xe916

0000e938 <L0>:
    e938:	b0 12 6a e0 	call	#57450		;#0xe06a

0000e93c <.Loc.19.1>:
    e93c:	b0 12 5c e0 	call	#57436		;#0xe05c

0000e940 <.Loc.20.1>:
    e940:	30 41       	ret			

0000e942 <__msp430_fini>:
    e942:	b0 12 78 e0 	call	#57464		;#0xe078

0000e946 <L0>:
    e946:	b0 12 e4 e0 	call	#57572		;#0xe0e4

0000e94a <L0>:
    e94a:	30 41       	ret			
