
smart.elf:     file format elf32-msp430


Disassembly of section .text:

0000e070 <__crt0_start>:
    e070:	31 40 00 06 	mov	#1536,	r1	;#0x0600

0000e074 <__crt0_init_bss>:
    e074:	3c 40 14 02 	mov	#532,	r12	;#0x0214

0000e078 <.Loc.74.1>:
    e078:	0d 43       	clr	r13		;

0000e07a <.Loc.75.1>:
    e07a:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000e07e <.Loc.79.1>:
    e07e:	b0 12 94 ea 	call	#60052		;#0xea94

0000e082 <__crt0_movedata>:
    e082:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000e086 <.Loc.116.1>:
    e086:	3d 40 e0 ea 	mov	#60128,	r13	;#0xeae0

0000e08a <.Loc.119.1>:
    e08a:	0d 9c       	cmp	r12,	r13	;

0000e08c <.Loc.120.1>:
    e08c:	04 24       	jz	$+10     	;abs 0xe096

0000e08e <.Loc.122.1>:
    e08e:	3e 40 14 00 	mov	#20,	r14	;#0x0014

0000e092 <.Loc.124.1>:
    e092:	b0 12 5c ea 	call	#59996		;#0xea5c

0000e096 <__crt0_call_init_then_main>:
    e096:	b0 12 c4 ea 	call	#60100		;#0xeac4

0000e09a <.Loc.196.1>:
    e09a:	0c 43       	clr	r12		;

0000e09c <.Loc.197.1>:
    e09c:	b0 12 54 e3 	call	#58196		;#0xe354

0000e0a0 <_msp430_run_init_array>:
    e0a0:	34 40 64 e0 	mov	#57444,	r4	;#0xe064

0000e0a4 <.Loc.224.1>:
    e0a4:	35 40 64 e0 	mov	#57444,	r5	;#0xe064

0000e0a8 <.Loc.225.1>:
    e0a8:	26 43       	mov	#2,	r6	;r3 As==10

0000e0aa <.Loc.226.1>:
    e0aa:	30 40 cc e0 	br	#0xe0cc		;

0000e0ae <_msp430_run_preinit_array>:
    e0ae:	34 40 64 e0 	mov	#57444,	r4	;#0xe064

0000e0b2 <.Loc.232.1>:
    e0b2:	35 40 64 e0 	mov	#57444,	r5	;#0xe064

0000e0b6 <.Loc.233.1>:
    e0b6:	26 43       	mov	#2,	r6	;r3 As==10

0000e0b8 <.Loc.234.1>:
    e0b8:	30 40 cc e0 	br	#0xe0cc		;

0000e0bc <_msp430_run_fini_array>:
    e0bc:	34 40 64 e0 	mov	#57444,	r4	;#0xe064

0000e0c0 <.Loc.240.1>:
    e0c0:	35 40 64 e0 	mov	#57444,	r5	;#0xe064

0000e0c4 <.Loc.241.1>:
    e0c4:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

0000e0c8 <.Loc.242.1>:
    e0c8:	30 40 cc e0 	br	#0xe0cc		;

0000e0cc <_msp430_run_array>:
    e0cc:	05 94       	cmp	r4,	r5	;

0000e0ce <.Loc.246.1>:
    e0ce:	05 24       	jz	$+12     	;abs 0xe0da

0000e0d0 <.Loc.247.1>:
    e0d0:	27 44       	mov	@r4,	r7	;

0000e0d2 <.Loc.248.1>:
    e0d2:	04 56       	add	r6,	r4	;

0000e0d4 <.Loc.249.1>:
    e0d4:	a7 12       	call	@r7		;

0000e0d6 <.Loc.250.1>:
    e0d6:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xe0cc

0000e0da <_msp430_run_done>:
    e0da:	30 41       	ret			

0000e0dc <L0>:
    e0dc:	30 41       	ret			
    e0de:	30 41       	ret			

0000e0e0 <deregister_tm_clones>:
    e0e0:	3c 40 e0 ea 	mov	#60128,	r12	;#0xeae0
    e0e4:	3c 90 e0 ea 	cmp	#60128,	r12	;#0xeae0
    e0e8:	07 24       	jz	$+16     	;abs 0xe0f8
    e0ea:	3d 40 00 00 	mov	#0,	r13	;
    e0ee:	0d 93       	cmp	#0,	r13	;r3 As==00
    e0f0:	03 24       	jz	$+8      	;abs 0xe0f8
    e0f2:	3c 40 e0 ea 	mov	#60128,	r12	;#0xeae0
    e0f6:	8d 12       	call	r13		;

0000e0f8 <.L1>:
    e0f8:	30 41       	ret			

0000e0fa <register_tm_clones>:
    e0fa:	0a 12       	push	r10		;
    e0fc:	3a 40 e0 ea 	mov	#60128,	r10	;#0xeae0
    e100:	3a 80 e0 ea 	sub	#60128,	r10	;#0xeae0
    e104:	0a 11       	rra	r10		;
    e106:	0c 4a       	mov	r10,	r12	;
    e108:	b0 12 92 e9 	call	#59794		;#0xe992
    e10c:	0c 5a       	add	r10,	r12	;
    e10e:	0d 4c       	mov	r12,	r13	;
    e110:	0d 11       	rra	r13		;
    e112:	0d 93       	cmp	#0,	r13	;r3 As==00
    e114:	07 24       	jz	$+16     	;abs 0xe124
    e116:	3e 40 00 00 	mov	#0,	r14	;
    e11a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e11c:	03 24       	jz	$+8      	;abs 0xe124
    e11e:	3c 40 e0 ea 	mov	#60128,	r12	;#0xeae0
    e122:	8e 12       	call	r14		;

0000e124 <.L9>:
    e124:	3a 41       	pop	r10		;
    e126:	30 41       	ret			

0000e128 <__do_global_dtors_aux>:
    e128:	0a 12       	push	r10		;
    e12a:	09 12       	push	r9		;
    e12c:	c2 93 14 02 	cmp.b	#0,	&0x0214	;r3 As==00
    e130:	17 20       	jnz	$+48     	;abs 0xe160
    e132:	3a 40 6e e0 	mov	#57454,	r10	;#0xe06e
    e136:	3a 80 6c e0 	sub	#57452,	r10	;#0xe06c
    e13a:	0a 11       	rra	r10		;
    e13c:	3a 53       	add	#-1,	r10	;r3 As==11
    e13e:	39 40 6c e0 	mov	#57452,	r9	;#0xe06c

0000e142 <.L19>:
    e142:	1c 42 16 02 	mov	&0x0216,r12	;0x0216
    e146:	0c 9a       	cmp	r10,	r12	;
    e148:	0d 28       	jnc	$+28     	;abs 0xe164
    e14a:	b0 12 e0 e0 	call	#57568		;#0xe0e0
    e14e:	3d 40 00 00 	mov	#0,	r13	;
    e152:	0d 93       	cmp	#0,	r13	;r3 As==00
    e154:	03 24       	jz	$+8      	;abs 0xe15c
    e156:	3c 40 60 e0 	mov	#57440,	r12	;#0xe060
    e15a:	8d 12       	call	r13		;

0000e15c <.L21>:
    e15c:	d2 43 14 02 	mov.b	#1,	&0x0214	;r3 As==01

0000e160 <.L17>:
    e160:	30 40 18 e9 	br	#0xe918		;

0000e164 <.L20>:
    e164:	1c 53       	inc	r12		;
    e166:	82 4c 16 02 	mov	r12,	&0x0216	;
    e16a:	0c 5c       	rla	r12		;
    e16c:	0c 59       	add	r9,	r12	;
    e16e:	2c 4c       	mov	@r12,	r12	;
    e170:	8c 12       	call	r12		;
    e172:	30 40 42 e1 	br	#0xe142		;

0000e176 <call___do_global_dtors_aux>:
    e176:	3e 40 00 00 	mov	#0,	r14	;
    e17a:	0e 93       	cmp	#0,	r14	;r3 As==00
    e17c:	05 24       	jz	$+12     	;abs 0xe188
    e17e:	3d 40 18 02 	mov	#536,	r13	;#0x0218
    e182:	3c 40 60 e0 	mov	#57440,	r12	;#0xe060
    e186:	8e 12       	call	r14		;

0000e188 <.L27>:
    e188:	b0 12 fa e0 	call	#57594		;#0xe0fa
    e18c:	30 41       	ret			

0000e18e <sha256_flush>:
#include "hardware.h"
#include "cprintf.h"
#include <stdlib.h>
#include <stdio.h>

char sha256_flush (char init) {
    e18e:	21 83       	decd	r1		;

0000e190 <.LCFI0>:
    e190:	c1 4c 01 00 	mov.b	r12,	1(r1)	;

0000e194 <.Loc.8.1>:
    if (init) {
    e194:	c1 93 01 00 	cmp.b	#0,	1(r1)	;r3 As==00
    e198:	09 24       	jz	$+20     	;abs 0xe1ac

0000e19a <.Loc.9.1>:
        init = 0;
    e19a:	c1 43 01 00 	mov.b	#0,	1(r1)	;r3 As==00

0000e19e <.Loc.10.1>:
        SHA_CONFIG = SHA_MODE | SHA_INIT | SHA_ON;
    e19e:	7c 40 11 00 	mov.b	#17,	r12	;#0x0011
    e1a2:	fc 40 0b 00 	mov.b	#11,	0(r12)	;#0x000b
    e1a6:	00 00 
    e1a8:	30 40 b6 e1 	br	#0xe1b6		;

0000e1ac <.L2>:
    } else {
        SHA_CONFIG = SHA_MODE | SHA_NEXT | SHA_ON;
    e1ac:	7c 40 11 00 	mov.b	#17,	r12	;#0x0011
    e1b0:	fc 40 0d 00 	mov.b	#13,	0(r12)	;#0x000d
    e1b4:	00 00 

0000e1b6 <.L3>:
    }

    SHA_CONFIG = SHA_MODE | SHA_ON;
    e1b6:	7c 40 11 00 	mov.b	#17,	r12	;#0x0011
    e1ba:	fc 40 09 00 	mov.b	#9,	0(r12)	;
    e1be:	00 00 

0000e1c0 <.Loc.16.1>:
    while (!(SHA_STATUS & (SHA_READY)));
    e1c0:	03 43       	nop			

0000e1c2 <.L4>:
    e1c2:	7c 40 11 00 	mov.b	#17,	r12	;#0x0011
    e1c6:	6c 4c       	mov.b	@r12,	r12	;
    e1c8:	5c f3       	and.b	#1,	r12	;r3 As==01
    e1ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    e1cc:	fa 27       	jz	$-10     	;abs 0xe1c2

0000e1ce <.Loc.18.1>:
    
    return init;
    e1ce:	5c 41 01 00 	mov.b	1(r1),	r12	;

0000e1d2 <.Loc.19.1>:
}
    e1d2:	21 53       	incd	r1		;
    e1d4:	30 41       	ret			

0000e1d6 <sha256>:

// the return value are in the periphel
void sha256 (unsigned char *str, unsigned int length) {
    e1d6:	31 80 14 00 	sub	#20,	r1	;#0x0014

0000e1da <.LCFI1>:
    e1da:	81 4c 02 00 	mov	r12,	2(r1)	;
    e1de:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e1e2 <.Loc.23.1>:
    unsigned long size = length * 8;
    e1e2:	2c 41       	mov	@r1,	r12	;
    e1e4:	0c 5c       	rla	r12		;
    e1e6:	0c 5c       	rla	r12		;
    e1e8:	0c 5c       	rla	r12		;
    e1ea:	81 4c 08 00 	mov	r12,	8(r1)	;
    e1ee:	81 43 0a 00 	mov	#0,	10(r1)	;r3 As==00, 0x000a

0000e1f2 <.Loc.24.1>:
    unsigned int i = 0;
    e1f2:	81 43 12 00 	mov	#0,	18(r1)	;r3 As==00, 0x0012

0000e1f6 <.Loc.25.1>:
    char init = 1;
    e1f6:	d1 43 11 00 	mov.b	#1,	17(r1)	;r3 As==01, 0x0011

0000e1fa <.Loc.29.1>:

    unsigned long in;

    while (i <= length/4) {
    e1fa:	30 40 ce e2 	br	#0xe2ce		;

0000e1fe <.L13>:
        in = 0;
    e1fe:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    e202:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00

0000e206 <.LBB2>:
        for (unsigned int j = 0; j < 4; j++) {
    e206:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e
    e20a:	30 40 76 e2 	br	#0xe276		;

0000e20e <.L12>:
            if (i*4+j < length) {
    e20e:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e212:	0c 5c       	rla	r12		;
    e214:	0c 5c       	rla	r12		;
    e216:	1c 51 0e 00 	add	14(r1),	r12	;0x0000e
    e21a:	2c 91       	cmp	@r1,	r12	;
    e21c:	15 2c       	jc	$+44     	;abs 0xe248

0000e21e <.Loc.33.1>:
                ((unsigned char *) &in)[3-j] = str[i*4+j];
    e21e:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e222:	0c 5c       	rla	r12		;
    e224:	0c 5c       	rla	r12		;
    e226:	1c 51 0e 00 	add	14(r1),	r12	;0x0000e
    e22a:	1d 41 02 00 	mov	2(r1),	r13	;
    e22e:	0d 5c       	add	r12,	r13	;
    e230:	7c 40 03 00 	mov.b	#3,	r12	;
    e234:	1c 81 0e 00 	sub	14(r1),	r12	;0x0000e
    e238:	0e 41       	mov	r1,	r14	;
    e23a:	2e 52       	add	#4,	r14	;r2 As==10
    e23c:	0c 5e       	add	r14,	r12	;
    e23e:	6d 4d       	mov.b	@r13,	r13	;
    e240:	cc 4d 00 00 	mov.b	r13,	0(r12)	;
    e244:	30 40 72 e2 	br	#0xe272		;

0000e248 <.L9>:
            } else if (i*4+j == length) {
    e248:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e24c:	0c 5c       	rla	r12		;
    e24e:	0c 5c       	rla	r12		;
    e250:	1c 51 0e 00 	add	14(r1),	r12	;0x0000e
    e254:	81 9c 00 00 	cmp	r12,	0(r1)	;
    e258:	0c 20       	jnz	$+26     	;abs 0xe272

0000e25a <.Loc.35.1>:
                ((unsigned char *) &in)[3-j] = 0x80;
    e25a:	7c 40 03 00 	mov.b	#3,	r12	;
    e25e:	1c 81 0e 00 	sub	14(r1),	r12	;0x0000e
    e262:	0d 41       	mov	r1,	r13	;
    e264:	2d 52       	add	#4,	r13	;r2 As==10
    e266:	0c 5d       	add	r13,	r12	;
    e268:	fc 40 80 ff 	mov.b	#65408,	0(r12)	;#0xff80
    e26c:	00 00 

0000e26e <.Loc.36.1>:
                break;
    e26e:	30 40 80 e2 	br	#0xe280		;

0000e272 <.L10>:

    unsigned long in;

    while (i <= length/4) {
        in = 0;
        for (unsigned int j = 0; j < 4; j++) {
    e272:	91 53 0e 00 	inc	14(r1)		;

0000e276 <.L8>:
    e276:	7c 40 03 00 	mov.b	#3,	r12	;
    e27a:	1c 91 0e 00 	cmp	14(r1),	r12	;0x0000e
    e27e:	c7 2f       	jc	$-112    	;abs 0xe20e

0000e280 <.L11>:
                ((unsigned char *) &in)[3-j] = 0x80;
                break;
            }
        }

        (&SHA_INPUT)[15 - i%16] = in;
    e280:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e284:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e288:	0c 5c       	rla	r12		;
    e28a:	0c 5c       	rla	r12		;
    e28c:	0d 43       	clr	r13		;
    e28e:	0d 8c       	sub	r12,	r13	;
    e290:	0c 4d       	mov	r13,	r12	;
    e292:	3c 50 3c 00 	add	#60,	r12	;#0x003c
    e296:	0e 4c       	mov	r12,	r14	;
    e298:	3e 50 12 00 	add	#18,	r14	;#0x0012
    e29c:	1c 41 04 00 	mov	4(r1),	r12	;
    e2a0:	1d 41 06 00 	mov	6(r1),	r13	;
    e2a4:	8e 4c 00 00 	mov	r12,	0(r14)	;
    e2a8:	8e 4d 02 00 	mov	r13,	2(r14)	;

0000e2ac <.Loc.41.1>:
        i++;
    e2ac:	91 53 12 00 	inc	18(r1)		;

0000e2b0 <.Loc.43.1>:

        if (i%16 == 0 && i != 0)
    e2b0:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e2b4:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2b8:	0c 93       	cmp	#0,	r12	;r3 As==00
    e2ba:	09 20       	jnz	$+20     	;abs 0xe2ce

0000e2bc <.Loc.43.1>:
    e2bc:	81 93 12 00 	cmp	#0,	18(r1)	;r3 As==00, 0x0012
    e2c0:	06 24       	jz	$+14     	;abs 0xe2ce

0000e2c2 <.Loc.44.1>:
            init = sha256_flush(init);
    e2c2:	5c 41 11 00 	mov.b	17(r1),	r12	;0x00011
    e2c6:	b0 12 8e e1 	call	#57742		;#0xe18e
    e2ca:	c1 4c 11 00 	mov.b	r12,	17(r1)	; 0x0011

0000e2ce <.L7>:
    unsigned int i = 0;
    char init = 1;

    unsigned long in;

    while (i <= length/4) {
    e2ce:	2c 41       	mov	@r1,	r12	;
    e2d0:	b0 12 c6 e9 	call	#59846		;#0xe9c6
    e2d4:	1c 91 12 00 	cmp	18(r1),	r12	;0x00012
    e2d8:	92 2f       	jc	$-218    	;abs 0xe1fe

0000e2da <.LBB3>:
        if (i%16 == 0 && i != 0)
            init = sha256_flush(init);
    }

    // set zeros
    for (unsigned int j = i%16; j < 15; j++) {
    e2da:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e2de:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2e2:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    e2e6:	30 40 14 e3 	br	#0xe314		;

0000e2ea <.L15>:
        (&SHA_INPUT)[15 - i%16] = 0;
    e2ea:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e2ee:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e2f2:	0c 5c       	rla	r12		;
    e2f4:	0c 5c       	rla	r12		;
    e2f6:	0d 43       	clr	r13		;
    e2f8:	0d 8c       	sub	r12,	r13	;
    e2fa:	0c 4d       	mov	r13,	r12	;
    e2fc:	3c 50 3c 00 	add	#60,	r12	;#0x003c
    e300:	3c 50 12 00 	add	#18,	r12	;#0x0012
    e304:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    e308:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00

0000e30c <.Loc.50.1>:
        i++;
    e30c:	91 53 12 00 	inc	18(r1)		;

0000e310 <.Loc.48.1>:
        if (i%16 == 0 && i != 0)
            init = sha256_flush(init);
    }

    // set zeros
    for (unsigned int j = i%16; j < 15; j++) {
    e310:	91 53 0c 00 	inc	12(r1)		;

0000e314 <.L14>:
    e314:	7c 40 0e 00 	mov.b	#14,	r12	;#0x000e
    e318:	1c 91 0c 00 	cmp	12(r1),	r12	;0x0000c
    e31c:	e6 2f       	jc	$-50     	;abs 0xe2ea

0000e31e <.LBE3>:
        (&SHA_INPUT)[15 - i%16] = 0;
        i++;
    }
    (&SHA_INPUT)[15 - i%16] = size;
    e31e:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    e322:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e326:	0c 5c       	rla	r12		;
    e328:	0c 5c       	rla	r12		;
    e32a:	0d 43       	clr	r13		;
    e32c:	0d 8c       	sub	r12,	r13	;
    e32e:	0c 4d       	mov	r13,	r12	;
    e330:	3c 50 3c 00 	add	#60,	r12	;#0x003c
    e334:	3c 50 12 00 	add	#18,	r12	;#0x0012
    e338:	9c 41 08 00 	mov	8(r1),	0(r12)	;
    e33c:	00 00 
    e33e:	9c 41 0a 00 	mov	10(r1),	2(r12)	;0x0000a
    e342:	02 00 

0000e344 <.Loc.54.1>:

    sha256_flush(init);
    e344:	5c 41 11 00 	mov.b	17(r1),	r12	;0x00011
    e348:	b0 12 8e e1 	call	#57742		;#0xe18e

0000e34c <.Loc.55.1>:
}
    e34c:	03 43       	nop			
    e34e:	31 50 14 00 	add	#20,	r1	;#0x0014
    e352:	30 41       	ret			

0000e354 <main>:
//--------------------------------------------------//
// Main function with init an an endless loop that  //
// is synced with the interrupts trough the         //
// lowpower mode.                                   //
//--------------------------------------------------//
int main(void) {
    e354:	31 80 62 00 	sub	#98,	r1	;#0x0062

0000e358 <.LCFI2>:

    unsigned char string[] = "The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.";
    e358:	0c 41       	mov	r1,	r12	;
    e35a:	2c 52       	add	#4,	r12	;r2 As==10
    e35c:	3d 40 05 e0 	mov	#57349,	r13	;#0xe005
    e360:	7e 40 5a 00 	mov.b	#90,	r14	;#0x005a
    e364:	b0 12 46 ea 	call	#59974		;#0xea46

0000e368 <.Loc.66.1>:

    WDTCTL = WDTPW | WDTHOLD;           // Init watchdog timer
    e368:	3c 40 20 01 	mov	#288,	r12	;#0x0120
    e36c:	bc 40 80 5a 	mov	#23168,	0(r12)	;#0x5a80
    e370:	00 00 

0000e372 <.Loc.68.1>:

    UART_BAUD = BAUD;                   // Init UART
    e372:	7c 40 82 00 	mov.b	#130,	r12	;#0x0082
    e376:	bc 40 11 04 	mov	#1041,	0(r12)	;#0x0411
    e37a:	00 00 

0000e37c <.Loc.69.1>:
    UART_CTL  = UART_EN | UART_IEN_RX;
    e37c:	7c 40 80 00 	mov.b	#128,	r12	;#0x0080
    e380:	fc 40 11 00 	mov.b	#17,	0(r12)	;#0x0011
    e384:	00 00 

0000e386 <.Loc.71.1>:

    sha256(string, 89);
    e386:	0c 41       	mov	r1,	r12	;
    e388:	2c 52       	add	#4,	r12	;r2 As==10
    e38a:	7d 40 59 00 	mov.b	#89,	r13	;#0x0059
    e38e:	b0 12 d6 e1 	call	#57814		;#0xe1d6

0000e392 <.LBB4>:


    for (int i = 0; i < 16; ++i) {
    e392:	81 43 60 00 	mov	#0,	96(r1)	;r3 As==00, 0x0060
    e396:	30 40 c0 e3 	br	#0xe3c0		;

0000e39a <.L18>:
        unsigned int c = ((unsigned int *)&SHA_OUTPUT)[15-i];
    e39a:	7c 40 0f 00 	mov.b	#15,	r12	;#0x000f
    e39e:	1c 81 60 00 	sub	96(r1),	r12	;0x00060
    e3a2:	0c 5c       	rla	r12		;
    e3a4:	3c 50 52 00 	add	#82,	r12	;#0x0052
    e3a8:	a1 4c 5e 00 	mov	@r12,	94(r1)	; 0x005e

0000e3ac <.Loc.76.1>:
        cprintf("%w", c);
    e3ac:	91 41 5e 00 	mov	94(r1),	2(r1)	;0x0005e
    e3b0:	02 00 
    e3b2:	b1 40 00 e0 	mov	#57344,	0(r1)	;#0xe000
    e3b6:	00 00 
    e3b8:	b0 12 4c e6 	call	#58956		;#0xe64c

0000e3bc <.LBE5>:
    UART_CTL  = UART_EN | UART_IEN_RX;

    sha256(string, 89);


    for (int i = 0; i < 16; ++i) {
    e3bc:	91 53 60 00 	inc	96(r1)		;

0000e3c0 <.L17>:
    e3c0:	7c 40 0f 00 	mov.b	#15,	r12	;#0x000f
    e3c4:	1c 91 60 00 	cmp	96(r1),	r12	;0x00060
    e3c8:	e8 37       	jge	$-46     	;abs 0xe39a

0000e3ca <.LBE4>:
        unsigned int c = ((unsigned int *)&SHA_OUTPUT)[15-i];
        cprintf("%w", c);
    }
    cprintf("\n");
    e3ca:	b1 40 03 e0 	mov	#57347,	0(r1)	;#0xe003
    e3ce:	00 00 
    e3d0:	b0 12 4c e6 	call	#58956		;#0xe64c

0000e3d4 <.L19>:

    while(1) {
    e3d4:	30 40 d4 e3 	br	#0xe3d4		;

0000e3d8 <tty_putc>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
static int tty_putc (int txdata) {
    e3d8:	21 83       	decd	r1		;

0000e3da <.LCFI0>:
    e3da:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e3de <.Loc.17.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    e3de:	03 43       	nop			

0000e3e0 <.L2>:
    e3e0:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081
    e3e4:	6c 4c       	mov.b	@r12,	r12	;
    e3e6:	7c f2       	and.b	#8,	r12	;r2 As==11
    e3e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    e3ea:	fa 23       	jnz	$-10     	;abs 0xe3e0

0000e3ec <.Loc.20.1>:

  // Write the output character
  UART_TXD = txdata;
    e3ec:	7c 40 84 00 	mov.b	#132,	r12	;#0x0084
    e3f0:	2d 41       	mov	@r1,	r13	;
    e3f2:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    e3f6:	cc 4d 00 00 	mov.b	r13,	0(r12)	;

0000e3fa <.Loc.22.1>:

  return 0;
    e3fa:	4c 43       	clr.b	r12		;

0000e3fc <.Loc.23.1>:
}
    e3fc:	21 53       	incd	r1		;
    e3fe:	30 41       	ret			

0000e400 <cput_nibble>:


void
cput_nibble (int n)
{
    e400:	21 83       	decd	r1		;

0000e402 <.LCFI1>:
    e402:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e406 <.Loc.29.1>:
  tty_putc (hex[n&0x0f]);
    e406:	2c 41       	mov	@r1,	r12	;
    e408:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    e40c:	5c 4c 02 02 	mov.b	514(r12),r12	;0x00202
    e410:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e414 <.Loc.30.1>:
}
    e414:	03 43       	nop			
    e416:	21 53       	incd	r1		;
    e418:	30 41       	ret			

0000e41a <cput_hex_byte>:

void
cput_hex_byte (int n)
{
    e41a:	21 83       	decd	r1		;

0000e41c <.LCFI2>:
    e41c:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e420 <.Loc.35.1>:
  cput_nibble (n >> 4);
    e420:	2c 41       	mov	@r1,	r12	;
    e422:	b0 12 34 e9 	call	#59700		;#0xe934
    e426:	b0 12 00 e4 	call	#58368		;#0xe400

0000e42a <.Loc.36.1>:
  cput_nibble (n);
    e42a:	2c 41       	mov	@r1,	r12	;
    e42c:	b0 12 00 e4 	call	#58368		;#0xe400

0000e430 <.Loc.37.1>:
}
    e430:	03 43       	nop			
    e432:	21 53       	incd	r1		;
    e434:	30 41       	ret			

0000e436 <cput_binary_byte>:

void
cput_binary_byte (int n)
{
    e436:	21 82       	sub	#4,	r1	;r2 As==10

0000e438 <.LCFI3>:
    e438:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e43c <.Loc.43.1>:
  int i;
  for (i=7; i>=0; i--)
    e43c:	b1 40 07 00 	mov	#7,	2(r1)	;
    e440:	02 00 
    e442:	30 40 6a e4 	br	#0xe46a		;

0000e446 <.L10>:
    tty_putc((n & (1<<i)) ? '1' : '0');
    e446:	2c 41       	mov	@r1,	r12	;
    e448:	1d 41 02 00 	mov	2(r1),	r13	;
    e44c:	b0 12 42 e9 	call	#59714		;#0xe942
    e450:	5c f3       	and.b	#1,	r12	;r3 As==01
    e452:	0c 93       	cmp	#0,	r12	;r3 As==00
    e454:	04 24       	jz	$+10     	;abs 0xe45e

0000e456 <.Loc.44.1>:
    e456:	7c 40 31 00 	mov.b	#49,	r12	;#0x0031
    e45a:	30 40 62 e4 	br	#0xe462		;

0000e45e <.L8>:
    e45e:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

0000e462 <.L9>:
    e462:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e466 <.Loc.43.1>:

void
cput_binary_byte (int n)
{
  int i;
  for (i=7; i>=0; i--)
    e466:	b1 53 02 00 	add	#-1,	2(r1)	;r3 As==11

0000e46a <.L7>:
    e46a:	81 93 02 00 	cmp	#0,	2(r1)	;r3 As==00
    e46e:	eb 37       	jge	$-40     	;abs 0xe446

0000e470 <.Loc.45.1>:
    tty_putc((n & (1<<i)) ? '1' : '0');
}
    e470:	03 43       	nop			
    e472:	21 52       	add	#4,	r1	;r2 As==10
    e474:	30 41       	ret			

0000e476 <cput_hex_word>:

void
cput_hex_word (int n)
{
    e476:	21 83       	decd	r1		;

0000e478 <.LCFI4>:
    e478:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e47c <.Loc.50.1>:
  cput_hex_byte (n >> 8);
    e47c:	2c 41       	mov	@r1,	r12	;
    e47e:	b0 12 2c e9 	call	#59692		;#0xe92c
    e482:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e486 <.Loc.51.1>:
  cput_hex_byte (n);
    e486:	2c 41       	mov	@r1,	r12	;
    e488:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e48c <.Loc.52.1>:
}
    e48c:	03 43       	nop			
    e48e:	21 53       	incd	r1		;
    e490:	30 41       	ret			

0000e492 <cput_hex_long>:

void
cput_hex_long (long int n)
{
    e492:	21 82       	sub	#4,	r1	;r2 As==10

0000e494 <.LCFI5>:
    e494:	81 4c 00 00 	mov	r12,	0(r1)	;
    e498:	81 4d 02 00 	mov	r13,	2(r1)	;

0000e49c <.Loc.57.1>:
  cput_hex_byte (n >> 24);
    e49c:	2c 41       	mov	@r1,	r12	;
    e49e:	1d 41 02 00 	mov	2(r1),	r13	;
    e4a2:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    e4a6:	4f 43       	clr.b	r15		;
    e4a8:	b0 12 8c e9 	call	#59788		;#0xe98c
    e4ac:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e4b0 <.Loc.58.1>:
  cput_hex_byte (n >> 16);
    e4b0:	2c 41       	mov	@r1,	r12	;
    e4b2:	1d 41 02 00 	mov	2(r1),	r13	;
    e4b6:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    e4ba:	4f 43       	clr.b	r15		;
    e4bc:	b0 12 8c e9 	call	#59788		;#0xe98c
    e4c0:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e4c4 <.Loc.59.1>:
  cput_hex_byte (n >> 8);
    e4c4:	2c 41       	mov	@r1,	r12	;
    e4c6:	1d 41 02 00 	mov	2(r1),	r13	;
    e4ca:	b0 12 64 e9 	call	#59748		;#0xe964
    e4ce:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e4d2 <.Loc.60.1>:
  cput_hex_byte (n);
    e4d2:	2c 41       	mov	@r1,	r12	;
    e4d4:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e4d8 <.Loc.61.1>:
}
    e4d8:	03 43       	nop			
    e4da:	21 52       	add	#4,	r1	;r2 As==10
    e4dc:	30 41       	ret			

0000e4de <cput_hex_block>:

void
cput_hex_block (char *block, int n)
{
    e4de:	31 80 06 00 	sub	#6,	r1	;

0000e4e2 <.LCFI6>:
    e4e2:	81 4c 02 00 	mov	r12,	2(r1)	;
    e4e6:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e4ea <.Loc.66.1>:
  int i = 0;
    e4ea:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e4ee <.Loc.67.1>:
  while (n)
    e4ee:	30 40 32 e5 	br	#0xe532		;

0000e4f2 <.L18>:
    {
      cput_hex_byte (*block++);
    e4f2:	1c 41 02 00 	mov	2(r1),	r12	;
    e4f6:	0d 4c       	mov	r12,	r13	;
    e4f8:	1d 53       	inc	r13		;
    e4fa:	81 4d 02 00 	mov	r13,	2(r1)	;
    e4fe:	6c 4c       	mov.b	@r12,	r12	;
    e500:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e504 <.Loc.70.1>:
      if (--n == 0)
    e504:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e508:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e50c:	17 24       	jz	$+48     	;abs 0xe53c

0000e50e <.Loc.72.1>:
	break;
      i++;
    e50e:	91 53 04 00 	inc	4(r1)		;

0000e512 <.Loc.73.1>:
      if ((i & 7) == 0)
    e512:	1c 41 04 00 	mov	4(r1),	r12	;
    e516:	7c f0 07 00 	and.b	#7,	r12	;
    e51a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e51c:	06 20       	jnz	$+14     	;abs 0xe52a

0000e51e <.Loc.74.1>:
	tty_putc (' ');
    e51e:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e522:	b0 12 d8 e3 	call	#58328		;#0xe3d8
    e526:	30 40 32 e5 	br	#0xe532		;

0000e52a <.L17>:
      else
	tty_putc (':');
    e52a:	7c 40 3a 00 	mov.b	#58,	r12	;#0x003a
    e52e:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e532 <.L14>:

void
cput_hex_block (char *block, int n)
{
  int i = 0;
  while (n)
    e532:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e536:	dd 23       	jnz	$-68     	;abs 0xe4f2

0000e538 <.Loc.78.1>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e538:	30 40 3e e5 	br	#0xe53e		;

0000e53c <.L19>:
  int i = 0;
  while (n)
    {
      cput_hex_byte (*block++);
      if (--n == 0)
	break;
    e53c:	03 43       	nop			

0000e53e <.L16>:
      if ((i & 7) == 0)
	tty_putc (' ');
      else
	tty_putc (':');
    }
}
    e53e:	03 43       	nop			
    e540:	31 50 06 00 	add	#6,	r1	;
    e544:	30 41       	ret			

0000e546 <cput_nibble_block>:

void
cput_nibble_block (char *block, int n)
{
    e546:	31 80 06 00 	sub	#6,	r1	;

0000e54a <.LCFI7>:
    e54a:	81 4c 02 00 	mov	r12,	2(r1)	;
    e54e:	81 4d 00 00 	mov	r13,	0(r1)	;

0000e552 <.Loc.83.1>:
  int i = 0;
    e552:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00

0000e556 <.Loc.84.1>:
  while (n)
    e556:	30 40 86 e5 	br	#0xe586		;

0000e55a <.L24>:
    {
      cput_nibble (*block);
    e55a:	1c 41 02 00 	mov	2(r1),	r12	;
    e55e:	6c 4c       	mov.b	@r12,	r12	;
    e560:	b0 12 00 e4 	call	#58368		;#0xe400

0000e564 <.Loc.87.1>:
      if (--n == 0)
    e564:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11
    e568:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e56c:	11 24       	jz	$+36     	;abs 0xe590

0000e56e <.Loc.89.1>:
	break;
      i++;
    e56e:	91 53 04 00 	inc	4(r1)		;

0000e572 <.Loc.90.1>:
      if ((i & 7) == 0)
    e572:	1c 41 04 00 	mov	4(r1),	r12	;
    e576:	7c f0 07 00 	and.b	#7,	r12	;
    e57a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e57c:	04 20       	jnz	$+10     	;abs 0xe586

0000e57e <.Loc.91.1>:
	tty_putc (' ');
    e57e:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020
    e582:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e586 <.L21>:

void
cput_nibble_block (char *block, int n)
{
  int i = 0;
  while (n)
    e586:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e58a:	e7 23       	jnz	$-48     	;abs 0xe55a

0000e58c <.Loc.93.1>:
	break;
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e58c:	30 40 92 e5 	br	#0xe592		;

0000e590 <.L25>:
  int i = 0;
  while (n)
    {
      cput_nibble (*block);
      if (--n == 0)
	break;
    e590:	03 43       	nop			

0000e592 <.L23>:
      i++;
      if ((i & 7) == 0)
	tty_putc (' ');
    }
}
    e592:	03 43       	nop			
    e594:	31 50 06 00 	add	#6,	r1	;
    e598:	30 41       	ret			

0000e59a <cput_number>:

void
cput_number (int n)
{
    e59a:	31 80 18 00 	sub	#24,	r1	;#0x0018

0000e59e <.LCFI8>:
    e59e:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e5a2 <.Loc.99.1>:
  char buf[20];
  int i = 0;
    e5a2:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016

0000e5a6 <.Loc.100.1>:
  if (n < 0)
    e5a6:	81 93 00 00 	cmp	#0,	0(r1)	;r3 As==00
    e5aa:	25 34       	jge	$+76     	;abs 0xe5f6

0000e5ac <.Loc.102.1>:
    {
      tty_putc ('-');
    e5ac:	7c 40 2d 00 	mov.b	#45,	r12	;#0x002d
    e5b0:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e5b4 <.Loc.103.1>:
      n = -n;
    e5b4:	4c 43       	clr.b	r12		;
    e5b6:	2c 81       	sub	@r1,	r12	;
    e5b8:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e5bc <.Loc.105.1>:
    }
  while (n > 9)
    e5bc:	30 40 f6 e5 	br	#0xe5f6		;

0000e5c0 <.L29>:
    {
      buf[i++] = (n%10) + '0';
    e5c0:	2c 41       	mov	@r1,	r12	;
    e5c2:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e5c6:	b0 12 cc e8 	call	#59596		;#0xe8cc
    e5ca:	4d 4c       	mov.b	r12,	r13	;
    e5cc:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e5d0:	0e 4c       	mov	r12,	r14	;
    e5d2:	1e 53       	inc	r14		;
    e5d4:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e5d8:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e5dc:	4e 4d       	mov.b	r13,	r14	;
    e5de:	0d 41       	mov	r1,	r13	;
    e5e0:	2d 53       	incd	r13		;
    e5e2:	0c 5d       	add	r13,	r12	;
    e5e4:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e5e8 <.Loc.108.1>:
      n /= 10;
    e5e8:	2c 41       	mov	@r1,	r12	;
    e5ea:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e5ee:	b0 12 80 e8 	call	#59520		;#0xe880
    e5f2:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e5f6 <.L28>:
  if (n < 0)
    {
      tty_putc ('-');
      n = -n;
    }
  while (n > 9)
    e5f6:	7c 40 09 00 	mov.b	#9,	r12	;
    e5fa:	2c 91       	cmp	@r1,	r12	;
    e5fc:	e1 3b       	jl	$-60     	;abs 0xe5c0

0000e5fe <.Loc.110.1>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    e5fe:	2c 41       	mov	@r1,	r12	;
    e600:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    e604:	b0 12 cc e8 	call	#59596		;#0xe8cc
    e608:	4d 4c       	mov.b	r12,	r13	;
    e60a:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    e60e:	0e 4c       	mov	r12,	r14	;
    e610:	1e 53       	inc	r14		;
    e612:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    e616:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    e61a:	4e 4d       	mov.b	r13,	r14	;
    e61c:	0d 41       	mov	r1,	r13	;
    e61e:	2d 53       	incd	r13		;
    e620:	0c 5d       	add	r13,	r12	;
    e622:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

0000e626 <.Loc.111.1>:
  while (i > 0)
    e626:	30 40 3c e6 	br	#0xe63c		;

0000e62a <.L31>:
    tty_putc (buf[--i]);
    e62a:	b1 53 16 00 	add	#-1,	22(r1)	;r3 As==11, 0x0016
    e62e:	0c 41       	mov	r1,	r12	;
    e630:	2c 53       	incd	r12		;
    e632:	1c 51 16 00 	add	22(r1),	r12	;0x00016
    e636:	6c 4c       	mov.b	@r12,	r12	;
    e638:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e63c <.L30>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    e63c:	4c 43       	clr.b	r12		;
    e63e:	1c 91 16 00 	cmp	22(r1),	r12	;0x00016
    e642:	f3 3b       	jl	$-24     	;abs 0xe62a

0000e644 <.Loc.113.1>:
    tty_putc (buf[--i]);
}
    e644:	03 43       	nop			
    e646:	31 50 18 00 	add	#24,	r1	;#0x0018
    e64a:	30 41       	ret			

0000e64c <cprintf>:

void
cprintf (const char *fmt, ...)
{
    e64c:	31 80 06 00 	sub	#6,	r1	;

0000e650 <.LCFI9>:
  va_list v;
  int i;
  char *s;

  va_start (v, fmt);
    e650:	0c 41       	mov	r1,	r12	;
    e652:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    e656:	81 4c 00 00 	mov	r12,	0(r1)	;

0000e65a <.Loc.124.1>:

  while (*fmt)
    e65a:	30 40 2e e8 	br	#0xe82e		;

0000e65e <.L49>:
    {
      if (*fmt != '%')
    e65e:	1c 41 08 00 	mov	8(r1),	r12	;
    e662:	6c 4c       	mov.b	@r12,	r12	;
    e664:	7c 90 25 00 	cmp.b	#37,	r12	;#0x0025
    e668:	07 24       	jz	$+16     	;abs 0xe678

0000e66a <.Loc.127.1>:
	tty_putc (*fmt);
    e66a:	1c 41 08 00 	mov	8(r1),	r12	;
    e66e:	6c 4c       	mov.b	@r12,	r12	;
    e670:	b0 12 d8 e3 	call	#58328		;#0xe3d8
    e674:	30 40 2a e8 	br	#0xe82a		;

0000e678 <.L34>:
      else
	switch (*++fmt)
    e678:	91 53 08 00 	inc	8(r1)		;
    e67c:	1c 41 08 00 	mov	8(r1),	r12	;
    e680:	6c 4c       	mov.b	@r12,	r12	;
    e682:	3c 90 64 00 	cmp	#100,	r12	;#0x0064
    e686:	44 24       	jz	$+138    	;abs 0xe710
    e688:	7d 40 64 00 	mov.b	#100,	r13	;#0x0064
    e68c:	0d 9c       	cmp	r12,	r13	;
    e68e:	14 38       	jl	$+42     	;abs 0xe6b8
    e690:	3c 90 42 00 	cmp	#66,	r12	;#0x0042
    e694:	5b 24       	jz	$+184    	;abs 0xe74c
    e696:	7d 40 42 00 	mov.b	#66,	r13	;#0x0042
    e69a:	0d 9c       	cmp	r12,	r13	;
    e69c:	05 38       	jl	$+12     	;abs 0xe6a8
    e69e:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    e6a2:	21 24       	jz	$+68     	;abs 0xe6e6
    e6a4:	30 40 2a e8 	br	#0xe82a		;

0000e6a8 <.L39>:
    e6a8:	3c 90 62 00 	cmp	#98,	r12	;#0x0062
    e6ac:	40 24       	jz	$+130    	;abs 0xe72e
    e6ae:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    e6b2:	1f 24       	jz	$+64     	;abs 0xe6f2
    e6b4:	30 40 2a e8 	br	#0xe82a		;

0000e6b8 <.L37>:
    e6b8:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    e6bc:	a9 24       	jz	$+340    	;abs 0xe810
    e6be:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    e6c2:	0d 9c       	cmp	r12,	r13	;
    e6c4:	08 38       	jl	$+18     	;abs 0xe6d6
    e6c6:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    e6ca:	5e 24       	jz	$+190    	;abs 0xe788
    e6cc:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    e6d0:	87 24       	jz	$+272    	;abs 0xe7e0
    e6d2:	30 40 2a e8 	br	#0xe82a		;

0000e6d6 <.L44>:
    e6d6:	3c 90 77 00 	cmp	#119,	r12	;#0x0077
    e6da:	47 24       	jz	$+144    	;abs 0xe76a
    e6dc:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    e6e0:	67 24       	jz	$+208    	;abs 0xe7b0
    e6e2:	30 40 2a e8 	br	#0xe82a		;

0000e6e6 <.L40>:
	  {
	  case '%':
	    tty_putc ('%');
    e6e6:	7c 40 25 00 	mov.b	#37,	r12	;#0x0025
    e6ea:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e6ee <.Loc.133.1>:
	    break;
    e6ee:	30 40 2a e8 	br	#0xe82a		;

0000e6f2 <.L42>:
	  case 'c':
	    i = va_arg (v, int);
    e6f2:	2c 41       	mov	@r1,	r12	;
    e6f4:	1c 53       	inc	r12		;
    e6f6:	1c c3       	bic	#1,	r12	;r3 As==01
    e6f8:	0d 4c       	mov	r12,	r13	;
    e6fa:	2d 53       	incd	r13		;
    e6fc:	81 4d 00 00 	mov	r13,	0(r1)	;
    e700:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e704 <.Loc.136.1>:
	    tty_putc(i);
    e704:	1c 41 02 00 	mov	2(r1),	r12	;
    e708:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e70c <.Loc.137.1>:
	    break;
    e70c:	30 40 2a e8 	br	#0xe82a		;

0000e710 <.L36>:
	  case 'd':
	    i = va_arg (v, int);
    e710:	2c 41       	mov	@r1,	r12	;
    e712:	1c 53       	inc	r12		;
    e714:	1c c3       	bic	#1,	r12	;r3 As==01
    e716:	0d 4c       	mov	r12,	r13	;
    e718:	2d 53       	incd	r13		;
    e71a:	81 4d 00 00 	mov	r13,	0(r1)	;
    e71e:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e722 <.Loc.140.1>:
	    cput_number(i);
    e722:	1c 41 02 00 	mov	2(r1),	r12	;
    e726:	b0 12 9a e5 	call	#58778		;#0xe59a

0000e72a <.Loc.141.1>:
	    break;
    e72a:	30 40 2a e8 	br	#0xe82a		;

0000e72e <.L41>:
	  case 'b':
	    i = va_arg (v, int);
    e72e:	2c 41       	mov	@r1,	r12	;
    e730:	1c 53       	inc	r12		;
    e732:	1c c3       	bic	#1,	r12	;r3 As==01
    e734:	0d 4c       	mov	r12,	r13	;
    e736:	2d 53       	incd	r13		;
    e738:	81 4d 00 00 	mov	r13,	0(r1)	;
    e73c:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e740 <.Loc.144.1>:
	    cput_hex_byte (i);
    e740:	1c 41 02 00 	mov	2(r1),	r12	;
    e744:	b0 12 1a e4 	call	#58394		;#0xe41a

0000e748 <.Loc.145.1>:
	    break;
    e748:	30 40 2a e8 	br	#0xe82a		;

0000e74c <.L38>:
	  case 'B':
	    i = va_arg (v, int);
    e74c:	2c 41       	mov	@r1,	r12	;
    e74e:	1c 53       	inc	r12		;
    e750:	1c c3       	bic	#1,	r12	;r3 As==01
    e752:	0d 4c       	mov	r12,	r13	;
    e754:	2d 53       	incd	r13		;
    e756:	81 4d 00 00 	mov	r13,	0(r1)	;
    e75a:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e75e <.Loc.148.1>:
	    cput_binary_byte (i);
    e75e:	1c 41 02 00 	mov	2(r1),	r12	;
    e762:	b0 12 36 e4 	call	#58422		;#0xe436

0000e766 <.Loc.149.1>:
	    break;
    e766:	30 40 2a e8 	br	#0xe82a		;

0000e76a <.L47>:
	  case 'w':
	    i = va_arg (v, int);
    e76a:	2c 41       	mov	@r1,	r12	;
    e76c:	1c 53       	inc	r12		;
    e76e:	1c c3       	bic	#1,	r12	;r3 As==01
    e770:	0d 4c       	mov	r12,	r13	;
    e772:	2d 53       	incd	r13		;
    e774:	81 4d 00 00 	mov	r13,	0(r1)	;
    e778:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e77c <.Loc.152.1>:
	    cput_hex_word (i);
    e77c:	1c 41 02 00 	mov	2(r1),	r12	;
    e780:	b0 12 76 e4 	call	#58486		;#0xe476

0000e784 <.Loc.153.1>:
	    break;
    e784:	30 40 2a e8 	br	#0xe82a		;

0000e788 <.L45>:
	  case 'l':
	    i = va_arg (v, int);
    e788:	2c 41       	mov	@r1,	r12	;
    e78a:	1c 53       	inc	r12		;
    e78c:	1c c3       	bic	#1,	r12	;r3 As==01
    e78e:	0d 4c       	mov	r12,	r13	;
    e790:	2d 53       	incd	r13		;
    e792:	81 4d 00 00 	mov	r13,	0(r1)	;
    e796:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e79a <.Loc.156.1>:
	    cput_hex_long (i);
    e79a:	1e 41 02 00 	mov	2(r1),	r14	;
    e79e:	0c 4e       	mov	r14,	r12	;
    e7a0:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    e7a4:	0d 7d       	subc	r13,	r13	;
    e7a6:	3d e3       	inv	r13		;
    e7a8:	b0 12 92 e4 	call	#58514		;#0xe492

0000e7ac <.Loc.157.1>:
	    break;
    e7ac:	30 40 2a e8 	br	#0xe82a		;

0000e7b0 <.L48>:
	  case 'x':
	    s = va_arg (v, char *);
    e7b0:	2c 41       	mov	@r1,	r12	;
    e7b2:	0d 4c       	mov	r12,	r13	;
    e7b4:	2d 53       	incd	r13		;
    e7b6:	81 4d 00 00 	mov	r13,	0(r1)	;
    e7ba:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e7be <.Loc.160.1>:
	    i = va_arg (v, int);
    e7be:	2c 41       	mov	@r1,	r12	;
    e7c0:	1c 53       	inc	r12		;
    e7c2:	1c c3       	bic	#1,	r12	;r3 As==01
    e7c4:	0d 4c       	mov	r12,	r13	;
    e7c6:	2d 53       	incd	r13		;
    e7c8:	81 4d 00 00 	mov	r13,	0(r1)	;
    e7cc:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e7d0 <.Loc.161.1>:
	    cput_hex_block (s, i);
    e7d0:	1d 41 02 00 	mov	2(r1),	r13	;
    e7d4:	1c 41 04 00 	mov	4(r1),	r12	;
    e7d8:	b0 12 de e4 	call	#58590		;#0xe4de

0000e7dc <.Loc.162.1>:
	    break;
    e7dc:	30 40 2a e8 	br	#0xe82a		;

0000e7e0 <.L46>:
	  case 'n':
	    s = va_arg (v, char *);
    e7e0:	2c 41       	mov	@r1,	r12	;
    e7e2:	0d 4c       	mov	r12,	r13	;
    e7e4:	2d 53       	incd	r13		;
    e7e6:	81 4d 00 00 	mov	r13,	0(r1)	;
    e7ea:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e7ee <.Loc.165.1>:
	    i = va_arg (v, int);
    e7ee:	2c 41       	mov	@r1,	r12	;
    e7f0:	1c 53       	inc	r12		;
    e7f2:	1c c3       	bic	#1,	r12	;r3 As==01
    e7f4:	0d 4c       	mov	r12,	r13	;
    e7f6:	2d 53       	incd	r13		;
    e7f8:	81 4d 00 00 	mov	r13,	0(r1)	;
    e7fc:	a1 4c 02 00 	mov	@r12,	2(r1)	;

0000e800 <.Loc.166.1>:
	    cput_nibble_block (s, i);
    e800:	1d 41 02 00 	mov	2(r1),	r13	;
    e804:	1c 41 04 00 	mov	4(r1),	r12	;
    e808:	b0 12 46 e5 	call	#58694		;#0xe546

0000e80c <.Loc.167.1>:
	    break;
    e80c:	30 40 2a e8 	br	#0xe82a		;

0000e810 <.L43>:
	  case 's':
	    s = va_arg (v, char *);
    e810:	2c 41       	mov	@r1,	r12	;
    e812:	0d 4c       	mov	r12,	r13	;
    e814:	2d 53       	incd	r13		;
    e816:	81 4d 00 00 	mov	r13,	0(r1)	;
    e81a:	a1 4c 04 00 	mov	@r12,	4(r1)	;

0000e81e <.Loc.170.1>:
	    tty_putc (s[0]);
    e81e:	1c 41 04 00 	mov	4(r1),	r12	;
    e822:	6c 4c       	mov.b	@r12,	r12	;
    e824:	b0 12 d8 e3 	call	#58328		;#0xe3d8

0000e828 <.Loc.171.1>:
	    break;
    e828:	03 43       	nop			

0000e82a <.L35>:
	  }
      fmt ++;
    e82a:	91 53 08 00 	inc	8(r1)		;

0000e82e <.L33>:
  int i;
  char *s;

  va_start (v, fmt);

  while (*fmt)
    e82e:	1c 41 08 00 	mov	8(r1),	r12	;
    e832:	6c 4c       	mov.b	@r12,	r12	;
    e834:	0c 93       	cmp	#0,	r12	;r3 As==00
    e836:	13 23       	jnz	$-472    	;abs 0xe65e

0000e838 <.Loc.175.1>:
	    tty_putc (s[0]);
	    break;
	  }
      fmt ++;
    }
}
    e838:	03 43       	nop			
    e83a:	31 50 06 00 	add	#6,	r1	;
    e83e:	30 41       	ret			

0000e840 <udivmodhi4>:
    e840:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

0000e844 <.Loc.35.1>:
    e844:	5b 43       	mov.b	#1,	r11	;r3 As==01

0000e846 <.L2>:
    e846:	0d 9c       	cmp	r12,	r13	;
    e848:	08 28       	jnc	$+18     	;abs 0xe85a

0000e84a <.L15>:
    e84a:	4f 43       	clr.b	r15		;

0000e84c <.L4>:
    e84c:	0b 93       	cmp	#0,	r11	;r3 As==00
    e84e:	0e 20       	jnz	$+30     	;abs 0xe86c

0000e850 <.L5>:
    e850:	0e 93       	cmp	#0,	r14	;r3 As==00
    e852:	01 24       	jz	$+4      	;abs 0xe856
    e854:	0f 4c       	mov	r12,	r15	;

0000e856 <.L1>:
    e856:	0c 4f       	mov	r15,	r12	;
    e858:	30 41       	ret			

0000e85a <.L3>:
    e85a:	3f 53       	add	#-1,	r15	;r3 As==11

0000e85c <.Loc.38.1>:
    e85c:	0f 93       	cmp	#0,	r15	;r3 As==00
    e85e:	f8 27       	jz	$-14     	;abs 0xe850

0000e860 <.Loc.38.1>:
    e860:	0d 93       	cmp	#0,	r13	;r3 As==00
    e862:	f3 3b       	jl	$-24     	;abs 0xe84a

0000e864 <.Loc.40.1>:
    e864:	0d 5d       	rla	r13		;

0000e866 <.Loc.41.1>:
    e866:	0b 5b       	rla	r11		;
    e868:	30 40 46 e8 	br	#0xe846		;

0000e86c <.L9>:
    e86c:	0c 9d       	cmp	r13,	r12	;
    e86e:	02 28       	jnc	$+6      	;abs 0xe874

0000e870 <.Loc.47.1>:
    e870:	0c 8d       	sub	r13,	r12	;

0000e872 <.Loc.48.1>:
    e872:	0f db       	bis	r11,	r15	;

0000e874 <.L8>:
    e874:	12 c3       	clrc			
    e876:	0b 10       	rrc	r11		;

0000e878 <.Loc.51.1>:
    e878:	12 c3       	clrc			
    e87a:	0d 10       	rrc	r13		;
    e87c:	30 40 4c e8 	br	#0xe84c		;

0000e880 <__mspabi_divi>:
    e880:	0a 12       	push	r10		;

0000e882 <.LCFI0>:
    e882:	0f 4c       	mov	r12,	r15	;
    e884:	0e 4d       	mov	r13,	r14	;

0000e886 <.LVL14>:
    e886:	3b 40 40 e8 	mov	#59456,	r11	;#0xe840

0000e88a <.Loc.64.1>:
    e88a:	0c 93       	cmp	#0,	r12	;r3 As==00
    e88c:	1a 34       	jge	$+54     	;abs 0xe8c2

0000e88e <.Loc.66.1>:
    e88e:	4c 43       	clr.b	r12		;

0000e890 <.LVL15>:
    e890:	0c 8f       	sub	r15,	r12	;
    e892:	0f 4c       	mov	r12,	r15	;

0000e894 <.LVL16>:
    e894:	0d 93       	cmp	#0,	r13	;r3 As==00
    e896:	0d 34       	jge	$+28     	;abs 0xe8b2

0000e898 <.Loc.67.1>:
    e898:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e89a <.L21>:
    e89a:	0d 43       	clr	r13		;
    e89c:	0d 8e       	sub	r14,	r13	;

0000e89e <.LVL18>:
    e89e:	4e 43       	clr.b	r14		;

0000e8a0 <.LVL19>:
    e8a0:	0c 4f       	mov	r15,	r12	;

0000e8a2 <.LVL20>:
    e8a2:	8b 12       	call	r11		;

0000e8a4 <.LVL21>:
    e8a4:	1a 93       	cmp	#1,	r10	;r3 As==01
    e8a6:	03 24       	jz	$+8      	;abs 0xe8ae

0000e8a8 <.L20>:
    e8a8:	4d 43       	clr.b	r13		;
    e8aa:	0d 8c       	sub	r12,	r13	;
    e8ac:	0c 4d       	mov	r13,	r12	;

0000e8ae <.L16>:
    e8ae:	3a 41       	pop	r10		;
    e8b0:	30 41       	ret			

0000e8b2 <.L18>:
    e8b2:	4e 43       	clr.b	r14		;
    e8b4:	8b 12       	call	r11		;

0000e8b6 <.LVL25>:
    e8b6:	30 40 a8 e8 	br	#0xe8a8		;

0000e8ba <.L27>:
    e8ba:	4e 43       	clr.b	r14		;
    e8bc:	8b 12       	call	r11		;

0000e8be <.LVL27>:
    e8be:	30 40 ae e8 	br	#0xe8ae		;

0000e8c2 <.L17>:
    e8c2:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8c4:	fa 37       	jge	$-10     	;abs 0xe8ba

0000e8c6 <.Loc.61.1>:
    e8c6:	4a 43       	clr.b	r10		;
    e8c8:	30 40 9a e8 	br	#0xe89a		;

0000e8cc <__mspabi_remi>:
    e8cc:	0a 12       	push	r10		;

0000e8ce <.LCFI1>:
    e8ce:	0c 93       	cmp	#0,	r12	;r3 As==00
    e8d0:	13 34       	jge	$+40     	;abs 0xe8f8

0000e8d2 <.Loc.92.1>:
    e8d2:	4e 43       	clr.b	r14		;
    e8d4:	0e 8c       	sub	r12,	r14	;
    e8d6:	0c 4e       	mov	r14,	r12	;

0000e8d8 <.LVL31>:
    e8d8:	5a 43       	mov.b	#1,	r10	;r3 As==01

0000e8da <.L29>:
    e8da:	0d 93       	cmp	#0,	r13	;r3 As==00
    e8dc:	03 34       	jge	$+8      	;abs 0xe8e4
    e8de:	4e 43       	clr.b	r14		;
    e8e0:	0e 8d       	sub	r13,	r14	;
    e8e2:	0d 4e       	mov	r14,	r13	;

0000e8e4 <.L30>:
    e8e4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e8e6:	b0 12 40 e8 	call	#59456		;#0xe840

0000e8ea <.LVL34>:
    e8ea:	0a 93       	cmp	#0,	r10	;r3 As==00
    e8ec:	03 24       	jz	$+8      	;abs 0xe8f4

0000e8ee <.LVL35>:
    e8ee:	4d 43       	clr.b	r13		;
    e8f0:	0d 8c       	sub	r12,	r13	;
    e8f2:	0c 4d       	mov	r13,	r12	;

0000e8f4 <.L28>:
    e8f4:	3a 41       	pop	r10		;
    e8f6:	30 41       	ret			

0000e8f8 <.L32>:
    e8f8:	4a 43       	clr.b	r10		;
    e8fa:	30 40 da e8 	br	#0xe8da		;

0000e8fe <__mspabi_divu>:
    e8fe:	4e 43       	clr.b	r14		;
    e900:	b0 12 40 e8 	call	#59456		;#0xe840

0000e904 <.LVL39>:
    e904:	30 41       	ret			

0000e906 <__mspabi_remu>:
    e906:	5e 43       	mov.b	#1,	r14	;r3 As==01
    e908:	b0 12 40 e8 	call	#59456		;#0xe840

0000e90c <.LVL41>:
    e90c:	30 41       	ret			

0000e90e <__mspabi_func_epilog_7>:
    e90e:	34 41       	pop	r4		;

0000e910 <__mspabi_func_epilog_6>:
    e910:	35 41       	pop	r5		;

0000e912 <__mspabi_func_epilog_5>:
    e912:	36 41       	pop	r6		;

0000e914 <__mspabi_func_epilog_4>:
    e914:	37 41       	pop	r7		;

0000e916 <__mspabi_func_epilog_3>:
    e916:	38 41       	pop	r8		;

0000e918 <__mspabi_func_epilog_2>:
    e918:	39 41       	pop	r9		;

0000e91a <__mspabi_func_epilog_1>:
    e91a:	3a 41       	pop	r10		;
    e91c:	30 41       	ret			

0000e91e <__mspabi_srai_15>:
    e91e:	0c 11       	rra	r12		;

0000e920 <__mspabi_srai_14>:
    e920:	0c 11       	rra	r12		;

0000e922 <__mspabi_srai_13>:
    e922:	0c 11       	rra	r12		;

0000e924 <__mspabi_srai_12>:
    e924:	0c 11       	rra	r12		;

0000e926 <__mspabi_srai_11>:
    e926:	0c 11       	rra	r12		;

0000e928 <__mspabi_srai_10>:
    e928:	0c 11       	rra	r12		;

0000e92a <__mspabi_srai_9>:
    e92a:	0c 11       	rra	r12		;

0000e92c <__mspabi_srai_8>:
    e92c:	0c 11       	rra	r12		;

0000e92e <__mspabi_srai_7>:
    e92e:	0c 11       	rra	r12		;

0000e930 <__mspabi_srai_6>:
    e930:	0c 11       	rra	r12		;

0000e932 <__mspabi_srai_5>:
    e932:	0c 11       	rra	r12		;

0000e934 <__mspabi_srai_4>:
    e934:	0c 11       	rra	r12		;

0000e936 <__mspabi_srai_3>:
    e936:	0c 11       	rra	r12		;

0000e938 <__mspabi_srai_2>:
    e938:	0c 11       	rra	r12		;

0000e93a <__mspabi_srai_1>:
    e93a:	0c 11       	rra	r12		;
    e93c:	30 41       	ret			

0000e93e <.L11>:
    e93e:	3d 53       	add	#-1,	r13	;r3 As==11
    e940:	0c 11       	rra	r12		;

0000e942 <__mspabi_srai>:
    e942:	0d 93       	cmp	#0,	r13	;r3 As==00
    e944:	fc 23       	jnz	$-6      	;abs 0xe93e
    e946:	30 41       	ret			

0000e948 <__mspabi_sral_15>:
    e948:	0d 11       	rra	r13		;
    e94a:	0c 10       	rrc	r12		;

0000e94c <__mspabi_sral_14>:
    e94c:	0d 11       	rra	r13		;
    e94e:	0c 10       	rrc	r12		;

0000e950 <__mspabi_sral_13>:
    e950:	0d 11       	rra	r13		;
    e952:	0c 10       	rrc	r12		;

0000e954 <__mspabi_sral_12>:
    e954:	0d 11       	rra	r13		;
    e956:	0c 10       	rrc	r12		;

0000e958 <__mspabi_sral_11>:
    e958:	0d 11       	rra	r13		;
    e95a:	0c 10       	rrc	r12		;

0000e95c <__mspabi_sral_10>:
    e95c:	0d 11       	rra	r13		;
    e95e:	0c 10       	rrc	r12		;

0000e960 <__mspabi_sral_9>:
    e960:	0d 11       	rra	r13		;
    e962:	0c 10       	rrc	r12		;

0000e964 <__mspabi_sral_8>:
    e964:	0d 11       	rra	r13		;
    e966:	0c 10       	rrc	r12		;

0000e968 <__mspabi_sral_7>:
    e968:	0d 11       	rra	r13		;
    e96a:	0c 10       	rrc	r12		;

0000e96c <__mspabi_sral_6>:
    e96c:	0d 11       	rra	r13		;
    e96e:	0c 10       	rrc	r12		;

0000e970 <__mspabi_sral_5>:
    e970:	0d 11       	rra	r13		;
    e972:	0c 10       	rrc	r12		;

0000e974 <__mspabi_sral_4>:
    e974:	0d 11       	rra	r13		;
    e976:	0c 10       	rrc	r12		;

0000e978 <__mspabi_sral_3>:
    e978:	0d 11       	rra	r13		;
    e97a:	0c 10       	rrc	r12		;

0000e97c <__mspabi_sral_2>:
    e97c:	0d 11       	rra	r13		;
    e97e:	0c 10       	rrc	r12		;

0000e980 <__mspabi_sral_1>:
    e980:	0d 11       	rra	r13		;
    e982:	0c 10       	rrc	r12		;
    e984:	30 41       	ret			

0000e986 <.L12>:
    e986:	3e 53       	add	#-1,	r14	;r3 As==11
    e988:	0d 11       	rra	r13		;
    e98a:	0c 10       	rrc	r12		;

0000e98c <__mspabi_sral>:
    e98c:	0e 93       	cmp	#0,	r14	;r3 As==00
    e98e:	fb 23       	jnz	$-8      	;abs 0xe986
    e990:	30 41       	ret			

0000e992 <__mspabi_srli_15>:
    e992:	12 c3       	clrc			
    e994:	0c 10       	rrc	r12		;

0000e996 <__mspabi_srli_14>:
    e996:	12 c3       	clrc			
    e998:	0c 10       	rrc	r12		;

0000e99a <__mspabi_srli_13>:
    e99a:	12 c3       	clrc			
    e99c:	0c 10       	rrc	r12		;

0000e99e <__mspabi_srli_12>:
    e99e:	12 c3       	clrc			
    e9a0:	0c 10       	rrc	r12		;

0000e9a2 <__mspabi_srli_11>:
    e9a2:	12 c3       	clrc			
    e9a4:	0c 10       	rrc	r12		;

0000e9a6 <__mspabi_srli_10>:
    e9a6:	12 c3       	clrc			
    e9a8:	0c 10       	rrc	r12		;

0000e9aa <__mspabi_srli_9>:
    e9aa:	12 c3       	clrc			
    e9ac:	0c 10       	rrc	r12		;

0000e9ae <__mspabi_srli_8>:
    e9ae:	12 c3       	clrc			
    e9b0:	0c 10       	rrc	r12		;

0000e9b2 <__mspabi_srli_7>:
    e9b2:	12 c3       	clrc			
    e9b4:	0c 10       	rrc	r12		;

0000e9b6 <__mspabi_srli_6>:
    e9b6:	12 c3       	clrc			
    e9b8:	0c 10       	rrc	r12		;

0000e9ba <__mspabi_srli_5>:
    e9ba:	12 c3       	clrc			
    e9bc:	0c 10       	rrc	r12		;

0000e9be <__mspabi_srli_4>:
    e9be:	12 c3       	clrc			
    e9c0:	0c 10       	rrc	r12		;

0000e9c2 <__mspabi_srli_3>:
    e9c2:	12 c3       	clrc			
    e9c4:	0c 10       	rrc	r12		;

0000e9c6 <__mspabi_srli_2>:
    e9c6:	12 c3       	clrc			
    e9c8:	0c 10       	rrc	r12		;

0000e9ca <__mspabi_srli_1>:
    e9ca:	12 c3       	clrc			
    e9cc:	0c 10       	rrc	r12		;
    e9ce:	30 41       	ret			

0000e9d0 <.L11>:
    e9d0:	3d 53       	add	#-1,	r13	;r3 As==11
    e9d2:	12 c3       	clrc			
    e9d4:	0c 10       	rrc	r12		;

0000e9d6 <__mspabi_srli>:
    e9d6:	0d 93       	cmp	#0,	r13	;r3 As==00
    e9d8:	fb 23       	jnz	$-8      	;abs 0xe9d0
    e9da:	30 41       	ret			

0000e9dc <__mspabi_srll_15>:
    e9dc:	12 c3       	clrc			
    e9de:	0d 10       	rrc	r13		;
    e9e0:	0c 10       	rrc	r12		;

0000e9e2 <__mspabi_srll_14>:
    e9e2:	12 c3       	clrc			
    e9e4:	0d 10       	rrc	r13		;
    e9e6:	0c 10       	rrc	r12		;

0000e9e8 <__mspabi_srll_13>:
    e9e8:	12 c3       	clrc			
    e9ea:	0d 10       	rrc	r13		;
    e9ec:	0c 10       	rrc	r12		;

0000e9ee <__mspabi_srll_12>:
    e9ee:	12 c3       	clrc			
    e9f0:	0d 10       	rrc	r13		;
    e9f2:	0c 10       	rrc	r12		;

0000e9f4 <__mspabi_srll_11>:
    e9f4:	12 c3       	clrc			
    e9f6:	0d 10       	rrc	r13		;
    e9f8:	0c 10       	rrc	r12		;

0000e9fa <__mspabi_srll_10>:
    e9fa:	12 c3       	clrc			
    e9fc:	0d 10       	rrc	r13		;
    e9fe:	0c 10       	rrc	r12		;

0000ea00 <__mspabi_srll_9>:
    ea00:	12 c3       	clrc			
    ea02:	0d 10       	rrc	r13		;
    ea04:	0c 10       	rrc	r12		;

0000ea06 <__mspabi_srll_8>:
    ea06:	12 c3       	clrc			
    ea08:	0d 10       	rrc	r13		;
    ea0a:	0c 10       	rrc	r12		;

0000ea0c <__mspabi_srll_7>:
    ea0c:	12 c3       	clrc			
    ea0e:	0d 10       	rrc	r13		;
    ea10:	0c 10       	rrc	r12		;

0000ea12 <__mspabi_srll_6>:
    ea12:	12 c3       	clrc			
    ea14:	0d 10       	rrc	r13		;
    ea16:	0c 10       	rrc	r12		;

0000ea18 <__mspabi_srll_5>:
    ea18:	12 c3       	clrc			
    ea1a:	0d 10       	rrc	r13		;
    ea1c:	0c 10       	rrc	r12		;

0000ea1e <__mspabi_srll_4>:
    ea1e:	12 c3       	clrc			
    ea20:	0d 10       	rrc	r13		;
    ea22:	0c 10       	rrc	r12		;

0000ea24 <__mspabi_srll_3>:
    ea24:	12 c3       	clrc			
    ea26:	0d 10       	rrc	r13		;
    ea28:	0c 10       	rrc	r12		;

0000ea2a <__mspabi_srll_2>:
    ea2a:	12 c3       	clrc			
    ea2c:	0d 10       	rrc	r13		;
    ea2e:	0c 10       	rrc	r12		;

0000ea30 <__mspabi_srll_1>:
    ea30:	12 c3       	clrc			
    ea32:	0d 10       	rrc	r13		;
    ea34:	0c 10       	rrc	r12		;
    ea36:	30 41       	ret			

0000ea38 <.L12>:
    ea38:	3e 53       	add	#-1,	r14	;r3 As==11
    ea3a:	12 c3       	clrc			
    ea3c:	0d 10       	rrc	r13		;
    ea3e:	0c 10       	rrc	r12		;

0000ea40 <__mspabi_srll>:
    ea40:	0e 93       	cmp	#0,	r14	;r3 As==00
    ea42:	fa 23       	jnz	$-10     	;abs 0xea38
    ea44:	30 41       	ret			

0000ea46 <memcpy>:
    ea46:	0f 4c       	mov	r12,	r15	;
    ea48:	0e 5c       	add	r12,	r14	;

0000ea4a <.L2>:
    ea4a:	0f 9e       	cmp	r14,	r15	;
    ea4c:	01 20       	jnz	$+4      	;abs 0xea50

0000ea4e <.Loc.111.1>:
    ea4e:	30 41       	ret			

0000ea50 <.L3>:
    ea50:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    ea54:	1f 53       	inc	r15		;

0000ea56 <.LVL4>:
    ea56:	1d 53       	inc	r13		;
    ea58:	30 40 4a ea 	br	#0xea4a		;

0000ea5c <memmove>:
    ea5c:	0d 9c       	cmp	r12,	r13	;
    ea5e:	0a 28       	jnc	$+22     	;abs 0xea74

0000ea60 <.L5>:
    ea60:	0f 4c       	mov	r12,	r15	;
    ea62:	0e 5c       	add	r12,	r14	;

0000ea64 <.L3>:
    ea64:	0e 9f       	cmp	r15,	r14	;
    ea66:	0d 24       	jz	$+28     	;abs 0xea82

0000ea68 <.LVL3>:
    ea68:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    ea6c:	1f 53       	inc	r15		;

0000ea6e <.LVL4>:
    ea6e:	1d 53       	inc	r13		;
    ea70:	30 40 64 ea 	br	#0xea64		;

0000ea74 <.L2>:
    ea74:	0f 4d       	mov	r13,	r15	;
    ea76:	0f 5e       	add	r14,	r15	;
    ea78:	0c 9f       	cmp	r15,	r12	;
    ea7a:	f2 2f       	jc	$-26     	;abs 0xea60

0000ea7c <.L4>:
    ea7c:	3e 53       	add	#-1,	r14	;r3 As==11

0000ea7e <.LVL7>:
    ea7e:	3e 93       	cmp	#-1,	r14	;r3 As==11
    ea80:	01 20       	jnz	$+4      	;abs 0xea84

0000ea82 <.L10>:
    ea82:	30 41       	ret			

0000ea84 <.L6>:
    ea84:	0b 4c       	mov	r12,	r11	;
    ea86:	0b 5e       	add	r14,	r11	;
    ea88:	0f 4d       	mov	r13,	r15	;
    ea8a:	0f 5e       	add	r14,	r15	;
    ea8c:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    ea90:	30 40 7c ea 	br	#0xea7c		;

0000ea94 <memset>:
    ea94:	0f 4c       	mov	r12,	r15	;
    ea96:	0e 5c       	add	r12,	r14	;

0000ea98 <.L2>:
    ea98:	0f 9e       	cmp	r14,	r15	;
    ea9a:	01 20       	jnz	$+4      	;abs 0xea9e

0000ea9c <.Loc.104.1>:
    ea9c:	30 41       	ret			

0000ea9e <.L3>:
    ea9e:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    eaa2:	1f 53       	inc	r15		;

0000eaa4 <.LVL4>:
    eaa4:	30 40 98 ea 	br	#0xea98		;

0000eaa8 <L0>:
    eaa8:	30 41       	ret			

0000eaaa <__do_global_ctors_aux>:
    eaaa:	0a 12       	push	r10		;
    eaac:	3a 40 68 e0 	mov	#57448,	r10	;#0xe068

0000eab0 <.L2>:
    eab0:	2c 4a       	mov	@r10,	r12	;
    eab2:	3c 93       	cmp	#-1,	r12	;r3 As==11
    eab4:	02 20       	jnz	$+6      	;abs 0xeaba
    eab6:	3a 41       	pop	r10		;
    eab8:	30 41       	ret			

0000eaba <.L3>:
    eaba:	8c 12       	call	r12		;
    eabc:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    eac0:	30 40 b0 ea 	br	#0xeab0		;

0000eac4 <call___do_global_ctors_aux>:
    eac4:	b0 12 76 e1 	call	#57718		;#0xe176
    eac8:	b0 12 aa ea 	call	#60074		;#0xeaaa

0000eacc <L0>:
    eacc:	b0 12 ae e0 	call	#57518		;#0xe0ae

0000ead0 <.Loc.19.1>:
    ead0:	b0 12 a0 e0 	call	#57504		;#0xe0a0

0000ead4 <.Loc.20.1>:
    ead4:	30 41       	ret			

0000ead6 <__msp430_fini>:
    ead6:	b0 12 bc e0 	call	#57532		;#0xe0bc

0000eada <L0>:
    eada:	b0 12 28 e1 	call	#57640		;#0xe128

0000eade <L0>:
    eade:	30 41       	ret			
